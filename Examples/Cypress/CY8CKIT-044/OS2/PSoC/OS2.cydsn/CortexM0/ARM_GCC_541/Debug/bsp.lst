ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"bsp.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	RGB_PrevVal
  20              		.data
  21              		.align	2
  22              		.type	RGB_PrevVal, %object
  23              		.size	RGB_PrevVal, 4
  24              	RGB_PrevVal:
  25 0000 000000FF 		.word	-16777216
  26              		.section	.text.BSP_Init,"ax",%progbits
  27              		.align	2
  28              		.global	BSP_Init
  29              		.code	16
  30              		.thumb_func
  31              		.type	BSP_Init, %function
  32              	BSP_Init:
  33              	.LFB34:
  34              		.file 1 "..\\..\\..\\BSP\\bsp.c"
   1:..\..\..\BSP/bsp.c **** /*
   2:..\..\..\BSP/bsp.c **** ***************************************************************************************************
   3:..\..\..\BSP/bsp.c **** *                                     MICIRUM BOARD SUPPORT PACKAGE
   4:..\..\..\BSP/bsp.c **** *
   5:..\..\..\BSP/bsp.c **** *                             (c) Copyright 2015; Micrium, Inc.; Weston, FL
   6:..\..\..\BSP/bsp.c **** *
   7:..\..\..\BSP/bsp.c **** *               All rights reserved.  Protected by international copyright laws.
   8:..\..\..\BSP/bsp.c **** *               Knowledge of the source code may NOT be used to develop a similar product.
   9:..\..\..\BSP/bsp.c **** *               Please help us continue to provide the Embedded community with the finest
  10:..\..\..\BSP/bsp.c **** *               software available.  Your honesty is greatly appreciated.
  11:..\..\..\BSP/bsp.c **** ***************************************************************************************************
  12:..\..\..\BSP/bsp.c **** */
  13:..\..\..\BSP/bsp.c **** 
  14:..\..\..\BSP/bsp.c **** /*
  15:..\..\..\BSP/bsp.c **** ***************************************************************************************************
  16:..\..\..\BSP/bsp.c **** *                                        BOARD SUPPORT PACKAGE
  17:..\..\..\BSP/bsp.c **** *
  18:..\..\..\BSP/bsp.c **** *                                           CYPRESS PSoC5
  19:..\..\..\BSP/bsp.c **** *                                              with the
  20:..\..\..\BSP/bsp.c **** *                                     CY8CKIT-050 Development Kit
  21:..\..\..\BSP/bsp.c **** *
  22:..\..\..\BSP/bsp.c **** * Filename      : bsp.c
  23:..\..\..\BSP/bsp.c **** * Version       : V1.00
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 2


  24:..\..\..\BSP/bsp.c **** * Programmer(s) : DC
  25:..\..\..\BSP/bsp.c **** ***************************************************************************************************
  26:..\..\..\BSP/bsp.c **** */
  27:..\..\..\BSP/bsp.c **** 
  28:..\..\..\BSP/bsp.c **** /*
  29:..\..\..\BSP/bsp.c **** ***************************************************************************************************
  30:..\..\..\BSP/bsp.c **** *                                             INCLUDE FILES
  31:..\..\..\BSP/bsp.c **** ***************************************************************************************************
  32:..\..\..\BSP/bsp.c **** */
  33:..\..\..\BSP/bsp.c **** 
  34:..\..\..\BSP/bsp.c **** #define   BSP_MODULE
  35:..\..\..\BSP/bsp.c **** #include  "bsp.h"
  36:..\..\..\BSP/bsp.c **** 
  37:..\..\..\BSP/bsp.c **** #include  <Accel_ISR.h>
  38:..\..\..\BSP/bsp.c **** #include  <Accel_Pin.h>
  39:..\..\..\BSP/bsp.c **** 
  40:..\..\..\BSP/bsp.c **** 
  41:..\..\..\BSP/bsp.c **** /*
  42:..\..\..\BSP/bsp.c **** ***************************************************************************************************
  43:..\..\..\BSP/bsp.c **** *                                            LOCAL DEFINES
  44:..\..\..\BSP/bsp.c **** ***************************************************************************************************
  45:..\..\..\BSP/bsp.c **** */
  46:..\..\..\BSP/bsp.c ****                                                                 /* ------------------- COLOR DEFINE
  47:..\..\..\BSP/bsp.c **** #define  BSP_RGB_BRIGHT_SAT_SHIFT               0x01u
  48:..\..\..\BSP/bsp.c **** #define  BSP_RGB_MAX_ALPHA_VAL                  0xFFu
  49:..\..\..\BSP/bsp.c **** 
  50:..\..\..\BSP/bsp.c ****                                                                 /* -------------- COLOR POSITION DE
  51:..\..\..\BSP/bsp.c **** #define  BSP_RGB_ALPHA_POS_SHIFT                24u             /* Shift to set the Alpha Value to 
  52:..\..\..\BSP/bsp.c **** #define  BSP_RGB_RED_POS_SHIFT                  16u             /* Shift to set the RED   Value to 
  53:..\..\..\BSP/bsp.c **** #define  BSP_RGB_GREEN_POS_SHIFT                 8u             /* Shift to set the Green Value to 
  54:..\..\..\BSP/bsp.c **** #define  BSP_RGB_BLUE_POS_SHIFT                  0u             /* Shift to set the Blue  Value to 
  55:..\..\..\BSP/bsp.c **** 
  56:..\..\..\BSP/bsp.c ****                                                                 /* ------------------ ACCEL: DEFINE
  57:..\..\..\BSP/bsp.c **** #define  BSP_ACCEL_INVALID_MSK                  0xF000u         /* Mask Accelerometer Value if Over
  58:..\..\..\BSP/bsp.c **** 
  59:..\..\..\BSP/bsp.c ****                                                                 /* --------------- ACCEL: WAKEUP VA
  60:..\..\..\BSP/bsp.c **** #define  BSP_ACCEL_WAKEUP_CNTS                  50u             /* Desired Delay : 1 sec; Cnts:   1
  61:..\..\..\BSP/bsp.c **** #define  BSP_ACCEL_WAKEUP_THRESH_CNTS            8u             /* Desired Thresh: 0.5g ; Cnts: 0.5
  62:..\..\..\BSP/bsp.c **** 
  63:..\..\..\BSP/bsp.c **** 
  64:..\..\..\BSP/bsp.c **** /*
  65:..\..\..\BSP/bsp.c **** ***************************************************************************************************
  66:..\..\..\BSP/bsp.c **** *                                           LOCAL CONSTANTS
  67:..\..\..\BSP/bsp.c **** ***************************************************************************************************
  68:..\..\..\BSP/bsp.c **** */
  69:..\..\..\BSP/bsp.c **** 
  70:..\..\..\BSP/bsp.c **** 
  71:..\..\..\BSP/bsp.c **** /*
  72:..\..\..\BSP/bsp.c **** ***************************************************************************************************
  73:..\..\..\BSP/bsp.c **** *                                             LOCAL MACROs
  74:..\..\..\BSP/bsp.c **** ***************************************************************************************************
  75:..\..\..\BSP/bsp.c **** */
  76:..\..\..\BSP/bsp.c **** 
  77:..\..\..\BSP/bsp.c **** 
  78:..\..\..\BSP/bsp.c **** /*
  79:..\..\..\BSP/bsp.c **** ***************************************************************************************************
  80:..\..\..\BSP/bsp.c **** *                                       LOCAL GLOBAL VARIABLES
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 3


  81:..\..\..\BSP/bsp.c **** ***************************************************************************************************
  82:..\..\..\BSP/bsp.c **** */
  83:..\..\..\BSP/bsp.c ****                                                                 /* ------------------- RGB LED VARs
  84:..\..\..\BSP/bsp.c **** CPU_INT32U  RGB_PrevVal = BSP_RGB_COLOR_OFF;
  85:..\..\..\BSP/bsp.c **** 
  86:..\..\..\BSP/bsp.c **** 
  87:..\..\..\BSP/bsp.c **** /*
  88:..\..\..\BSP/bsp.c **** ***************************************************************************************************
  89:..\..\..\BSP/bsp.c **** *                                      LOCAL FUNCTION PROTOTYPES
  90:..\..\..\BSP/bsp.c **** ***************************************************************************************************
  91:..\..\..\BSP/bsp.c **** */
  92:..\..\..\BSP/bsp.c ****                                                                 /* --------------- ACCEL LOCAL FUNC
  93:..\..\..\BSP/bsp.c **** static  CPU_BOOLEAN  BSP_Accel_InitSelfTst (void);
  94:..\..\..\BSP/bsp.c **** 
  95:..\..\..\BSP/bsp.c **** static  CPU_BOOLEAN  BSP_Accel_RegRdWr     (BSP_KXTJ2_DATA_DIR   rd_wr,
  96:..\..\..\BSP/bsp.c ****                                             CPU_INT08U           reg,
  97:..\..\..\BSP/bsp.c ****                                             CPU_INT08U          *value);
  98:..\..\..\BSP/bsp.c ****                                                                 
  99:..\..\..\BSP/bsp.c **** /*
 100:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 101:..\..\..\BSP/bsp.c **** *                                         LOCAL ISR PROTOTYPES
 102:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 103:..\..\..\BSP/bsp.c **** */
 104:..\..\..\BSP/bsp.c ****                                                                 /* -------------- BSP ACCELEROMETER
 105:..\..\..\BSP/bsp.c **** CY_ISR_PROTO(BSP_Accel_ISR_Handler);                            /* See BSP_Init Note (2B) For more 
 106:..\..\..\BSP/bsp.c **** 
 107:..\..\..\BSP/bsp.c **** 
 108:..\..\..\BSP/bsp.c **** /*
 109:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 110:..\..\..\BSP/bsp.c **** *                                              BSP_Init()
 111:..\..\..\BSP/bsp.c **** *
 112:..\..\..\BSP/bsp.c **** * Description : Initialize Board Support Package.
 113:..\..\..\BSP/bsp.c **** *
 114:..\..\..\BSP/bsp.c **** * Argument(s) : none.
 115:..\..\..\BSP/bsp.c **** *
 116:..\..\..\BSP/bsp.c **** * Return(s)   : none.
 117:..\..\..\BSP/bsp.c **** *
 118:..\..\..\BSP/bsp.c **** * Caller(s)   : main().
 119:..\..\..\BSP/bsp.c **** *
 120:..\..\..\BSP/bsp.c **** * Note(s)     : (1) This funtion initializes Peripherals required. For this BSP, the BSP_Init() mus
 121:..\..\..\BSP/bsp.c **** *                   called before the OS Initializes due to the Configuration of the OS Interrupt a
 122:..\..\..\BSP/bsp.c **** *                   PendSV Handlers being done here. Since these are Interrupts are based on the CP
 123:..\..\..\BSP/bsp.c **** *                   NVIC Interrupt Sources, they are handled differently than Peripheral Interrupts
 124:..\..\..\BSP/bsp.c **** *
 125:..\..\..\BSP/bsp.c **** *               (2) For Peripheral Interrupts, each Interrupt 'name' (set in the 'TopDesign.cysch' 
 126:..\..\..\BSP/bsp.c **** *                   will generate source code files with that specific name. under the Interrupt's
 127:..\..\..\BSP/bsp.c **** *                   <name.c> file, there the <name's> default ISR handler will be generated and you
 128:..\..\..\BSP/bsp.c **** *                   code's ISR Handler should be added there within the comments to not be removed 
 129:..\..\..\BSP/bsp.c **** *                   the next necessary compile of the 'Generated Sources'.
 130:..\..\..\BSP/bsp.c **** *                   (A) Another option would be to call the <name's>_StartEx(ISR Handler) call wher
 131:..\..\..\BSP/bsp.c **** *                       argument passed is the address of the ISR to set in the IVT.
 132:..\..\..\BSP/bsp.c **** *
 133:..\..\..\BSP/bsp.c **** *                   (B) Each ISR Function should use the CY_ISR and CY_ISR_PROTO macros to provide
 134:..\..\..\BSP/bsp.c **** *                       consistency definition across compilers using the following examples:
 135:..\..\..\BSP/bsp.c **** *                           - Function Definition Example:
 136:..\..\..\BSP/bsp.c **** *                               CY_ISR(MyISR) {...}
 137:..\..\..\BSP/bsp.c **** *                           - Function Prototype  Example:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 4


 138:..\..\..\BSP/bsp.c **** *                               CY_ISR_PROTO(MyISR);
 139:..\..\..\BSP/bsp.c **** *
 140:..\..\..\BSP/bsp.c **** *               (3) Every OS-Aware ISR should follow the following example setup:
 141:..\..\..\BSP/bsp.c **** *                       CY_ISR(MyISR)
 142:..\..\..\BSP/bsp.c **** *                       {
 143:..\..\..\BSP/bsp.c **** *                           CPU_SR_ALLOC();
 144:..\..\..\BSP/bsp.c **** *
 145:..\..\..\BSP/bsp.c **** *
 146:..\..\..\BSP/bsp.c **** *                           CPU_CRITICAL_ENTER();
 147:..\..\..\BSP/bsp.c **** *                           OSIntEnter();
 148:..\..\..\BSP/bsp.c **** *                           CPU_CRITICAL_EXIT();
 149:..\..\..\BSP/bsp.c **** *
 150:..\..\..\BSP/bsp.c **** *                           <Handle ISR Here>
 151:..\..\..\BSP/bsp.c **** *
 152:..\..\..\BSP/bsp.c **** *                           OSIntExit();
 153:..\..\..\BSP/bsp.c **** *                       }
 154:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 155:..\..\..\BSP/bsp.c **** */
 156:..\..\..\BSP/bsp.c **** 
 157:..\..\..\BSP/bsp.c **** 
 158:..\..\..\BSP/bsp.c **** void BSP_Init (void)
 159:..\..\..\BSP/bsp.c **** {
  35              		.loc 1 159 0
  36              		.cfi_startproc
  37              		@ args = 0, pretend = 0, frame = 8
  38              		@ frame_needed = 1, uses_anonymous_args = 0
  39 0000 80B5     		push	{r7, lr}
  40              		.cfi_def_cfa_offset 8
  41              		.cfi_offset 7, -8
  42              		.cfi_offset 14, -4
  43 0002 82B0     		sub	sp, sp, #8
  44              		.cfi_def_cfa_offset 16
  45 0004 00AF     		add	r7, sp, #0
  46              		.cfi_def_cfa_register 7
 160:..\..\..\BSP/bsp.c ****     CPU_INT32U   reg_val;
 161:..\..\..\BSP/bsp.c ****     CPU_INT32U  *p_vect_tbl;
 162:..\..\..\BSP/bsp.c ****     
 163:..\..\..\BSP/bsp.c ****                                                                 /* -------------- SET PENDSV & TICK
 164:..\..\..\BSP/bsp.c ****     reg_val = CPU_REG_NVIC_VTOR;                                /* Get the NVIC Offset Table       
  47              		.loc 1 164 0
  48 0006 114B     		ldr	r3, .L2
  49 0008 1B68     		ldr	r3, [r3]
  50 000a 7B60     		str	r3, [r7, #4]
 165:..\..\..\BSP/bsp.c ****     DEF_BIT_CLR(reg_val, DEF_BIT_29);                           /* Clear the TBLBASE Bit           
  51              		.loc 1 165 0
  52 000c 7B68     		ldr	r3, [r7, #4]
  53 000e 104A     		ldr	r2, .L2+4
  54 0010 1340     		ands	r3, r2
  55 0012 7B60     		str	r3, [r7, #4]
 166:..\..\..\BSP/bsp.c ****     
 167:..\..\..\BSP/bsp.c ****     p_vect_tbl                  = (CPU_INT32U *)reg_val;           
  56              		.loc 1 167 0
  57 0014 7B68     		ldr	r3, [r7, #4]
  58 0016 3B60     		str	r3, [r7]
 168:..\..\..\BSP/bsp.c ****                                                                 /* Install the PendSV & Systick Int
 169:..\..\..\BSP/bsp.c ****     p_vect_tbl[CPU_INT_PENDSV]  = (CPU_INT32U  )PendSV_Handler;
  59              		.loc 1 169 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 5


  60 0018 3B68     		ldr	r3, [r7]
  61 001a 3833     		adds	r3, r3, #56
  62 001c 0D4A     		ldr	r2, .L2+8
  63 001e 1A60     		str	r2, [r3]
 170:..\..\..\BSP/bsp.c ****     p_vect_tbl[CPU_INT_SYSTICK] = (CPU_INT32U  )SysTick_Handler;
  64              		.loc 1 170 0
  65 0020 3B68     		ldr	r3, [r7]
  66 0022 3C33     		adds	r3, r3, #60
  67 0024 0C4A     		ldr	r2, .L2+12
  68 0026 1A60     		str	r2, [r3]
 171:..\..\..\BSP/bsp.c ****     
 172:..\..\..\BSP/bsp.c ****                                                                 /* ----------------- INIT RGB LED P
 173:..\..\..\BSP/bsp.c ****     PWM_Red_Start();                                            /* Enable and Start the PWM Block f
  69              		.loc 1 173 0
  70 0028 FFF7FEFF 		bl	PWM_Red_Start
 174:..\..\..\BSP/bsp.c **** 	PWM_Green_Start();
  71              		.loc 1 174 0
  72 002c FFF7FEFF 		bl	PWM_Green_Start
 175:..\..\..\BSP/bsp.c **** 	PWM_Blue_Start();
  73              		.loc 1 175 0
  74 0030 FFF7FEFF 		bl	PWM_Blue_Start
 176:..\..\..\BSP/bsp.c ****     
 177:..\..\..\BSP/bsp.c ****                                                                 /* ----------------- INIT TEMP SENS
 178:..\..\..\BSP/bsp.c ****     Temp_Sensor_Start();                                        /* Initialize and Start the TMP05 T
  75              		.loc 1 178 0
  76 0034 FFF7FEFF 		bl	Temp_Sensor_Start
 179:..\..\..\BSP/bsp.c ****     Temp_Sensor_Trigger();                                      /* Trigger the Temp Sensor Componen
  77              		.loc 1 179 0
  78 0038 FFF7FEFF 		bl	Temp_Sensor_Trigger
 180:..\..\..\BSP/bsp.c ****     
 181:..\..\..\BSP/bsp.c ****                                                                 /* --------------- AMBIENT LIGHT SE
 182:..\..\..\BSP/bsp.c ****     Opamp_Start();                                              /* Start the OpAmp Hardware require
  79              		.loc 1 182 0
  80 003c FFF7FEFF 		bl	Opamp_Start
 183:..\..\..\BSP/bsp.c ****     ADC_Start();                                                /* Enable and Start the ADC Block. 
  81              		.loc 1 183 0
  82 0040 FFF7FEFF 		bl	ADC_Start
 184:..\..\..\BSP/bsp.c **** }
  83              		.loc 1 184 0
  84 0044 C046     		nop
  85 0046 BD46     		mov	sp, r7
  86 0048 02B0     		add	sp, sp, #8
  87              		@ sp needed
  88 004a 80BD     		pop	{r7, pc}
  89              	.L3:
  90              		.align	2
  91              	.L2:
  92 004c 08ED00E0 		.word	-536810232
  93 0050 FFFFFFDF 		.word	-536870913
  94 0054 00000000 		.word	PendSV_Handler
  95 0058 00000000 		.word	SysTick_Handler
  96              		.cfi_endproc
  97              	.LFE34:
  98              		.size	BSP_Init, .-BSP_Init
  99              		.section	.text.BSP_CPU_TickInit,"ax",%progbits
 100              		.align	2
 101              		.global	BSP_CPU_TickInit
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 6


 102              		.code	16
 103              		.thumb_func
 104              		.type	BSP_CPU_TickInit, %function
 105              	BSP_CPU_TickInit:
 106              	.LFB35:
 185:..\..\..\BSP/bsp.c **** 
 186:..\..\..\BSP/bsp.c **** 
 187:..\..\..\BSP/bsp.c **** /*
 188:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 189:..\..\..\BSP/bsp.c **** *                                          BSP_CPU_TickInit()
 190:..\..\..\BSP/bsp.c **** *
 191:..\..\..\BSP/bsp.c **** * Description : Configure and Initialize the Tick Interrupt.
 192:..\..\..\BSP/bsp.c **** *
 193:..\..\..\BSP/bsp.c **** * Argument(s) : none.
 194:..\..\..\BSP/bsp.c **** *
 195:..\..\..\BSP/bsp.c **** * Return(s)   : none.
 196:..\..\..\BSP/bsp.c **** *
 197:..\..\..\BSP/bsp.c **** * Caller(s)   : App_TaskStart().
 198:..\..\..\BSP/bsp.c **** *
 199:..\..\..\BSP/bsp.c **** * Note(s)     : (1) The ARM-Cortex-M0 Port figures out the necessary qty of Ticks required for the
 200:..\..\..\BSP/bsp.c **** *                   Periodic Time Source (SysTick) by just passing the CPU Clock Frequency to the
 201:..\..\..\BSP/bsp.c **** *                   OS_CPU_SysTickInit function.
 202:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 203:..\..\..\BSP/bsp.c **** */
 204:..\..\..\BSP/bsp.c **** 
 205:..\..\..\BSP/bsp.c **** void  BSP_CPU_TickInit (void)
 206:..\..\..\BSP/bsp.c **** {
 107              		.loc 1 206 0
 108              		.cfi_startproc
 109              		@ args = 0, pretend = 0, frame = 8
 110              		@ frame_needed = 1, uses_anonymous_args = 0
 111 0000 80B5     		push	{r7, lr}
 112              		.cfi_def_cfa_offset 8
 113              		.cfi_offset 7, -8
 114              		.cfi_offset 14, -4
 115 0002 82B0     		sub	sp, sp, #8
 116              		.cfi_def_cfa_offset 16
 117 0004 00AF     		add	r7, sp, #0
 118              		.cfi_def_cfa_register 7
 207:..\..\..\BSP/bsp.c ****     CPU_INT32U  cpu_clk_freq;
 208:..\..\..\BSP/bsp.c ****     
 209:..\..\..\BSP/bsp.c ****     
 210:..\..\..\BSP/bsp.c ****     cpu_clk_freq = BSP_CPU_ClkFreq();                           /* Determine CPU Clock Frequency fo
 119              		.loc 1 210 0
 120 0006 FFF7FEFF 		bl	BSP_CPU_ClkFreq
 121 000a 0300     		movs	r3, r0
 122 000c 7B60     		str	r3, [r7, #4]
 211:..\..\..\BSP/bsp.c **** 
 212:..\..\..\BSP/bsp.c ****     OS_CPU_SysTickInit(cpu_clk_freq);                           /* Init uC/OS Periodic Time Source 
 123              		.loc 1 212 0
 124 000e 7B68     		ldr	r3, [r7, #4]
 125 0010 1800     		movs	r0, r3
 126 0012 FFF7FEFF 		bl	OS_CPU_SysTickInit
 213:..\..\..\BSP/bsp.c **** }
 127              		.loc 1 213 0
 128 0016 C046     		nop
 129 0018 BD46     		mov	sp, r7
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 7


 130 001a 02B0     		add	sp, sp, #8
 131              		@ sp needed
 132 001c 80BD     		pop	{r7, pc}
 133              		.cfi_endproc
 134              	.LFE35:
 135              		.size	BSP_CPU_TickInit, .-BSP_CPU_TickInit
 136 001e C046     		.section	.text.BSP_CPU_ClkFreq,"ax",%progbits
 137              		.align	2
 138              		.global	BSP_CPU_ClkFreq
 139              		.code	16
 140              		.thumb_func
 141              		.type	BSP_CPU_ClkFreq, %function
 142              	BSP_CPU_ClkFreq:
 143              	.LFB36:
 214:..\..\..\BSP/bsp.c **** 
 215:..\..\..\BSP/bsp.c **** 
 216:..\..\..\BSP/bsp.c **** /*
 217:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 218:..\..\..\BSP/bsp.c **** *                                          BSP_CPU_ClkFreq()
 219:..\..\..\BSP/bsp.c **** *
 220:..\..\..\BSP/bsp.c **** * Description : Returns the CPU's Clock Frequency Configured.
 221:..\..\..\BSP/bsp.c **** *
 222:..\..\..\BSP/bsp.c **** * Argument(s) : none.
 223:..\..\..\BSP/bsp.c **** *
 224:..\..\..\BSP/bsp.c **** * Return(s)   : The CPU clock frequency, in Hz.
 225:..\..\..\BSP/bsp.c **** *
 226:..\..\..\BSP/bsp.c **** * Caller(s)   : BSP_CPU_TickInit().
 227:..\..\..\BSP/bsp.c **** *
 228:..\..\..\BSP/bsp.c **** * Note(s)     : none.
 229:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 230:..\..\..\BSP/bsp.c **** */
 231:..\..\..\BSP/bsp.c **** 
 232:..\..\..\BSP/bsp.c **** CPU_INT32U  BSP_CPU_ClkFreq (void)
 233:..\..\..\BSP/bsp.c **** {
 144              		.loc 1 233 0
 145              		.cfi_startproc
 146              		@ args = 0, pretend = 0, frame = 0
 147              		@ frame_needed = 1, uses_anonymous_args = 0
 148 0000 80B5     		push	{r7, lr}
 149              		.cfi_def_cfa_offset 8
 150              		.cfi_offset 7, -8
 151              		.cfi_offset 14, -4
 152 0002 00AF     		add	r7, sp, #0
 153              		.cfi_def_cfa_register 7
 234:..\..\..\BSP/bsp.c ****     return (BSP_PSOC_CPU_FREQ);
 154              		.loc 1 234 0
 155 0004 014B     		ldr	r3, .L7
 235:..\..\..\BSP/bsp.c **** }
 156              		.loc 1 235 0
 157 0006 1800     		movs	r0, r3
 158 0008 BD46     		mov	sp, r7
 159              		@ sp needed
 160 000a 80BD     		pop	{r7, pc}
 161              	.L8:
 162              		.align	2
 163              	.L7:
 164 000c 006CDC02 		.word	48000000
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 8


 165              		.cfi_endproc
 166              	.LFE36:
 167              		.size	BSP_CPU_ClkFreq, .-BSP_CPU_ClkFreq
 168              		.section	.text.BSP_RGB_On,"ax",%progbits
 169              		.align	2
 170              		.global	BSP_RGB_On
 171              		.code	16
 172              		.thumb_func
 173              		.type	BSP_RGB_On, %function
 174              	BSP_RGB_On:
 175              	.LFB37:
 236:..\..\..\BSP/bsp.c **** 
 237:..\..\..\BSP/bsp.c **** 
 238:..\..\..\BSP/bsp.c **** /*
 239:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 240:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 241:..\..\..\BSP/bsp.c **** *                                            LED FUNCTIONS
 242:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 243:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 244:..\..\..\BSP/bsp.c **** */
 245:..\..\..\BSP/bsp.c **** 
 246:..\..\..\BSP/bsp.c **** 
 247:..\..\..\BSP/bsp.c **** /*
 248:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 249:..\..\..\BSP/bsp.c **** *                                             BSP_RGB_On()
 250:..\..\..\BSP/bsp.c **** *
 251:..\..\..\BSP/bsp.c **** * Description : Turn ON the RBG LED on the Board with the Last Value saved before an BSP_RGB_Off() 
 252:..\..\..\BSP/bsp.c **** *
 253:..\..\..\BSP/bsp.c **** * Argument(s) : none.
 254:..\..\..\BSP/bsp.c **** *
 255:..\..\..\BSP/bsp.c **** * Return(s)   : none.
 256:..\..\..\BSP/bsp.c **** *
 257:..\..\..\BSP/bsp.c **** * Caller(s)   : Application.
 258:..\..\..\BSP/bsp.c **** *
 259:..\..\..\BSP/bsp.c **** * Note(s)     : (1) The RGB_PrevVal holds the Hex (0x) value previously saved when the RGB LED was 
 260:..\..\..\BSP/bsp.c **** *                   turned off.
 261:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 262:..\..\..\BSP/bsp.c **** */
 263:..\..\..\BSP/bsp.c **** 
 264:..\..\..\BSP/bsp.c **** void  BSP_RGB_On (void)
 265:..\..\..\BSP/bsp.c **** {
 176              		.loc 1 265 0
 177              		.cfi_startproc
 178              		@ args = 0, pretend = 0, frame = 0
 179              		@ frame_needed = 1, uses_anonymous_args = 0
 180 0000 80B5     		push	{r7, lr}
 181              		.cfi_def_cfa_offset 8
 182              		.cfi_offset 7, -8
 183              		.cfi_offset 14, -4
 184 0002 00AF     		add	r7, sp, #0
 185              		.cfi_def_cfa_register 7
 266:..\..\..\BSP/bsp.c ****     BSP_RGB_ColorSet(RGB_PrevVal);                              /* Restore the RGB Color of the Pre
 186              		.loc 1 266 0
 187 0004 034B     		ldr	r3, .L10
 188 0006 1B68     		ldr	r3, [r3]
 189 0008 1800     		movs	r0, r3
 190 000a FFF7FEFF 		bl	BSP_RGB_ColorSet
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 9


 267:..\..\..\BSP/bsp.c **** }
 191              		.loc 1 267 0
 192 000e C046     		nop
 193 0010 BD46     		mov	sp, r7
 194              		@ sp needed
 195 0012 80BD     		pop	{r7, pc}
 196              	.L11:
 197              		.align	2
 198              	.L10:
 199 0014 00000000 		.word	RGB_PrevVal
 200              		.cfi_endproc
 201              	.LFE37:
 202              		.size	BSP_RGB_On, .-BSP_RGB_On
 203              		.section	.text.BSP_RGB_Off,"ax",%progbits
 204              		.align	2
 205              		.global	BSP_RGB_Off
 206              		.code	16
 207              		.thumb_func
 208              		.type	BSP_RGB_Off, %function
 209              	BSP_RGB_Off:
 210              	.LFB38:
 268:..\..\..\BSP/bsp.c **** 
 269:..\..\..\BSP/bsp.c **** 
 270:..\..\..\BSP/bsp.c **** /*
 271:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 272:..\..\..\BSP/bsp.c **** *                                            BSP_RGB_Off()
 273:..\..\..\BSP/bsp.c **** *
 274:..\..\..\BSP/bsp.c **** * Description : Turn OFF the RBG LED on the Board and save the Current Color Value.
 275:..\..\..\BSP/bsp.c **** *
 276:..\..\..\BSP/bsp.c **** * Argument(s) : none.
 277:..\..\..\BSP/bsp.c **** *
 278:..\..\..\BSP/bsp.c **** * Return(s)   : none.
 279:..\..\..\BSP/bsp.c **** *
 280:..\..\..\BSP/bsp.c **** * Caller(s)   : Application.
 281:..\..\..\BSP/bsp.c **** *
 282:..\..\..\BSP/bsp.c **** * Note(s)     : (1) The RGB_PrevVal will save the current value of the RBG LED, in Hex (0x), to res
 283:..\..\..\BSP/bsp.c **** *                   the same color next time the RGB LED is turned on.
 284:..\..\..\BSP/bsp.c **** *
 285:..\..\..\BSP/bsp.c **** *               (2) RGB Black Value = 0xFF000000u, which signifies LED is OFF.
 286:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 287:..\..\..\BSP/bsp.c **** */
 288:..\..\..\BSP/bsp.c **** 
 289:..\..\..\BSP/bsp.c **** void  BSP_RGB_Off (void)
 290:..\..\..\BSP/bsp.c **** {
 211              		.loc 1 290 0
 212              		.cfi_startproc
 213              		@ args = 0, pretend = 0, frame = 0
 214              		@ frame_needed = 1, uses_anonymous_args = 0
 215 0000 80B5     		push	{r7, lr}
 216              		.cfi_def_cfa_offset 8
 217              		.cfi_offset 7, -8
 218              		.cfi_offset 14, -4
 219 0002 00AF     		add	r7, sp, #0
 220              		.cfi_def_cfa_register 7
 291:..\..\..\BSP/bsp.c ****     RGB_PrevVal = BSP_RGB_ColorRead();                          /* Save the Current RBG Color Value
 221              		.loc 1 291 0
 222 0004 FFF7FEFF 		bl	BSP_RGB_ColorRead
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 10


 223 0008 0200     		movs	r2, r0
 224 000a 054B     		ldr	r3, .L13
 225 000c 1A60     		str	r2, [r3]
 292:..\..\..\BSP/bsp.c ****     BSP_RGB_ColorSet(BSP_RGB_COLOR_OFF);                        /* Turn the RGB Color LED OFF.     
 226              		.loc 1 292 0
 227 000e FF23     		movs	r3, #255
 228 0010 1B06     		lsls	r3, r3, #24
 229 0012 1800     		movs	r0, r3
 230 0014 FFF7FEFF 		bl	BSP_RGB_ColorSet
 293:..\..\..\BSP/bsp.c **** }
 231              		.loc 1 293 0
 232 0018 C046     		nop
 233 001a BD46     		mov	sp, r7
 234              		@ sp needed
 235 001c 80BD     		pop	{r7, pc}
 236              	.L14:
 237 001e C046     		.align	2
 238              	.L13:
 239 0020 00000000 		.word	RGB_PrevVal
 240              		.cfi_endproc
 241              	.LFE38:
 242              		.size	BSP_RGB_Off, .-BSP_RGB_Off
 243              		.section	.text.BSP_RGB_ColorSet,"ax",%progbits
 244              		.align	2
 245              		.global	BSP_RGB_ColorSet
 246              		.code	16
 247              		.thumb_func
 248              		.type	BSP_RGB_ColorSet, %function
 249              	BSP_RGB_ColorSet:
 250              	.LFB39:
 294:..\..\..\BSP/bsp.c **** 
 295:..\..\..\BSP/bsp.c **** 
 296:..\..\..\BSP/bsp.c **** /*
 297:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 298:..\..\..\BSP/bsp.c **** *                                          BSP_RGB_ColorSet()
 299:..\..\..\BSP/bsp.c **** *
 300:..\..\..\BSP/bsp.c **** * Description : TOGGLE any or all the LEDs on the board.
 301:..\..\..\BSP/bsp.c **** *
 302:..\..\..\BSP/bsp.c **** * Argument(s) : color   The Color Value (in Hex) desired to Set.
 303:..\..\..\BSP/bsp.c **** *
 304:..\..\..\BSP/bsp.c **** * Return(s)   : none.
 305:..\..\..\BSP/bsp.c **** *
 306:..\..\..\BSP/bsp.c **** * Caller(s)   : Application.
 307:..\..\..\BSP/bsp.c **** *
 308:..\..\..\BSP/bsp.c **** * Note(s)     : (1) The RGBA Color Value (in Hex) is represented in the following way:
 309:..\..\..\BSP/bsp.c **** *                       Color = 0x FF 12 34 56
 310:..\..\..\BSP/bsp.c **** *                                   \  \  \  \
 311:..\..\..\BSP/bsp.c **** *                                    \  \  \  - Blue  LED Color.
 312:..\..\..\BSP/bsp.c **** *                                     \  \  - - Green LED Color.
 313:..\..\..\BSP/bsp.c **** *                                      \  - - - Red   LED Color.
 314:..\..\..\BSP/bsp.c **** *                                       - - - - Alpha Index Value.
 315:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 316:..\..\..\BSP/bsp.c **** */
 317:..\..\..\BSP/bsp.c **** 
 318:..\..\..\BSP/bsp.c **** void  BSP_RGB_ColorSet (CPU_INT32U  color)
 319:..\..\..\BSP/bsp.c **** {
 251              		.loc 1 319 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 11


 252              		.cfi_startproc
 253              		@ args = 0, pretend = 0, frame = 16
 254              		@ frame_needed = 1, uses_anonymous_args = 0
 255 0000 80B5     		push	{r7, lr}
 256              		.cfi_def_cfa_offset 8
 257              		.cfi_offset 7, -8
 258              		.cfi_offset 14, -4
 259 0002 84B0     		sub	sp, sp, #16
 260              		.cfi_def_cfa_offset 24
 261 0004 00AF     		add	r7, sp, #0
 262              		.cfi_def_cfa_register 7
 263 0006 7860     		str	r0, [r7, #4]
 320:..\..\..\BSP/bsp.c ****     CPU_INT08U  alpha;
 321:..\..\..\BSP/bsp.c ****     CPU_INT08U  color_val;
 322:..\..\..\BSP/bsp.c ****     CPU_INT16U  pwm_color;
 323:..\..\..\BSP/bsp.c ****     
 324:..\..\..\BSP/bsp.c **** 
 325:..\..\..\BSP/bsp.c ****     alpha     = HI8(HI16(color));                               /* Get Alpha Index from Hex Color V
 264              		.loc 1 325 0
 265 0008 7B68     		ldr	r3, [r7, #4]
 266 000a 1B0C     		lsrs	r3, r3, #16
 267 000c 1A12     		asrs	r2, r3, #8
 268 000e 0F23     		movs	r3, #15
 269 0010 FB18     		adds	r3, r7, r3
 270 0012 1A70     		strb	r2, [r3]
 326:..\..\..\BSP/bsp.c ****     
 327:..\..\..\BSP/bsp.c ****                                                                 /* ---------------- SET LED COLOR: 
 328:..\..\..\BSP/bsp.c ****     color_val = LO8(HI16(color));                               /* Get Red Value from the Desired R
 271              		.loc 1 328 0
 272 0014 7B68     		ldr	r3, [r7, #4]
 273 0016 1A0C     		lsrs	r2, r3, #16
 274 0018 0E23     		movs	r3, #14
 275 001a FB18     		adds	r3, r7, r3
 276 001c 1A70     		strb	r2, [r3]
 329:..\..\..\BSP/bsp.c ****     
 330:..\..\..\BSP/bsp.c ****                                                                 /* Convert the RGBA Value to a PWM 
 331:..\..\..\BSP/bsp.c ****     pwm_color = ((((0xFFu - alpha) * 0xFFu) + (alpha * color_val)) >> BSP_RGB_BRIGHT_SAT_SHIFT);
 277              		.loc 1 331 0
 278 001e 0F23     		movs	r3, #15
 279 0020 FB18     		adds	r3, r7, r3
 280 0022 1B78     		ldrb	r3, [r3]
 281 0024 1A00     		movs	r2, r3
 282 0026 1B02     		lsls	r3, r3, #8
 283 0028 D31A     		subs	r3, r2, r3
 284 002a 0F22     		movs	r2, #15
 285 002c BA18     		adds	r2, r7, r2
 286 002e 1278     		ldrb	r2, [r2]
 287 0030 0E21     		movs	r1, #14
 288 0032 7918     		adds	r1, r7, r1
 289 0034 0978     		ldrb	r1, [r1]
 290 0036 4A43     		muls	r2, r1
 291 0038 9B18     		adds	r3, r3, r2
 292 003a 284A     		ldr	r2, .L16
 293 003c 9446     		mov	ip, r2
 294 003e 6344     		add	r3, r3, ip
 295 0040 5A08     		lsrs	r2, r3, #1
 296 0042 0C23     		movs	r3, #12
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 12


 297 0044 FB18     		adds	r3, r7, r3
 298 0046 1A80     		strh	r2, [r3]
 332:..\..\..\BSP/bsp.c ****     PWM_Red_WriteCompare(pwm_color);
 299              		.loc 1 332 0
 300 0048 0C23     		movs	r3, #12
 301 004a FB18     		adds	r3, r7, r3
 302 004c 1B88     		ldrh	r3, [r3]
 303 004e 1800     		movs	r0, r3
 304 0050 FFF7FEFF 		bl	PWM_Red_WriteCompare
 333:..\..\..\BSP/bsp.c ****     
 334:..\..\..\BSP/bsp.c ****                                                                 /* --------------- SET LED COLOR: G
 335:..\..\..\BSP/bsp.c ****     color_val = HI8(LO16(color));                               /* Get Green Value from the Desired
 305              		.loc 1 335 0
 306 0054 7B68     		ldr	r3, [r7, #4]
 307 0056 1A12     		asrs	r2, r3, #8
 308 0058 0E23     		movs	r3, #14
 309 005a FB18     		adds	r3, r7, r3
 310 005c 1A70     		strb	r2, [r3]
 336:..\..\..\BSP/bsp.c ****     
 337:..\..\..\BSP/bsp.c ****                                                                 /* Convert the RGBA Value to a PWM 
 338:..\..\..\BSP/bsp.c ****     pwm_color = ((((0xFFu - alpha) * 0xFFu) + (alpha * color_val)) >> BSP_RGB_BRIGHT_SAT_SHIFT);
 311              		.loc 1 338 0
 312 005e 0F23     		movs	r3, #15
 313 0060 FB18     		adds	r3, r7, r3
 314 0062 1B78     		ldrb	r3, [r3]
 315 0064 1A00     		movs	r2, r3
 316 0066 1B02     		lsls	r3, r3, #8
 317 0068 D31A     		subs	r3, r2, r3
 318 006a 0F22     		movs	r2, #15
 319 006c BA18     		adds	r2, r7, r2
 320 006e 1278     		ldrb	r2, [r2]
 321 0070 0E21     		movs	r1, #14
 322 0072 7918     		adds	r1, r7, r1
 323 0074 0978     		ldrb	r1, [r1]
 324 0076 4A43     		muls	r2, r1
 325 0078 9B18     		adds	r3, r3, r2
 326 007a 184A     		ldr	r2, .L16
 327 007c 9446     		mov	ip, r2
 328 007e 6344     		add	r3, r3, ip
 329 0080 5A08     		lsrs	r2, r3, #1
 330 0082 0C23     		movs	r3, #12
 331 0084 FB18     		adds	r3, r7, r3
 332 0086 1A80     		strh	r2, [r3]
 339:..\..\..\BSP/bsp.c ****     PWM_Green_WriteCompare(pwm_color);
 333              		.loc 1 339 0
 334 0088 0C23     		movs	r3, #12
 335 008a FB18     		adds	r3, r7, r3
 336 008c 1B88     		ldrh	r3, [r3]
 337 008e 1800     		movs	r0, r3
 338 0090 FFF7FEFF 		bl	PWM_Green_WriteCompare
 340:..\..\..\BSP/bsp.c ****     
 341:..\..\..\BSP/bsp.c ****                                                                 /* ---------------- SET LED COLOR: 
 342:..\..\..\BSP/bsp.c ****     color_val = LO8(LO16(color));                               /* Get Blue Value from the Desired 
 339              		.loc 1 342 0
 340 0094 0E23     		movs	r3, #14
 341 0096 FB18     		adds	r3, r7, r3
 342 0098 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 13


 343 009a 1A70     		strb	r2, [r3]
 343:..\..\..\BSP/bsp.c ****     
 344:..\..\..\BSP/bsp.c ****                                                                 /* Convert the RGBA Value to a PWM 
 345:..\..\..\BSP/bsp.c ****     pwm_color = ((((0xFFu - alpha) * 0xFFu) + (alpha * color_val)) >> BSP_RGB_BRIGHT_SAT_SHIFT);
 344              		.loc 1 345 0
 345 009c 0F23     		movs	r3, #15
 346 009e FB18     		adds	r3, r7, r3
 347 00a0 1B78     		ldrb	r3, [r3]
 348 00a2 1A00     		movs	r2, r3
 349 00a4 1B02     		lsls	r3, r3, #8
 350 00a6 D31A     		subs	r3, r2, r3
 351 00a8 0F22     		movs	r2, #15
 352 00aa BA18     		adds	r2, r7, r2
 353 00ac 1278     		ldrb	r2, [r2]
 354 00ae 0E21     		movs	r1, #14
 355 00b0 7918     		adds	r1, r7, r1
 356 00b2 0978     		ldrb	r1, [r1]
 357 00b4 4A43     		muls	r2, r1
 358 00b6 9B18     		adds	r3, r3, r2
 359 00b8 084A     		ldr	r2, .L16
 360 00ba 9446     		mov	ip, r2
 361 00bc 6344     		add	r3, r3, ip
 362 00be 5A08     		lsrs	r2, r3, #1
 363 00c0 0C23     		movs	r3, #12
 364 00c2 FB18     		adds	r3, r7, r3
 365 00c4 1A80     		strh	r2, [r3]
 346:..\..\..\BSP/bsp.c ****     PWM_Blue_WriteCompare(pwm_color);
 366              		.loc 1 346 0
 367 00c6 0C23     		movs	r3, #12
 368 00c8 FB18     		adds	r3, r7, r3
 369 00ca 1B88     		ldrh	r3, [r3]
 370 00cc 1800     		movs	r0, r3
 371 00ce FFF7FEFF 		bl	PWM_Blue_WriteCompare
 347:..\..\..\BSP/bsp.c **** }
 372              		.loc 1 347 0
 373 00d2 C046     		nop
 374 00d4 BD46     		mov	sp, r7
 375 00d6 04B0     		add	sp, sp, #16
 376              		@ sp needed
 377 00d8 80BD     		pop	{r7, pc}
 378              	.L17:
 379 00da C046     		.align	2
 380              	.L16:
 381 00dc 01FE0000 		.word	65025
 382              		.cfi_endproc
 383              	.LFE39:
 384              		.size	BSP_RGB_ColorSet, .-BSP_RGB_ColorSet
 385              		.global	__aeabi_uidiv
 386              		.section	.text.BSP_RGB_ColorRead,"ax",%progbits
 387              		.align	2
 388              		.global	BSP_RGB_ColorRead
 389              		.code	16
 390              		.thumb_func
 391              		.type	BSP_RGB_ColorRead, %function
 392              	BSP_RGB_ColorRead:
 393              	.LFB40:
 348:..\..\..\BSP/bsp.c **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 14


 349:..\..\..\BSP/bsp.c **** 
 350:..\..\..\BSP/bsp.c **** /*
 351:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 352:..\..\..\BSP/bsp.c **** *                                         BSP_RGB_ColorRead()
 353:..\..\..\BSP/bsp.c **** *
 354:..\..\..\BSP/bsp.c **** * Description : Read and Return the latest Color Value of the RGB LED PWM Signals.
 355:..\..\..\BSP/bsp.c **** *
 356:..\..\..\BSP/bsp.c **** * Argument(s) : none.
 357:..\..\..\BSP/bsp.c **** *
 358:..\..\..\BSP/bsp.c **** * Return(s)   : Converted Color Value of the RGB LED.
 359:..\..\..\BSP/bsp.c **** *
 360:..\..\..\BSP/bsp.c **** * Caller(s)   : Application.
 361:..\..\..\BSP/bsp.c **** *
 362:..\..\..\BSP/bsp.c **** * Note(s)     : (1) This Function reads the PWM Signals for the Red, Green, and Blue (LED) Signals 
 363:..\..\..\BSP/bsp.c **** *                   conver the Individual RGB Value to an RGBA value to return.
 364:..\..\..\BSP/bsp.c **** *
 365:..\..\..\BSP/bsp.c **** *               (2) This Function assumes a maximum Alpha value (0xFF) will be assigned and used to
 366:..\..\..\BSP/bsp.c **** *                   convert PWM signals to RGB color values (in hex).
 367:..\..\..\BSP/bsp.c **** *
 368:..\..\..\BSP/bsp.c **** *               (3) The RGBA Color Value (in Hex) is represented in the following way:
 369:..\..\..\BSP/bsp.c **** *                       Color = 0x FF 12 34 56
 370:..\..\..\BSP/bsp.c **** *                                   \  \  \  \
 371:..\..\..\BSP/bsp.c **** *                                    \  \  \  - Blue  LED Color.
 372:..\..\..\BSP/bsp.c **** *                                     \  \  - - Green LED Color.
 373:..\..\..\BSP/bsp.c **** *                                      \  - - - Red   LED Color.
 374:..\..\..\BSP/bsp.c **** *                                       - - - - Alpha Index Value.
 375:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 376:..\..\..\BSP/bsp.c **** */
 377:..\..\..\BSP/bsp.c **** 
 378:..\..\..\BSP/bsp.c **** CPU_INT32U  BSP_RGB_ColorRead (void)
 379:..\..\..\BSP/bsp.c **** {
 394              		.loc 1 379 0
 395              		.cfi_startproc
 396              		@ args = 0, pretend = 0, frame = 8
 397              		@ frame_needed = 1, uses_anonymous_args = 0
 398 0000 80B5     		push	{r7, lr}
 399              		.cfi_def_cfa_offset 8
 400              		.cfi_offset 7, -8
 401              		.cfi_offset 14, -4
 402 0002 82B0     		sub	sp, sp, #8
 403              		.cfi_def_cfa_offset 16
 404 0004 00AF     		add	r7, sp, #0
 405              		.cfi_def_cfa_register 7
 380:..\..\..\BSP/bsp.c ****     CPU_INT32U  color;
 381:..\..\..\BSP/bsp.c ****     CPU_INT16U  pwm_color;
 382:..\..\..\BSP/bsp.c ****     CPU_INT08U  color_val;
 383:..\..\..\BSP/bsp.c ****     
 384:..\..\..\BSP/bsp.c ****     
 385:..\..\..\BSP/bsp.c ****     color = (BSP_RGB_MAX_ALPHA_VAL << BSP_RGB_ALPHA_POS_SHIFT); /* Set the Max Alpha Value to RGBA 
 406              		.loc 1 385 0
 407 0006 FF23     		movs	r3, #255
 408 0008 1B06     		lsls	r3, r3, #24
 409 000a 7B60     		str	r3, [r7, #4]
 386:..\..\..\BSP/bsp.c ****     
 387:..\..\..\BSP/bsp.c ****                                                                 /* ---------------- GET LED COLOR: 
 388:..\..\..\BSP/bsp.c ****     pwm_color = PWM_Red_ReadCompare();                          /* Get the PWM Compared Value to co
 410              		.loc 1 388 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 15


 411 000c FFF7FEFF 		bl	PWM_Red_ReadCompare
 412 0010 0200     		movs	r2, r0
 413 0012 BB1C     		adds	r3, r7, #2
 414 0014 1A80     		strh	r2, [r3]
 389:..\..\..\BSP/bsp.c ****     color_val = ((pwm_color << BSP_RGB_BRIGHT_SAT_SHIFT) / BSP_RGB_MAX_ALPHA_VAL);
 415              		.loc 1 389 0
 416 0016 BB1C     		adds	r3, r7, #2
 417 0018 1B88     		ldrh	r3, [r3]
 418 001a 5B00     		lsls	r3, r3, #1
 419 001c FF21     		movs	r1, #255
 420 001e 1800     		movs	r0, r3
 421 0020 FFF7FEFF 		bl	__aeabi_uidiv
 422 0024 0300     		movs	r3, r0
 423 0026 1A00     		movs	r2, r3
 424 0028 7B1C     		adds	r3, r7, #1
 425 002a 1A70     		strb	r2, [r3]
 390:..\..\..\BSP/bsp.c ****     
 391:..\..\..\BSP/bsp.c ****     color    |= (color_val << BSP_RGB_RED_POS_SHIFT);           /* Set the RED Converted value to R
 426              		.loc 1 391 0
 427 002c 7B1C     		adds	r3, r7, #1
 428 002e 1B78     		ldrb	r3, [r3]
 429 0030 1B04     		lsls	r3, r3, #16
 430 0032 1A00     		movs	r2, r3
 431 0034 7B68     		ldr	r3, [r7, #4]
 432 0036 1343     		orrs	r3, r2
 433 0038 7B60     		str	r3, [r7, #4]
 392:..\..\..\BSP/bsp.c ****     
 393:..\..\..\BSP/bsp.c ****                                                                 /* --------------- GET LED COLOR: G
 394:..\..\..\BSP/bsp.c ****     pwm_color = PWM_Green_ReadCompare();                        /* Get the PWM Compared Value to co
 434              		.loc 1 394 0
 435 003a FFF7FEFF 		bl	PWM_Green_ReadCompare
 436 003e 0200     		movs	r2, r0
 437 0040 BB1C     		adds	r3, r7, #2
 438 0042 1A80     		strh	r2, [r3]
 395:..\..\..\BSP/bsp.c ****     color_val = ((pwm_color << BSP_RGB_BRIGHT_SAT_SHIFT) / BSP_RGB_MAX_ALPHA_VAL);
 439              		.loc 1 395 0
 440 0044 BB1C     		adds	r3, r7, #2
 441 0046 1B88     		ldrh	r3, [r3]
 442 0048 5B00     		lsls	r3, r3, #1
 443 004a FF21     		movs	r1, #255
 444 004c 1800     		movs	r0, r3
 445 004e FFF7FEFF 		bl	__aeabi_uidiv
 446 0052 0300     		movs	r3, r0
 447 0054 1A00     		movs	r2, r3
 448 0056 7B1C     		adds	r3, r7, #1
 449 0058 1A70     		strb	r2, [r3]
 396:..\..\..\BSP/bsp.c ****     
 397:..\..\..\BSP/bsp.c ****     color    |= (color_val << BSP_RGB_GREEN_POS_SHIFT);         /* Set the GREEN Converted value to
 450              		.loc 1 397 0
 451 005a 7B1C     		adds	r3, r7, #1
 452 005c 1B78     		ldrb	r3, [r3]
 453 005e 1B02     		lsls	r3, r3, #8
 454 0060 1A00     		movs	r2, r3
 455 0062 7B68     		ldr	r3, [r7, #4]
 456 0064 1343     		orrs	r3, r2
 457 0066 7B60     		str	r3, [r7, #4]
 398:..\..\..\BSP/bsp.c ****     
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 16


 399:..\..\..\BSP/bsp.c ****                                                                 /* ---------------- GET LED COLOR: 
 400:..\..\..\BSP/bsp.c ****     pwm_color = PWM_Blue_ReadCompare();                         /* Get the PWM Compared Value to co
 458              		.loc 1 400 0
 459 0068 FFF7FEFF 		bl	PWM_Blue_ReadCompare
 460 006c 0200     		movs	r2, r0
 461 006e BB1C     		adds	r3, r7, #2
 462 0070 1A80     		strh	r2, [r3]
 401:..\..\..\BSP/bsp.c ****     color_val = ((pwm_color << BSP_RGB_BRIGHT_SAT_SHIFT) / BSP_RGB_MAX_ALPHA_VAL);
 463              		.loc 1 401 0
 464 0072 BB1C     		adds	r3, r7, #2
 465 0074 1B88     		ldrh	r3, [r3]
 466 0076 5B00     		lsls	r3, r3, #1
 467 0078 FF21     		movs	r1, #255
 468 007a 1800     		movs	r0, r3
 469 007c FFF7FEFF 		bl	__aeabi_uidiv
 470 0080 0300     		movs	r3, r0
 471 0082 1A00     		movs	r2, r3
 472 0084 7B1C     		adds	r3, r7, #1
 473 0086 1A70     		strb	r2, [r3]
 402:..\..\..\BSP/bsp.c ****     
 403:..\..\..\BSP/bsp.c ****     color    |= (color_val << BSP_RGB_BLUE_POS_SHIFT);          /* Set the BLUE Converted value to 
 474              		.loc 1 403 0
 475 0088 7B1C     		adds	r3, r7, #1
 476 008a 1B78     		ldrb	r3, [r3]
 477 008c 7A68     		ldr	r2, [r7, #4]
 478 008e 1343     		orrs	r3, r2
 479 0090 7B60     		str	r3, [r7, #4]
 404:..\..\..\BSP/bsp.c ****     
 405:..\..\..\BSP/bsp.c ****     return (color);
 480              		.loc 1 405 0
 481 0092 7B68     		ldr	r3, [r7, #4]
 406:..\..\..\BSP/bsp.c **** }
 482              		.loc 1 406 0
 483 0094 1800     		movs	r0, r3
 484 0096 BD46     		mov	sp, r7
 485 0098 02B0     		add	sp, sp, #8
 486              		@ sp needed
 487 009a 80BD     		pop	{r7, pc}
 488              		.cfi_endproc
 489              	.LFE40:
 490              		.size	BSP_RGB_ColorRead, .-BSP_RGB_ColorRead
 491              		.section	.text.BSP_PB_StatusGet,"ax",%progbits
 492              		.align	2
 493              		.global	BSP_PB_StatusGet
 494              		.code	16
 495              		.thumb_func
 496              		.type	BSP_PB_StatusGet, %function
 497              	BSP_PB_StatusGet:
 498              	.LFB41:
 407:..\..\..\BSP/bsp.c **** 
 408:..\..\..\BSP/bsp.c **** 
 409:..\..\..\BSP/bsp.c **** /*
 410:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 411:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 412:..\..\..\BSP/bsp.c **** *                                        PUSH BUTTON FUNCTIONS
 413:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 414:..\..\..\BSP/bsp.c **** ***************************************************************************************************
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 17


 415:..\..\..\BSP/bsp.c **** */
 416:..\..\..\BSP/bsp.c **** 
 417:..\..\..\BSP/bsp.c **** /*
 418:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 419:..\..\..\BSP/bsp.c **** *                                          BSP_PB_StatusGet()
 420:..\..\..\BSP/bsp.c **** *
 421:..\..\..\BSP/bsp.c **** * Description : Get the current status of the push buttons.
 422:..\..\..\BSP/bsp.c **** *
 423:..\..\..\BSP/bsp.c **** * Argument(s) : none.
 424:..\..\..\BSP/bsp.c **** *
 425:..\..\..\BSP/bsp.c **** * Return(s)   : Status of the Push Button (Active Low).
 426:..\..\..\BSP/bsp.c **** *                   - DEF_ON    If the push button is pressed.
 427:..\..\..\BSP/bsp.c **** *                   - DEF_OFF,  Otherwise.
 428:..\..\..\BSP/bsp.c **** *
 429:..\..\..\BSP/bsp.c **** * Caller(s)   : Application
 430:..\..\..\BSP/bsp.c **** *
 431:..\..\..\BSP/bsp.c **** * Note(s)     : (1) 'SW2' is the Set name of the only Push button (USER SW) found on the board. If 
 432:..\..\..\BSP/bsp.c **** *                   push button name changes, this Function call must be updated.
 433:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 434:..\..\..\BSP/bsp.c **** */
 435:..\..\..\BSP/bsp.c **** 
 436:..\..\..\BSP/bsp.c **** CPU_BOOLEAN  BSP_PB_StatusGet (void)
 437:..\..\..\BSP/bsp.c **** {
 499              		.loc 1 437 0
 500              		.cfi_startproc
 501              		@ args = 0, pretend = 0, frame = 8
 502              		@ frame_needed = 1, uses_anonymous_args = 0
 503 0000 90B5     		push	{r4, r7, lr}
 504              		.cfi_def_cfa_offset 12
 505              		.cfi_offset 4, -12
 506              		.cfi_offset 7, -8
 507              		.cfi_offset 14, -4
 508 0002 83B0     		sub	sp, sp, #12
 509              		.cfi_def_cfa_offset 24
 510 0004 00AF     		add	r7, sp, #0
 511              		.cfi_def_cfa_register 7
 438:..\..\..\BSP/bsp.c ****     CPU_BOOLEAN  pb_status;
 439:..\..\..\BSP/bsp.c ****     CPU_INT08U   sw_val;
 440:..\..\..\BSP/bsp.c **** 
 441:..\..\..\BSP/bsp.c ****     
 442:..\..\..\BSP/bsp.c ****     sw_val = SW2_Read();                                        /* Get Push Button 'SW2' Status.   
 512              		.loc 1 442 0
 513 0006 FC1D     		adds	r4, r7, #7
 514 0008 FFF7FEFF 		bl	SW2_Read
 515 000c 0300     		movs	r3, r0
 516 000e 2370     		strb	r3, [r4]
 443:..\..\..\BSP/bsp.c ****     pb_status = DEF_BIT_IS_CLR(sw_val, DEF_BIT_00);             /* Check if 'SW2' was pressed. Acti
 517              		.loc 1 443 0
 518 0010 FB1D     		adds	r3, r7, #7
 519 0012 1B78     		ldrb	r3, [r3]
 520 0014 0122     		movs	r2, #1
 521 0016 1340     		ands	r3, r2
 522 0018 01D1     		bne	.L21
 523              		.loc 1 443 0 is_stmt 0 discriminator 1
 524 001a 0122     		movs	r2, #1
 525 001c 00E0     		b	.L22
 526              	.L21:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 18


 527              		.loc 1 443 0 discriminator 2
 528 001e 0022     		movs	r2, #0
 529              	.L22:
 530              		.loc 1 443 0 discriminator 4
 531 0020 BB1D     		adds	r3, r7, #6
 532 0022 1A70     		strb	r2, [r3]
 444:..\..\..\BSP/bsp.c **** 
 445:..\..\..\BSP/bsp.c ****     return (pb_status);
 533              		.loc 1 445 0 is_stmt 1 discriminator 4
 534 0024 BB1D     		adds	r3, r7, #6
 535 0026 1B78     		ldrb	r3, [r3]
 446:..\..\..\BSP/bsp.c **** }
 536              		.loc 1 446 0 discriminator 4
 537 0028 1800     		movs	r0, r3
 538 002a BD46     		mov	sp, r7
 539 002c 03B0     		add	sp, sp, #12
 540              		@ sp needed
 541 002e 90BD     		pop	{r4, r7, pc}
 542              		.cfi_endproc
 543              	.LFE41:
 544              		.size	BSP_PB_StatusGet, .-BSP_PB_StatusGet
 545              		.section	.text.BSP_Accel_Init,"ax",%progbits
 546              		.align	2
 547              		.global	BSP_Accel_Init
 548              		.code	16
 549              		.thumb_func
 550              		.type	BSP_Accel_Init, %function
 551              	BSP_Accel_Init:
 552              	.LFB42:
 447:..\..\..\BSP/bsp.c **** 
 448:..\..\..\BSP/bsp.c **** 
 449:..\..\..\BSP/bsp.c **** /*
 450:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 451:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 452:..\..\..\BSP/bsp.c **** *                                    ACCELEROMETER (I2C) FUNCTIONS
 453:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 454:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 455:..\..\..\BSP/bsp.c **** */
 456:..\..\..\BSP/bsp.c **** 
 457:..\..\..\BSP/bsp.c **** /*
 458:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 459:..\..\..\BSP/bsp.c **** *                                           BSP_Accel_Init()
 460:..\..\..\BSP/bsp.c **** *
 461:..\..\..\BSP/bsp.c **** * Description : Initialize the Accelerometer, connected via I2C communication, for proper operation
 462:..\..\..\BSP/bsp.c **** *
 463:..\..\..\BSP/bsp.c **** * Argument(s) : none.
 464:..\..\..\BSP/bsp.c **** *
 465:..\..\..\BSP/bsp.c **** * Return(s)   : none.
 466:..\..\..\BSP/bsp.c **** *
 467:..\..\..\BSP/bsp.c **** * Caller(s)   : BSP_Init().
 468:..\..\..\BSP/bsp.c **** *
 469:..\..\..\BSP/bsp.c **** * Note(s)     : (1) The Desired Wake Up Timer Counts should be Calculated using the following equat
 470:..\..\..\BSP/bsp.c **** *                       Counts = Desired Delay Time (sec) x ODR Period (Hz) [OWUF]
 471:..\..\..\BSP/bsp.c **** *
 472:..\..\..\BSP/bsp.c **** *                   Every Count is Calculated as 1/OWUF Delay Period.
 473:..\..\..\BSP/bsp.c **** *
 474:..\..\..\BSP/bsp.c **** *               (2) The Desired Wake Up Threshold Counts should be Calculated using the following e
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 19


 475:..\..\..\BSP/bsp.c **** *                       Threshold Counts = Desired Threshold (g) x 16 (counts/g)
 476:..\..\..\BSP/bsp.c **** *
 477:..\..\..\BSP/bsp.c **** *                   The Factory Setting of the value is set to a change in Acceleration of 0.5g
 478:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 479:..\..\..\BSP/bsp.c **** */
 480:..\..\..\BSP/bsp.c **** 
 481:..\..\..\BSP/bsp.c **** void  BSP_Accel_Init (void)
 482:..\..\..\BSP/bsp.c **** {
 553              		.loc 1 482 0
 554              		.cfi_startproc
 555              		@ args = 0, pretend = 0, frame = 8
 556              		@ frame_needed = 1, uses_anonymous_args = 0
 557 0000 90B5     		push	{r4, r7, lr}
 558              		.cfi_def_cfa_offset 12
 559              		.cfi_offset 4, -12
 560              		.cfi_offset 7, -8
 561              		.cfi_offset 14, -4
 562 0002 83B0     		sub	sp, sp, #12
 563              		.cfi_def_cfa_offset 24
 564 0004 00AF     		add	r7, sp, #0
 565              		.cfi_def_cfa_register 7
 483:..\..\..\BSP/bsp.c ****     CPU_BOOLEAN  accel_status;
 484:..\..\..\BSP/bsp.c ****     CPU_INT08U   data_resp;
 485:..\..\..\BSP/bsp.c ****     
 486:..\..\..\BSP/bsp.c ****                                                                 /* ----------- INIT I2C BLOCK & ISR
 487:..\..\..\BSP/bsp.c ****     I2C_Start();                                                /* Enable and Start the I2C Block f
 566              		.loc 1 487 0
 567 0006 FFF7FEFF 		bl	I2C_Start
 488:..\..\..\BSP/bsp.c ****     Accel_ISR_StartEx(BSP_Accel_ISR_Handler);                   /* Enable, Start, and Set the ISR H
 568              		.loc 1 488 0
 569 000a 374B     		ldr	r3, .L28
 570 000c 1800     		movs	r0, r3
 571 000e FFF7FEFF 		bl	Accel_ISR_StartEx
 489:..\..\..\BSP/bsp.c ****     
 490:..\..\..\BSP/bsp.c ****     BSP_OS_TimeDlyMs(50u);                                      /* Delay for 50ms to Allow the Acce
 572              		.loc 1 490 0
 573 0012 3220     		movs	r0, #50
 574 0014 FFF7FEFF 		bl	BSP_OS_TimeDlyMs
 491:..\..\..\BSP/bsp.c ****     
 492:..\..\..\BSP/bsp.c ****     accel_status = BSP_Accel_InitSelfTst();                     /* Run the Accel Self-Test to Ensur
 575              		.loc 1 492 0
 576 0018 FC1D     		adds	r4, r7, #7
 577 001a FFF7FEFF 		bl	BSP_Accel_InitSelfTst
 578 001e 0300     		movs	r3, r0
 579 0020 2370     		strb	r3, [r4]
 493:..\..\..\BSP/bsp.c ****     if (accel_status != DEF_OK) {
 580              		.loc 1 493 0
 581 0022 FB1D     		adds	r3, r7, #7
 582 0024 1B78     		ldrb	r3, [r3]
 583 0026 012B     		cmp	r3, #1
 584 0028 59D1     		bne	.L27
 494:..\..\..\BSP/bsp.c ****         return;                                                 /* Error Checking, if Self Test Fai
 495:..\..\..\BSP/bsp.c ****     }
 496:..\..\..\BSP/bsp.c ****                                                                 /* ------------- SET CONTROL REG 1 
 497:..\..\..\BSP/bsp.c ****     data_resp = (BSP_ACC_KXTJ2_CTRL_REG1_RES      |             /* CTRL_REG1: High Current 12-Bit/1
 585              		.loc 1 497 0
 586 002a BB1D     		adds	r3, r7, #6
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 20


 587 002c 6222     		movs	r2, #98
 588 002e 1A70     		strb	r2, [r3]
 498:..\..\..\BSP/bsp.c ****                  BSP_ACC_KXTJ2_CTRL_REG1_DRDYE    |             /*          : Reflect New Accel Dat
 499:..\..\..\BSP/bsp.c ****                  BSP_ACC_KXTJ2_CTRL_REG1_GSELx_2G |             /*          : Acceleration Range of
 500:..\..\..\BSP/bsp.c ****                  BSP_ACC_KXTJ2_CTRL_REG1_WUFE     );            /*          : Wake Up on Motion Det
 501:..\..\..\BSP/bsp.c ****                                                                 /*          : Set Stand-By Mode. (B
 502:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_WRITE,                     /* Write the Control Register #1 Se
 589              		.loc 1 502 0
 590 0030 BB1D     		adds	r3, r7, #6
 591 0032 1A00     		movs	r2, r3
 592 0034 1B21     		movs	r1, #27
 593 0036 0020     		movs	r0, #0
 594 0038 FFF7FEFF 		bl	BSP_Accel_RegRdWr
 503:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_CTRL_REG1,
 504:..\..\..\BSP/bsp.c ****                       &data_resp);
 505:..\..\..\BSP/bsp.c ****                                                                 /* ------------- SET CONTROL REG 2 
 506:..\..\..\BSP/bsp.c ****     data_resp =  BSP_ACC_KXTJ2_CTRL_REG2_OWUFx_12_5Hz;          /* CTRL_REG2: Wake Up Fnct Output D
 595              		.loc 1 506 0
 596 003c BB1D     		adds	r3, r7, #6
 597 003e 0422     		movs	r2, #4
 598 0040 1A70     		strb	r2, [r3]
 507:..\..\..\BSP/bsp.c ****                                                                 /*          : DISABLE Software Rese
 508:..\..\..\BSP/bsp.c ****                                                                 /*          : Do Not Perform Self-T
 509:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_WRITE,                     /* Write the Control Register #2 Se
 599              		.loc 1 509 0
 600 0042 BB1D     		adds	r3, r7, #6
 601 0044 1A00     		movs	r2, r3
 602 0046 1D21     		movs	r1, #29
 603 0048 0020     		movs	r0, #0
 604 004a FFF7FEFF 		bl	BSP_Accel_RegRdWr
 510:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_CTRL_REG2,
 511:..\..\..\BSP/bsp.c ****                       &data_resp);
 512:..\..\..\BSP/bsp.c ****                                                                 /* ----------- SET INTERRUPT CONTRO
 513:..\..\..\BSP/bsp.c ****     data_resp = (BSP_ACC_KXTJ2_INT_CTRL_REG1_IEN |              /* INT_CTRL1: ENABLE Interrupt Pin.
 605              		.loc 1 513 0
 606 004e BB1D     		adds	r3, r7, #6
 607 0050 3022     		movs	r2, #48
 608 0052 1A70     		strb	r2, [r3]
 514:..\..\..\BSP/bsp.c ****                  BSP_ACC_KXTJ2_INT_CTRL_REG1_IEA );             /*          : Interrupt Polarity, A
 515:..\..\..\BSP/bsp.c ****                                                                 /*          : Interrupt Latches Unt
 516:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_WRITE,                     /* Write the Interrupt Control Regi
 609              		.loc 1 516 0
 610 0054 BB1D     		adds	r3, r7, #6
 611 0056 1A00     		movs	r2, r3
 612 0058 1E21     		movs	r1, #30
 613 005a 0020     		movs	r0, #0
 614 005c FFF7FEFF 		bl	BSP_Accel_RegRdWr
 517:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_INT_CTRL_REG1,
 518:..\..\..\BSP/bsp.c ****                       &data_resp);
 519:..\..\..\BSP/bsp.c ****     
 520:..\..\..\BSP/bsp.c ****     data_resp = (BSP_ACC_KXTJ2_INT_CTRL_REG2_XNWUE |            /* INT_CTRL2: Enable Interrupt Moti
 615              		.loc 1 520 0
 616 0060 BB1D     		adds	r3, r7, #6
 617 0062 3F22     		movs	r2, #63
 618 0064 1A70     		strb	r2, [r3]
 521:..\..\..\BSP/bsp.c ****                  BSP_ACC_KXTJ2_INT_CTRL_REG2_XPWUE |            /*          :                      
 522:..\..\..\BSP/bsp.c ****                  BSP_ACC_KXTJ2_INT_CTRL_REG2_YNWUE |            /*          :                      
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 21


 523:..\..\..\BSP/bsp.c ****                  BSP_ACC_KXTJ2_INT_CTRL_REG2_YPWUE |            /*          :                      
 524:..\..\..\BSP/bsp.c ****                  BSP_ACC_KXTJ2_INT_CTRL_REG2_ZNWUE |            /*          :                      
 525:..\..\..\BSP/bsp.c ****                  BSP_ACC_KXTJ2_INT_CTRL_REG2_ZPWUE );           /*          :                      
 526:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_WRITE,                     /* Write the Interrupt Control Regi
 619              		.loc 1 526 0
 620 0066 BB1D     		adds	r3, r7, #6
 621 0068 1A00     		movs	r2, r3
 622 006a 1F21     		movs	r1, #31
 623 006c 0020     		movs	r0, #0
 624 006e FFF7FEFF 		bl	BSP_Accel_RegRdWr
 527:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_INT_CTRL_REG2,
 528:..\..\..\BSP/bsp.c ****                       &data_resp);
 529:..\..\..\BSP/bsp.c ****                                                                 /* --------------- DATA CONTROL OPT
 530:..\..\..\BSP/bsp.c ****     data_resp =  BSP_ACC_KXTJ2_DATA_CTRL_OSAx_50Hz;             /* DATA_CTRL_REG: Set Accel Output 
 625              		.loc 1 530 0
 626 0072 BB1D     		adds	r3, r7, #6
 627 0074 0222     		movs	r2, #2
 628 0076 1A70     		strb	r2, [r3]
 531:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_WRITE,                     /* Write the Data Control Register 
 629              		.loc 1 531 0
 630 0078 BB1D     		adds	r3, r7, #6
 631 007a 1A00     		movs	r2, r3
 632 007c 2121     		movs	r1, #33
 633 007e 0020     		movs	r0, #0
 634 0080 FFF7FEFF 		bl	BSP_Accel_RegRdWr
 532:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_DATA_CTRL_REG,
 533:..\..\..\BSP/bsp.c ****                       &data_resp);
 534:..\..\..\BSP/bsp.c ****                                                                 /* ------------------ WAKEUP OPTION
 535:..\..\..\BSP/bsp.c ****     data_resp = BSP_ACCEL_WAKEUP_CNTS;                          /* Set the Wake Up Timer Counts. Se
 635              		.loc 1 535 0
 636 0084 BB1D     		adds	r3, r7, #6
 637 0086 3222     		movs	r2, #50
 638 0088 1A70     		strb	r2, [r3]
 536:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_WRITE,                     /* Write the Wakeup Timer Register 
 639              		.loc 1 536 0
 640 008a BB1D     		adds	r3, r7, #6
 641 008c 1A00     		movs	r2, r3
 642 008e 2921     		movs	r1, #41
 643 0090 0020     		movs	r0, #0
 644 0092 FFF7FEFF 		bl	BSP_Accel_RegRdWr
 537:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_WAKEUP_TIMER,
 538:..\..\..\BSP/bsp.c ****                       &data_resp);
 539:..\..\..\BSP/bsp.c ****     
 540:..\..\..\BSP/bsp.c ****     data_resp = BSP_ACCEL_WAKEUP_THRESH_CNTS;                   /* Set the Wake Up Threshold Counts
 645              		.loc 1 540 0
 646 0096 BB1D     		adds	r3, r7, #6
 647 0098 0822     		movs	r2, #8
 648 009a 1A70     		strb	r2, [r3]
 541:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_WRITE,                     /* Write the Wakeup Threshold Regis
 649              		.loc 1 541 0
 650 009c BB1D     		adds	r3, r7, #6
 651 009e 1A00     		movs	r2, r3
 652 00a0 6A21     		movs	r1, #106
 653 00a2 0020     		movs	r0, #0
 654 00a4 FFF7FEFF 		bl	BSP_Accel_RegRdWr
 542:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_WAKUP_THRESHOLD,
 543:..\..\..\BSP/bsp.c ****                       &data_resp);
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 22


 544:..\..\..\BSP/bsp.c ****                                                                 /* ---------------- START ACCELEROM
 545:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_READ,                      /* Get Control Register #1 Current 
 655              		.loc 1 545 0
 656 00a8 BB1D     		adds	r3, r7, #6
 657 00aa 1A00     		movs	r2, r3
 658 00ac 1B21     		movs	r1, #27
 659 00ae 0120     		movs	r0, #1
 660 00b0 FFF7FEFF 		bl	BSP_Accel_RegRdWr
 546:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_CTRL_REG1,
 547:..\..\..\BSP/bsp.c ****                       &data_resp);
 548:..\..\..\BSP/bsp.c ****     
 549:..\..\..\BSP/bsp.c ****     DEF_BIT_SET(data_resp, BSP_ACC_KXTJ2_CTRL_REG1_PC1);        /* Clear PC1 Bit to set KXTJ2 Modul
 661              		.loc 1 549 0
 662 00b4 BB1D     		adds	r3, r7, #6
 663 00b6 1B78     		ldrb	r3, [r3]
 664 00b8 8022     		movs	r2, #128
 665 00ba 5242     		rsbs	r2, r2, #0
 666 00bc 1343     		orrs	r3, r2
 667 00be DAB2     		uxtb	r2, r3
 668 00c0 BB1D     		adds	r3, r7, #6
 669 00c2 1A70     		strb	r2, [r3]
 550:..\..\..\BSP/bsp.c ****     
 551:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_WRITE,                     /* Write the Updated Control Regist
 670              		.loc 1 551 0
 671 00c4 BB1D     		adds	r3, r7, #6
 672 00c6 1A00     		movs	r2, r3
 673 00c8 1B21     		movs	r1, #27
 674 00ca 0020     		movs	r0, #0
 675 00cc FFF7FEFF 		bl	BSP_Accel_RegRdWr
 552:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_CTRL_REG1,
 553:..\..\..\BSP/bsp.c ****                       &data_resp);
 554:..\..\..\BSP/bsp.c ****                                                                 /* ----------------- CLR PENDING IN
 555:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_READ,                      /* Read INT_REL to Clear any Int Sr
 676              		.loc 1 555 0
 677 00d0 BB1D     		adds	r3, r7, #6
 678 00d2 1A00     		movs	r2, r3
 679 00d4 1A21     		movs	r1, #26
 680 00d6 0120     		movs	r0, #1
 681 00d8 FFF7FEFF 		bl	BSP_Accel_RegRdWr
 682 00dc 00E0     		b	.L24
 683              	.L27:
 494:..\..\..\BSP/bsp.c ****     }
 684              		.loc 1 494 0
 685 00de C046     		nop
 686              	.L24:
 556:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_INT_REL,
 557:..\..\..\BSP/bsp.c ****                       &data_resp);
 558:..\..\..\BSP/bsp.c **** }
 687              		.loc 1 558 0
 688 00e0 BD46     		mov	sp, r7
 689 00e2 03B0     		add	sp, sp, #12
 690              		@ sp needed
 691 00e4 90BD     		pop	{r4, r7, pc}
 692              	.L29:
 693 00e6 C046     		.align	2
 694              	.L28:
 695 00e8 00000000 		.word	BSP_Accel_ISR_Handler
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 23


 696              		.cfi_endproc
 697              	.LFE42:
 698              		.size	BSP_Accel_Init, .-BSP_Accel_Init
 699              		.section	.text.BSP_Accel_InitSelfTst,"ax",%progbits
 700              		.align	2
 701              		.code	16
 702              		.thumb_func
 703              		.type	BSP_Accel_InitSelfTst, %function
 704              	BSP_Accel_InitSelfTst:
 705              	.LFB43:
 559:..\..\..\BSP/bsp.c **** 
 560:..\..\..\BSP/bsp.c **** 
 561:..\..\..\BSP/bsp.c **** /*
 562:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 563:..\..\..\BSP/bsp.c **** *                                       BSP_Accel_InitSelfTst()
 564:..\..\..\BSP/bsp.c **** *
 565:..\..\..\BSP/bsp.c **** * Description : Runs a Test Routine to make sure the Accelerometer Communication is Functional at I
 566:..\..\..\BSP/bsp.c **** *
 567:..\..\..\BSP/bsp.c **** * Argument(s) : none.
 568:..\..\..\BSP/bsp.c **** *
 569:..\..\..\BSP/bsp.c **** * Return(s)   : I2C Communication Status
 570:..\..\..\BSP/bsp.c **** *                   - DEF_FAIL: If Error in I2C Communication Sequence.
 571:..\..\..\BSP/bsp.c **** *                   - DEF_OK  : Otherwise, Everything went OK.
 572:..\..\..\BSP/bsp.c **** *
 573:..\..\..\BSP/bsp.c **** * Caller(s)   : BSP_Accel_Init()
 574:..\..\..\BSP/bsp.c **** *
 575:..\..\..\BSP/bsp.c **** * Note(s)     : none.
 576:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 577:..\..\..\BSP/bsp.c **** */
 578:..\..\..\BSP/bsp.c **** 
 579:..\..\..\BSP/bsp.c **** CPU_BOOLEAN  BSP_Accel_InitSelfTst (void)
 580:..\..\..\BSP/bsp.c **** {
 706              		.loc 1 580 0
 707              		.cfi_startproc
 708              		@ args = 0, pretend = 0, frame = 8
 709              		@ frame_needed = 1, uses_anonymous_args = 0
 710 0000 90B5     		push	{r4, r7, lr}
 711              		.cfi_def_cfa_offset 12
 712              		.cfi_offset 4, -12
 713              		.cfi_offset 7, -8
 714              		.cfi_offset 14, -4
 715 0002 83B0     		sub	sp, sp, #12
 716              		.cfi_def_cfa_offset 24
 717 0004 00AF     		add	r7, sp, #0
 718              		.cfi_def_cfa_register 7
 581:..\..\..\BSP/bsp.c ****     CPU_BOOLEAN  test_status;
 582:..\..\..\BSP/bsp.c ****     CPU_BOOLEAN  accel_resp;
 583:..\..\..\BSP/bsp.c ****     CPU_INT08U   data_resp;
 584:..\..\..\BSP/bsp.c ****     
 585:..\..\..\BSP/bsp.c ****                                                                 /* ------------ MODULE/CIRCUIT VERI
 586:..\..\..\BSP/bsp.c ****     accel_resp = BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_READ,         /* Read DCST Reg to verify proper C
 719              		.loc 1 586 0
 720 0006 FC1D     		adds	r4, r7, #7
 721 0008 BB1D     		adds	r3, r7, #6
 722 000a 1A00     		movs	r2, r3
 723 000c 0C21     		movs	r1, #12
 724 000e 0120     		movs	r0, #1
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 24


 725 0010 FFF7FEFF 		bl	BSP_Accel_RegRdWr
 726 0014 0300     		movs	r3, r0
 727 0016 2370     		strb	r3, [r4]
 587:..\..\..\BSP/bsp.c ****                                     BSP_ACCEL_REG_DCST_RESP,
 588:..\..\..\BSP/bsp.c ****                                    &data_resp);
 589:..\..\..\BSP/bsp.c ****     if ((accel_resp != DEF_OK) ||
 728              		.loc 1 589 0
 729 0018 FB1D     		adds	r3, r7, #7
 730 001a 1B78     		ldrb	r3, [r3]
 731 001c 012B     		cmp	r3, #1
 732 001e 03D1     		bne	.L31
 590:..\..\..\BSP/bsp.c ****         (data_resp  != BSP_ACC_KXTJ2_DCST_RESP_1)) {            /* If Communication was OK & Data R
 733              		.loc 1 590 0 discriminator 1
 734 0020 BB1D     		adds	r3, r7, #6
 735 0022 1B78     		ldrb	r3, [r3]
 589:..\..\..\BSP/bsp.c ****         (data_resp  != BSP_ACC_KXTJ2_DCST_RESP_1)) {            /* If Communication was OK & Data R
 736              		.loc 1 589 0 discriminator 1
 737 0024 552B     		cmp	r3, #85
 738 0026 01D0     		beq	.L32
 739              	.L31:
 591:..\..\..\BSP/bsp.c ****         return (DEF_FAIL);                                      /* ... Key #1, then Continue with S
 740              		.loc 1 591 0
 741 0028 0023     		movs	r3, #0
 742 002a 4CE0     		b	.L38
 743              	.L32:
 592:..\..\..\BSP/bsp.c ****     }
 593:..\..\..\BSP/bsp.c ****                                                                 /* ---------------- SET OPERATING M
 594:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_READ,                      /* Get current Control Register #1 
 744              		.loc 1 594 0
 745 002c BB1D     		adds	r3, r7, #6
 746 002e 1A00     		movs	r2, r3
 747 0030 1B21     		movs	r1, #27
 748 0032 0120     		movs	r0, #1
 749 0034 FFF7FEFF 		bl	BSP_Accel_RegRdWr
 595:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_CTRL_REG1,
 596:..\..\..\BSP/bsp.c ****                       &data_resp);
 597:..\..\..\BSP/bsp.c ****     
 598:..\..\..\BSP/bsp.c ****     DEF_BIT_CLR(data_resp, BSP_ACC_KXTJ2_CTRL_REG1_PC1);        /* Clear PC1 Bit to set KXTJ2 Modul
 750              		.loc 1 598 0
 751 0038 BB1D     		adds	r3, r7, #6
 752 003a 1B78     		ldrb	r3, [r3]
 753 003c 7F22     		movs	r2, #127
 754 003e 1340     		ands	r3, r2
 755 0040 DAB2     		uxtb	r2, r3
 756 0042 BB1D     		adds	r3, r7, #6
 757 0044 1A70     		strb	r2, [r3]
 599:..\..\..\BSP/bsp.c ****     
 600:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_WRITE,                     /* Write the Updated Control Regist
 758              		.loc 1 600 0
 759 0046 BB1D     		adds	r3, r7, #6
 760 0048 1A00     		movs	r2, r3
 761 004a 1B21     		movs	r1, #27
 762 004c 0020     		movs	r0, #0
 763 004e FFF7FEFF 		bl	BSP_Accel_RegRdWr
 601:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_CTRL_REG1,
 602:..\..\..\BSP/bsp.c ****                       &data_resp);
 603:..\..\..\BSP/bsp.c ****                                                                 /* ----------------- PERFORM SELF-T
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 25


 604:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_READ,                      /* Get current Control Register #2 
 764              		.loc 1 604 0
 765 0052 BB1D     		adds	r3, r7, #6
 766 0054 1A00     		movs	r2, r3
 767 0056 1D21     		movs	r1, #29
 768 0058 0120     		movs	r0, #1
 769 005a FFF7FEFF 		bl	BSP_Accel_RegRdWr
 605:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_CTRL_REG2,
 606:..\..\..\BSP/bsp.c ****                       &data_resp);
 607:..\..\..\BSP/bsp.c ****     
 608:..\..\..\BSP/bsp.c ****     DEF_BIT_SET(data_resp, BSP_ACC_KXTJ2_CTRL_REG2_DCST);       /* Set the DCST Bit to Perform the 
 770              		.loc 1 608 0
 771 005e BB1D     		adds	r3, r7, #6
 772 0060 1B78     		ldrb	r3, [r3]
 773 0062 1022     		movs	r2, #16
 774 0064 1343     		orrs	r3, r2
 775 0066 DAB2     		uxtb	r2, r3
 776 0068 BB1D     		adds	r3, r7, #6
 777 006a 1A70     		strb	r2, [r3]
 609:..\..\..\BSP/bsp.c ****     
 610:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_WRITE,                     /* Write the Updated Control Regist
 778              		.loc 1 610 0
 779 006c BB1D     		adds	r3, r7, #6
 780 006e 1A00     		movs	r2, r3
 781 0070 1D21     		movs	r1, #29
 782 0072 0020     		movs	r0, #0
 783 0074 FFF7FEFF 		bl	BSP_Accel_RegRdWr
 611:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_CTRL_REG2,
 612:..\..\..\BSP/bsp.c ****                       &data_resp);
 613:..\..\..\BSP/bsp.c ****                                                                 /* ------------------- STATUS CHECK
 614:..\..\..\BSP/bsp.c ****     accel_resp = BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_READ,         /* Read DCST Reg to Confirm Self-Te
 784              		.loc 1 614 0
 785 0078 FC1D     		adds	r4, r7, #7
 786 007a BB1D     		adds	r3, r7, #6
 787 007c 1A00     		movs	r2, r3
 788 007e 0C21     		movs	r1, #12
 789 0080 0120     		movs	r0, #1
 790 0082 FFF7FEFF 		bl	BSP_Accel_RegRdWr
 791 0086 0300     		movs	r3, r0
 792 0088 2370     		strb	r3, [r4]
 615:..\..\..\BSP/bsp.c ****                                     BSP_ACCEL_REG_DCST_RESP,
 616:..\..\..\BSP/bsp.c ****                                    &data_resp);
 617:..\..\..\BSP/bsp.c ****     if ((accel_resp != DEF_OK) ||
 793              		.loc 1 617 0
 794 008a FB1D     		adds	r3, r7, #7
 795 008c 1B78     		ldrb	r3, [r3]
 796 008e 012B     		cmp	r3, #1
 797 0090 03D1     		bne	.L34
 618:..\..\..\BSP/bsp.c ****         (data_resp  != BSP_ACC_KXTJ2_DCST_RESP_2)) {            /* If Communication was OK & Data R
 798              		.loc 1 618 0 discriminator 1
 799 0092 BB1D     		adds	r3, r7, #6
 800 0094 1B78     		ldrb	r3, [r3]
 617:..\..\..\BSP/bsp.c ****         (data_resp  != BSP_ACC_KXTJ2_DCST_RESP_2)) {            /* If Communication was OK & Data R
 801              		.loc 1 617 0 discriminator 1
 802 0096 AA2B     		cmp	r3, #170
 803 0098 01D0     		beq	.L35
 804              	.L34:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 26


 619:..\..\..\BSP/bsp.c ****         return (DEF_FAIL);                                      /* ... Key #2, then Continue with S
 805              		.loc 1 619 0
 806 009a 0023     		movs	r3, #0
 807 009c 13E0     		b	.L38
 808              	.L35:
 620:..\..\..\BSP/bsp.c ****     }
 621:..\..\..\BSP/bsp.c ****     
 622:..\..\..\BSP/bsp.c ****     accel_resp = BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_READ,         /* Read DCST Reg Once More, Value M
 809              		.loc 1 622 0
 810 009e FC1D     		adds	r4, r7, #7
 811 00a0 BB1D     		adds	r3, r7, #6
 812 00a2 1A00     		movs	r2, r3
 813 00a4 0C21     		movs	r1, #12
 814 00a6 0120     		movs	r0, #1
 815 00a8 FFF7FEFF 		bl	BSP_Accel_RegRdWr
 816 00ac 0300     		movs	r3, r0
 817 00ae 2370     		strb	r3, [r4]
 623:..\..\..\BSP/bsp.c ****                                     BSP_ACCEL_REG_DCST_RESP,
 624:..\..\..\BSP/bsp.c ****                                    &data_resp);
 625:..\..\..\BSP/bsp.c ****     if ((accel_resp != DEF_OK) ||
 818              		.loc 1 625 0
 819 00b0 FB1D     		adds	r3, r7, #7
 820 00b2 1B78     		ldrb	r3, [r3]
 821 00b4 012B     		cmp	r3, #1
 822 00b6 03D1     		bne	.L36
 626:..\..\..\BSP/bsp.c ****         (data_resp  != BSP_ACC_KXTJ2_DCST_RESP_1)) {            /* If Communication was OK & Data R
 823              		.loc 1 626 0 discriminator 1
 824 00b8 BB1D     		adds	r3, r7, #6
 825 00ba 1B78     		ldrb	r3, [r3]
 625:..\..\..\BSP/bsp.c ****         (data_resp  != BSP_ACC_KXTJ2_DCST_RESP_1)) {            /* If Communication was OK & Data R
 826              		.loc 1 625 0 discriminator 1
 827 00bc 552B     		cmp	r3, #85
 828 00be 01D0     		beq	.L37
 829              	.L36:
 627:..\..\..\BSP/bsp.c ****         return (DEF_FAIL);                                      /* ... Key #1, then end the Init Se
 830              		.loc 1 627 0
 831 00c0 0023     		movs	r3, #0
 832 00c2 00E0     		b	.L38
 833              	.L37:
 628:..\..\..\BSP/bsp.c ****     }
 629:..\..\..\BSP/bsp.c ****     
 630:..\..\..\BSP/bsp.c ****     return (DEF_OK);
 834              		.loc 1 630 0
 835 00c4 0123     		movs	r3, #1
 836              	.L38:
 631:..\..\..\BSP/bsp.c **** }
 837              		.loc 1 631 0 discriminator 1
 838 00c6 1800     		movs	r0, r3
 839 00c8 BD46     		mov	sp, r7
 840 00ca 03B0     		add	sp, sp, #12
 841              		@ sp needed
 842 00cc 90BD     		pop	{r4, r7, pc}
 843              		.cfi_endproc
 844              	.LFE43:
 845              		.size	BSP_Accel_InitSelfTst, .-BSP_Accel_InitSelfTst
 846 00ce C046     		.section	.text.BSP_Accel_RegRdWr,"ax",%progbits
 847              		.align	2
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 27


 848              		.code	16
 849              		.thumb_func
 850              		.type	BSP_Accel_RegRdWr, %function
 851              	BSP_Accel_RegRdWr:
 852              	.LFB44:
 632:..\..\..\BSP/bsp.c **** 
 633:..\..\..\BSP/bsp.c **** 
 634:..\..\..\BSP/bsp.c **** /*
 635:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 636:..\..\..\BSP/bsp.c **** *                                         BSP_Accel_RegRdWr()
 637:..\..\..\BSP/bsp.c **** *
 638:..\..\..\BSP/bsp.c **** * Description : Read or Write a Byte from a specific Register location via I2C Communication.
 639:..\..\..\BSP/bsp.c **** *
 640:..\..\..\BSP/bsp.c **** * Argument(s) : rd_wr       Direction Status Flag:
 641:..\..\..\BSP/bsp.c **** *                               - BSP_KXTJ2_DIR_WRITE: Write a Data Byte
 642:..\..\..\BSP/bsp.c **** *                               - BSP_KXTJ2_DIR_READ : Read  a Data Byte
 643:..\..\..\BSP/bsp.c **** *
 644:..\..\..\BSP/bsp.c **** *               reg         Address of Desired Register to either Read or Write from.
 645:..\..\..\BSP/bsp.c **** *
 646:..\..\..\BSP/bsp.c **** *               value       When Writing: The Value Desired Byte to Write.
 647:..\..\..\BSP/bsp.c **** *                           When Reading: The Location to Store the Read Byte.
 648:..\..\..\BSP/bsp.c **** *
 649:..\..\..\BSP/bsp.c **** * Return(s)   : I2C Communication Status
 650:..\..\..\BSP/bsp.c **** *                   - DEF_FAIL: If Error in I2C Communication Sequence.
 651:..\..\..\BSP/bsp.c **** *                   - DEF_OK  : Otherwise, Everything went OK.
 652:..\..\..\BSP/bsp.c **** *
 653:..\..\..\BSP/bsp.c **** * Caller(s)   : BSP_Accel_Init().
 654:..\..\..\BSP/bsp.c **** *               BSP_Accel_InitSelfTst().
 655:..\..\..\BSP/bsp.c **** *               BSP_Accel_Rd().
 656:..\..\..\BSP/bsp.c **** *
 657:..\..\..\BSP/bsp.c **** * Note(s)     : none.
 658:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 659:..\..\..\BSP/bsp.c **** */
 660:..\..\..\BSP/bsp.c **** 
 661:..\..\..\BSP/bsp.c **** CPU_BOOLEAN  BSP_Accel_RegRdWr (BSP_KXTJ2_DATA_DIR   rd_wr,
 662:..\..\..\BSP/bsp.c ****                                 CPU_INT08U           reg,
 663:..\..\..\BSP/bsp.c ****                                 CPU_INT08U          *value)
 664:..\..\..\BSP/bsp.c **** {
 853              		.loc 1 664 0
 854              		.cfi_startproc
 855              		@ args = 0, pretend = 0, frame = 16
 856              		@ frame_needed = 1, uses_anonymous_args = 0
 857 0000 80B5     		push	{r7, lr}
 858              		.cfi_def_cfa_offset 8
 859              		.cfi_offset 7, -8
 860              		.cfi_offset 14, -4
 861 0002 84B0     		sub	sp, sp, #16
 862              		.cfi_def_cfa_offset 24
 863 0004 00AF     		add	r7, sp, #0
 864              		.cfi_def_cfa_register 7
 865 0006 3A60     		str	r2, [r7]
 866 0008 FB1D     		adds	r3, r7, #7
 867 000a 021C     		adds	r2, r0, #0
 868 000c 1A70     		strb	r2, [r3]
 869 000e BB1D     		adds	r3, r7, #6
 870 0010 0A1C     		adds	r2, r1, #0
 871 0012 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 28


 665:..\..\..\BSP/bsp.c ****     CPU_INT08U   i2c_status;
 666:..\..\..\BSP/bsp.c ****     CPU_BOOLEAN  accel_status;
 667:..\..\..\BSP/bsp.c ****     
 668:..\..\..\BSP/bsp.c ****                                                                 /* ------------- START SEQUENCE CON
 669:..\..\..\BSP/bsp.c ****     i2c_status = I2C_I2CMasterSendStart(BSP_I2C_KXTJ2_ACC_SLV_ADDR, BSP_KXTJ2_DIR_WRITE);
 872              		.loc 1 669 0
 873 0014 0021     		movs	r1, #0
 874 0016 0F20     		movs	r0, #15
 875 0018 FFF7FEFF 		bl	I2C_I2CMasterSendStart
 876 001c 0200     		movs	r2, r0
 877 001e 0E23     		movs	r3, #14
 878 0020 FB18     		adds	r3, r7, r3
 879 0022 1A70     		strb	r2, [r3]
 670:..\..\..\BSP/bsp.c ****     if (i2c_status == I2C_I2C_MSTR_NO_ERROR) {                  /* Sequence Start Successful, Perfo
 880              		.loc 1 670 0
 881 0024 0E23     		movs	r3, #14
 882 0026 FB18     		adds	r3, r7, r3
 883 0028 1B78     		ldrb	r3, [r3]
 884 002a 002B     		cmp	r3, #0
 885 002c 37D1     		bne	.L40
 671:..\..\..\BSP/bsp.c ****         i2c_status = I2C_I2CMasterWriteByte(reg);               /* Select Register Address to Read/
 886              		.loc 1 671 0
 887 002e BB1D     		adds	r3, r7, #6
 888 0030 1B78     		ldrb	r3, [r3]
 889 0032 1800     		movs	r0, r3
 890 0034 FFF7FEFF 		bl	I2C_I2CMasterWriteByte
 891 0038 0200     		movs	r2, r0
 892 003a 0E23     		movs	r3, #14
 893 003c FB18     		adds	r3, r7, r3
 894 003e 1A70     		strb	r2, [r3]
 672:..\..\..\BSP/bsp.c ****         
 673:..\..\..\BSP/bsp.c ****         if (rd_wr == BSP_KXTJ2_DIR_WRITE) {                     /* -------------------- WRITE DATA 
 895              		.loc 1 673 0
 896 0040 FB1D     		adds	r3, r7, #7
 897 0042 1B78     		ldrb	r3, [r3]
 898 0044 002B     		cmp	r3, #0
 899 0046 0DD1     		bne	.L41
 674:..\..\..\BSP/bsp.c ****             i2c_status   = I2C_I2CMasterWriteByte(*value);      /* Write Data Byte to the Desired R
 900              		.loc 1 674 0
 901 0048 3B68     		ldr	r3, [r7]
 902 004a 1B78     		ldrb	r3, [r3]
 903 004c 1800     		movs	r0, r3
 904 004e FFF7FEFF 		bl	I2C_I2CMasterWriteByte
 905 0052 0200     		movs	r2, r0
 906 0054 0E23     		movs	r3, #14
 907 0056 FB18     		adds	r3, r7, r3
 908 0058 1A70     		strb	r2, [r3]
 675:..\..\..\BSP/bsp.c ****             accel_status = DEF_OK;
 909              		.loc 1 675 0
 910 005a 0F23     		movs	r3, #15
 911 005c FB18     		adds	r3, r7, r3
 912 005e 0122     		movs	r2, #1
 913 0060 1A70     		strb	r2, [r3]
 914 0062 20E0     		b	.L44
 915              	.L41:
 676:..\..\..\BSP/bsp.c ****             
 677:..\..\..\BSP/bsp.c ****         } else if (rd_wr == BSP_KXTJ2_DIR_READ) {               /* --------------------- READ DATA 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 29


 916              		.loc 1 677 0
 917 0064 FB1D     		adds	r3, r7, #7
 918 0066 1B78     		ldrb	r3, [r3]
 919 0068 012B     		cmp	r3, #1
 920 006a 13D1     		bne	.L43
 678:..\..\..\BSP/bsp.c ****                                                                 /* Restart Start Condition to Read 
 679:..\..\..\BSP/bsp.c ****             i2c_status   = I2C_I2CMasterSendRestart(BSP_I2C_KXTJ2_ACC_SLV_ADDR,
 921              		.loc 1 679 0
 922 006c 0121     		movs	r1, #1
 923 006e 0F20     		movs	r0, #15
 924 0070 FFF7FEFF 		bl	I2C_I2CMasterSendRestart
 925 0074 0200     		movs	r2, r0
 926 0076 0E23     		movs	r3, #14
 927 0078 FB18     		adds	r3, r7, r3
 928 007a 1A70     		strb	r2, [r3]
 680:..\..\..\BSP/bsp.c ****                                                     BSP_KXTJ2_DIR_READ);
 681:..\..\..\BSP/bsp.c ****                                                                 /* Read Data Byte from Register, Re
 682:..\..\..\BSP/bsp.c ****            *value        = I2C_I2CMasterReadByte(I2C_I2C_NAK_DATA);
 929              		.loc 1 682 0
 930 007c 0120     		movs	r0, #1
 931 007e FFF7FEFF 		bl	I2C_I2CMasterReadByte
 932 0082 0300     		movs	r3, r0
 933 0084 DAB2     		uxtb	r2, r3
 934 0086 3B68     		ldr	r3, [r7]
 935 0088 1A70     		strb	r2, [r3]
 683:..\..\..\BSP/bsp.c ****             accel_status = DEF_OK;
 936              		.loc 1 683 0
 937 008a 0F23     		movs	r3, #15
 938 008c FB18     		adds	r3, r7, r3
 939 008e 0122     		movs	r2, #1
 940 0090 1A70     		strb	r2, [r3]
 941 0092 08E0     		b	.L44
 942              	.L43:
 684:..\..\..\BSP/bsp.c ****             
 685:..\..\..\BSP/bsp.c ****         } else {
 686:..\..\..\BSP/bsp.c ****             accel_status = DEF_FAIL;                            /* Wrong Direction, Either Read or 
 943              		.loc 1 686 0
 944 0094 0F23     		movs	r3, #15
 945 0096 FB18     		adds	r3, r7, r3
 946 0098 0022     		movs	r2, #0
 947 009a 1A70     		strb	r2, [r3]
 948 009c 03E0     		b	.L44
 949              	.L40:
 687:..\..\..\BSP/bsp.c ****         }
 688:..\..\..\BSP/bsp.c ****     } else {                                                    /* Sequence Start Failed, Return wi
 689:..\..\..\BSP/bsp.c ****         accel_status = DEF_FAIL;
 950              		.loc 1 689 0
 951 009e 0F23     		movs	r3, #15
 952 00a0 FB18     		adds	r3, r7, r3
 953 00a2 0022     		movs	r2, #0
 954 00a4 1A70     		strb	r2, [r3]
 955              	.L44:
 690:..\..\..\BSP/bsp.c ****     }
 691:..\..\..\BSP/bsp.c ****                                                                 /* -------------- STOP SEQUENCE CON
 692:..\..\..\BSP/bsp.c ****     i2c_status = I2C_I2CMasterSendStop();                       /* Send the Stop Condition to Stop 
 956              		.loc 1 692 0
 957 00a6 FFF7FEFF 		bl	I2C_I2CMasterSendStop
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 30


 958 00aa 0200     		movs	r2, r0
 959 00ac 0E23     		movs	r3, #14
 960 00ae FB18     		adds	r3, r7, r3
 961 00b0 1A70     		strb	r2, [r3]
 693:..\..\..\BSP/bsp.c ****     if (i2c_status != I2C_I2C_MSTR_NO_ERROR) {                  /* Sequence Failed to Stopped, Retu
 962              		.loc 1 693 0
 963 00b2 0E23     		movs	r3, #14
 964 00b4 FB18     		adds	r3, r7, r3
 965 00b6 1B78     		ldrb	r3, [r3]
 966 00b8 002B     		cmp	r3, #0
 967 00ba 03D0     		beq	.L45
 694:..\..\..\BSP/bsp.c ****         accel_status = DEF_FAIL;
 968              		.loc 1 694 0
 969 00bc 0F23     		movs	r3, #15
 970 00be FB18     		adds	r3, r7, r3
 971 00c0 0022     		movs	r2, #0
 972 00c2 1A70     		strb	r2, [r3]
 973              	.L45:
 695:..\..\..\BSP/bsp.c ****     }
 696:..\..\..\BSP/bsp.c ****     
 697:..\..\..\BSP/bsp.c ****     return (accel_status);
 974              		.loc 1 697 0
 975 00c4 0F23     		movs	r3, #15
 976 00c6 FB18     		adds	r3, r7, r3
 977 00c8 1B78     		ldrb	r3, [r3]
 698:..\..\..\BSP/bsp.c **** }
 978              		.loc 1 698 0
 979 00ca 1800     		movs	r0, r3
 980 00cc BD46     		mov	sp, r7
 981 00ce 04B0     		add	sp, sp, #16
 982              		@ sp needed
 983 00d0 80BD     		pop	{r7, pc}
 984              		.cfi_endproc
 985              	.LFE44:
 986              		.size	BSP_Accel_RegRdWr, .-BSP_Accel_RegRdWr
 987 00d2 C046     		.section	.text.BSP_Accel_Rd,"ax",%progbits
 988              		.align	2
 989              		.global	BSP_Accel_Rd
 990              		.code	16
 991              		.thumb_func
 992              		.type	BSP_Accel_Rd, %function
 993              	BSP_Accel_Rd:
 994              	.LFB45:
 699:..\..\..\BSP/bsp.c **** 
 700:..\..\..\BSP/bsp.c **** 
 701:..\..\..\BSP/bsp.c **** /*
 702:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 703:..\..\..\BSP/bsp.c **** *                                            BSP_Accel_Rd()
 704:..\..\..\BSP/bsp.c **** *
 705:..\..\..\BSP/bsp.c **** * Description : Reads the Accelerometer's Acceleration Values in the X, Y, and Z Directions.
 706:..\..\..\BSP/bsp.c **** *
 707:..\..\..\BSP/bsp.c **** * Argument(s) : x_axis      Variable in where the X-Direction's Acceleration Data will be Stored.
 708:..\..\..\BSP/bsp.c **** *
 709:..\..\..\BSP/bsp.c **** *               y_axis      Variable in where the Y-Direction's Acceleration Data will be Stored.
 710:..\..\..\BSP/bsp.c **** *
 711:..\..\..\BSP/bsp.c **** *               z_axis      Variable in where the Z-Direction's Acceleration Data will be Stored.
 712:..\..\..\BSP/bsp.c **** *
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 31


 713:..\..\..\BSP/bsp.c **** * Return(s)   : none.
 714:..\..\..\BSP/bsp.c **** *
 715:..\..\..\BSP/bsp.c **** * Caller(s)   : Application
 716:..\..\..\BSP/bsp.c **** *
 717:..\..\..\BSP/bsp.c **** * Note(s)     : none.
 718:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 719:..\..\..\BSP/bsp.c **** */
 720:..\..\..\BSP/bsp.c **** 
 721:..\..\..\BSP/bsp.c **** void  BSP_Accel_Rd (CPU_INT16S  *x_axis,
 722:..\..\..\BSP/bsp.c ****                     CPU_INT16S  *y_axis,
 723:..\..\..\BSP/bsp.c ****                     CPU_INT16S  *z_axis)
 724:..\..\..\BSP/bsp.c **** {
 995              		.loc 1 724 0
 996              		.cfi_startproc
 997              		@ args = 0, pretend = 0, frame = 24
 998              		@ frame_needed = 1, uses_anonymous_args = 0
 999 0000 80B5     		push	{r7, lr}
 1000              		.cfi_def_cfa_offset 8
 1001              		.cfi_offset 7, -8
 1002              		.cfi_offset 14, -4
 1003 0002 86B0     		sub	sp, sp, #24
 1004              		.cfi_def_cfa_offset 32
 1005 0004 00AF     		add	r7, sp, #0
 1006              		.cfi_def_cfa_register 7
 1007 0006 F860     		str	r0, [r7, #12]
 1008 0008 B960     		str	r1, [r7, #8]
 1009 000a 7A60     		str	r2, [r7, #4]
 725:..\..\..\BSP/bsp.c ****     CPU_INT16S  axis_val;
 726:..\..\..\BSP/bsp.c ****     CPU_INT08U  data_resp;
 727:..\..\..\BSP/bsp.c ****     
 728:..\..\..\BSP/bsp.c ****                                                                 /* ----------------- READ X-AXIS DA
 729:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_READ,                      /* Read the X-Axis HIGH Register fo
 1010              		.loc 1 729 0
 1011 000c 1523     		movs	r3, #21
 1012 000e FB18     		adds	r3, r7, r3
 1013 0010 1A00     		movs	r2, r3
 1014 0012 0721     		movs	r1, #7
 1015 0014 0120     		movs	r0, #1
 1016 0016 FFF7FEFF 		bl	BSP_Accel_RegRdWr
 730:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_XOUT_H,
 731:..\..\..\BSP/bsp.c ****                       &data_resp);
 732:..\..\..\BSP/bsp.c ****     
 733:..\..\..\BSP/bsp.c ****     axis_val  = (data_resp << DEF_OCTET_NBR_BITS);              /* Place X-Axis TOP Half Value onto
 1017              		.loc 1 733 0
 1018 001a 1523     		movs	r3, #21
 1019 001c FB18     		adds	r3, r7, r3
 1020 001e 1B78     		ldrb	r3, [r3]
 1021 0020 1A02     		lsls	r2, r3, #8
 1022 0022 1623     		movs	r3, #22
 1023 0024 FB18     		adds	r3, r7, r3
 1024 0026 1A80     		strh	r2, [r3]
 734:..\..\..\BSP/bsp.c **** 
 735:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_READ,                      /* Read the X-Axis LOW  Register fo
 1025              		.loc 1 735 0
 1026 0028 1523     		movs	r3, #21
 1027 002a FB18     		adds	r3, r7, r3
 1028 002c 1A00     		movs	r2, r3
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 32


 1029 002e 0621     		movs	r1, #6
 1030 0030 0120     		movs	r0, #1
 1031 0032 FFF7FEFF 		bl	BSP_Accel_RegRdWr
 736:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_XOUT_L,
 737:..\..\..\BSP/bsp.c ****                       &data_resp);
 738:..\..\..\BSP/bsp.c ****     
 739:..\..\..\BSP/bsp.c ****     axis_val |=  data_resp;                                     /* Add the X-Axis BOTTOM Half Value
 1032              		.loc 1 739 0
 1033 0036 1523     		movs	r3, #21
 1034 0038 FB18     		adds	r3, r7, r3
 1035 003a 1B78     		ldrb	r3, [r3]
 1036 003c 19B2     		sxth	r1, r3
 1037 003e 1623     		movs	r3, #22
 1038 0040 FB18     		adds	r3, r7, r3
 1039 0042 1622     		movs	r2, #22
 1040 0044 BA18     		adds	r2, r7, r2
 1041 0046 1288     		ldrh	r2, [r2]
 1042 0048 0A43     		orrs	r2, r1
 1043 004a 1A80     		strh	r2, [r3]
 740:..\..\..\BSP/bsp.c ****     
 741:..\..\..\BSP/bsp.c ****     if (DEF_BIT_IS_SET(axis_val, DEF_BIT_15) == DEF_YES) {      /* Adjust X-Axis Value if Over Limi
 1044              		.loc 1 741 0
 1045 004c 1623     		movs	r3, #22
 1046 004e FB18     		adds	r3, r7, r3
 1047 0050 0022     		movs	r2, #0
 1048 0052 9B5E     		ldrsh	r3, [r3, r2]
 1049 0054 002B     		cmp	r3, #0
 1050 0056 11DA     		bge	.L48
 742:..\..\..\BSP/bsp.c ****         axis_val >>= DEF_NIBBLE_NBR_BITS;                       /* Shift Back a Nibble, Since Accel
 1051              		.loc 1 742 0
 1052 0058 1623     		movs	r3, #22
 1053 005a FB18     		adds	r3, r7, r3
 1054 005c 1622     		movs	r2, #22
 1055 005e BA18     		adds	r2, r7, r2
 1056 0060 0021     		movs	r1, #0
 1057 0062 525E     		ldrsh	r2, [r2, r1]
 1058 0064 1211     		asrs	r2, r2, #4
 1059 0066 1A80     		strh	r2, [r3]
 743:..\..\..\BSP/bsp.c ****         axis_val  |= BSP_ACCEL_INVALID_MSK;                     /* Invalidate Upper Nibble on X-Axi
 1060              		.loc 1 743 0
 1061 0068 1623     		movs	r3, #22
 1062 006a FB18     		adds	r3, r7, r3
 1063 006c 1B88     		ldrh	r3, [r3]
 1064 006e 514A     		ldr	r2, .L54
 1065 0070 1343     		orrs	r3, r2
 1066 0072 9AB2     		uxth	r2, r3
 1067 0074 1623     		movs	r3, #22
 1068 0076 FB18     		adds	r3, r7, r3
 1069 0078 1A80     		strh	r2, [r3]
 1070 007a 07E0     		b	.L49
 1071              	.L48:
 744:..\..\..\BSP/bsp.c ****     } else {
 745:..\..\..\BSP/bsp.c ****         axis_val >>= DEF_NIBBLE_NBR_BITS;                       /* Do Not Invalidate, just Shift Si
 1072              		.loc 1 745 0
 1073 007c 1623     		movs	r3, #22
 1074 007e FB18     		adds	r3, r7, r3
 1075 0080 1622     		movs	r2, #22
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 33


 1076 0082 BA18     		adds	r2, r7, r2
 1077 0084 0021     		movs	r1, #0
 1078 0086 525E     		ldrsh	r2, [r2, r1]
 1079 0088 1211     		asrs	r2, r2, #4
 1080 008a 1A80     		strh	r2, [r3]
 1081              	.L49:
 746:..\..\..\BSP/bsp.c ****     }
 747:..\..\..\BSP/bsp.c ****     
 748:..\..\..\BSP/bsp.c ****    *x_axis = axis_val;                                          /* Assign X-Axis Value to Return.  
 1082              		.loc 1 748 0
 1083 008c FB68     		ldr	r3, [r7, #12]
 1084 008e 1622     		movs	r2, #22
 1085 0090 BA18     		adds	r2, r7, r2
 1086 0092 1288     		ldrh	r2, [r2]
 1087 0094 1A80     		strh	r2, [r3]
 749:..\..\..\BSP/bsp.c **** 
 750:..\..\..\BSP/bsp.c ****                                                                 /* ----------------- READ Y-AXIS DA
 751:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_READ,                      /* Read the Y-Axis HIGH Register fo
 1088              		.loc 1 751 0
 1089 0096 1523     		movs	r3, #21
 1090 0098 FB18     		adds	r3, r7, r3
 1091 009a 1A00     		movs	r2, r3
 1092 009c 0921     		movs	r1, #9
 1093 009e 0120     		movs	r0, #1
 1094 00a0 FFF7FEFF 		bl	BSP_Accel_RegRdWr
 752:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_YOUT_H,
 753:..\..\..\BSP/bsp.c ****                       &data_resp);
 754:..\..\..\BSP/bsp.c ****     
 755:..\..\..\BSP/bsp.c ****     axis_val  = (data_resp << DEF_OCTET_NBR_BITS);              /* Place Y-Axis TOP Half Value onto
 1095              		.loc 1 755 0
 1096 00a4 1523     		movs	r3, #21
 1097 00a6 FB18     		adds	r3, r7, r3
 1098 00a8 1B78     		ldrb	r3, [r3]
 1099 00aa 1A02     		lsls	r2, r3, #8
 1100 00ac 1623     		movs	r3, #22
 1101 00ae FB18     		adds	r3, r7, r3
 1102 00b0 1A80     		strh	r2, [r3]
 756:..\..\..\BSP/bsp.c **** 
 757:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_READ,                      /* Read the Y-Axis LOW  Register fo
 1103              		.loc 1 757 0
 1104 00b2 1523     		movs	r3, #21
 1105 00b4 FB18     		adds	r3, r7, r3
 1106 00b6 1A00     		movs	r2, r3
 1107 00b8 0821     		movs	r1, #8
 1108 00ba 0120     		movs	r0, #1
 1109 00bc FFF7FEFF 		bl	BSP_Accel_RegRdWr
 758:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_YOUT_L,
 759:..\..\..\BSP/bsp.c ****                       &data_resp);
 760:..\..\..\BSP/bsp.c ****     
 761:..\..\..\BSP/bsp.c ****     axis_val |=  data_resp;                                     /* Add the Y-Axis BOTTOM Half Value
 1110              		.loc 1 761 0
 1111 00c0 1523     		movs	r3, #21
 1112 00c2 FB18     		adds	r3, r7, r3
 1113 00c4 1B78     		ldrb	r3, [r3]
 1114 00c6 19B2     		sxth	r1, r3
 1115 00c8 1623     		movs	r3, #22
 1116 00ca FB18     		adds	r3, r7, r3
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 34


 1117 00cc 1622     		movs	r2, #22
 1118 00ce BA18     		adds	r2, r7, r2
 1119 00d0 1288     		ldrh	r2, [r2]
 1120 00d2 0A43     		orrs	r2, r1
 1121 00d4 1A80     		strh	r2, [r3]
 762:..\..\..\BSP/bsp.c ****     
 763:..\..\..\BSP/bsp.c ****     if (DEF_BIT_IS_SET(axis_val, DEF_BIT_15) == DEF_YES) {      /* Adjust Y-Axis Value if Over Limi
 1122              		.loc 1 763 0
 1123 00d6 1623     		movs	r3, #22
 1124 00d8 FB18     		adds	r3, r7, r3
 1125 00da 0022     		movs	r2, #0
 1126 00dc 9B5E     		ldrsh	r3, [r3, r2]
 1127 00de 002B     		cmp	r3, #0
 1128 00e0 11DA     		bge	.L50
 764:..\..\..\BSP/bsp.c ****         axis_val >>= DEF_NIBBLE_NBR_BITS;                       /* Shift Back a Nibble, Since Accel
 1129              		.loc 1 764 0
 1130 00e2 1623     		movs	r3, #22
 1131 00e4 FB18     		adds	r3, r7, r3
 1132 00e6 1622     		movs	r2, #22
 1133 00e8 BA18     		adds	r2, r7, r2
 1134 00ea 0021     		movs	r1, #0
 1135 00ec 525E     		ldrsh	r2, [r2, r1]
 1136 00ee 1211     		asrs	r2, r2, #4
 1137 00f0 1A80     		strh	r2, [r3]
 765:..\..\..\BSP/bsp.c ****         axis_val  |= BSP_ACCEL_INVALID_MSK;                     /* Invalidate Upper Nibble on Y-Axi
 1138              		.loc 1 765 0
 1139 00f2 1623     		movs	r3, #22
 1140 00f4 FB18     		adds	r3, r7, r3
 1141 00f6 1B88     		ldrh	r3, [r3]
 1142 00f8 2E4A     		ldr	r2, .L54
 1143 00fa 1343     		orrs	r3, r2
 1144 00fc 9AB2     		uxth	r2, r3
 1145 00fe 1623     		movs	r3, #22
 1146 0100 FB18     		adds	r3, r7, r3
 1147 0102 1A80     		strh	r2, [r3]
 1148 0104 07E0     		b	.L51
 1149              	.L50:
 766:..\..\..\BSP/bsp.c ****     } else {
 767:..\..\..\BSP/bsp.c ****         axis_val >>= DEF_NIBBLE_NBR_BITS;                       /* Do Not Invalidate, just Shift Si
 1150              		.loc 1 767 0
 1151 0106 1623     		movs	r3, #22
 1152 0108 FB18     		adds	r3, r7, r3
 1153 010a 1622     		movs	r2, #22
 1154 010c BA18     		adds	r2, r7, r2
 1155 010e 0021     		movs	r1, #0
 1156 0110 525E     		ldrsh	r2, [r2, r1]
 1157 0112 1211     		asrs	r2, r2, #4
 1158 0114 1A80     		strh	r2, [r3]
 1159              	.L51:
 768:..\..\..\BSP/bsp.c ****     }
 769:..\..\..\BSP/bsp.c ****     
 770:..\..\..\BSP/bsp.c ****    *y_axis = axis_val;                                          /* Assign Y-Axis Value to Return.  
 1160              		.loc 1 770 0
 1161 0116 BB68     		ldr	r3, [r7, #8]
 1162 0118 1622     		movs	r2, #22
 1163 011a BA18     		adds	r2, r7, r2
 1164 011c 1288     		ldrh	r2, [r2]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 35


 1165 011e 1A80     		strh	r2, [r3]
 771:..\..\..\BSP/bsp.c ****     
 772:..\..\..\BSP/bsp.c ****                                                                 /* ----------------- READ Z-AXIS DA
 773:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_READ,                      /* Read the Z-Axis HIGH Register fo
 1166              		.loc 1 773 0
 1167 0120 1523     		movs	r3, #21
 1168 0122 FB18     		adds	r3, r7, r3
 1169 0124 1A00     		movs	r2, r3
 1170 0126 0B21     		movs	r1, #11
 1171 0128 0120     		movs	r0, #1
 1172 012a FFF7FEFF 		bl	BSP_Accel_RegRdWr
 774:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_ZOUT_H,
 775:..\..\..\BSP/bsp.c ****                       &data_resp);
 776:..\..\..\BSP/bsp.c ****     
 777:..\..\..\BSP/bsp.c ****     axis_val  = (data_resp << DEF_OCTET_NBR_BITS);              /* Place Z-Axis TOP Half Value onto
 1173              		.loc 1 777 0
 1174 012e 1523     		movs	r3, #21
 1175 0130 FB18     		adds	r3, r7, r3
 1176 0132 1B78     		ldrb	r3, [r3]
 1177 0134 1A02     		lsls	r2, r3, #8
 1178 0136 1623     		movs	r3, #22
 1179 0138 FB18     		adds	r3, r7, r3
 1180 013a 1A80     		strh	r2, [r3]
 778:..\..\..\BSP/bsp.c **** 
 779:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_READ,                      /* Read the Z-Axis LOW  Register fo
 1181              		.loc 1 779 0
 1182 013c 1523     		movs	r3, #21
 1183 013e FB18     		adds	r3, r7, r3
 1184 0140 1A00     		movs	r2, r3
 1185 0142 0A21     		movs	r1, #10
 1186 0144 0120     		movs	r0, #1
 1187 0146 FFF7FEFF 		bl	BSP_Accel_RegRdWr
 780:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_ZOUT_L,
 781:..\..\..\BSP/bsp.c ****                       &data_resp);
 782:..\..\..\BSP/bsp.c ****     
 783:..\..\..\BSP/bsp.c ****     axis_val |=  data_resp;                                     /* Add the Z-Axis BOTTOM Half Value
 1188              		.loc 1 783 0
 1189 014a 1523     		movs	r3, #21
 1190 014c FB18     		adds	r3, r7, r3
 1191 014e 1B78     		ldrb	r3, [r3]
 1192 0150 19B2     		sxth	r1, r3
 1193 0152 1623     		movs	r3, #22
 1194 0154 FB18     		adds	r3, r7, r3
 1195 0156 1622     		movs	r2, #22
 1196 0158 BA18     		adds	r2, r7, r2
 1197 015a 1288     		ldrh	r2, [r2]
 1198 015c 0A43     		orrs	r2, r1
 1199 015e 1A80     		strh	r2, [r3]
 784:..\..\..\BSP/bsp.c ****     
 785:..\..\..\BSP/bsp.c ****     if (DEF_BIT_IS_SET(axis_val, DEF_BIT_15) == DEF_YES) {      /* Adjust Z-Axis Value if Over Limi
 1200              		.loc 1 785 0
 1201 0160 1623     		movs	r3, #22
 1202 0162 FB18     		adds	r3, r7, r3
 1203 0164 0022     		movs	r2, #0
 1204 0166 9B5E     		ldrsh	r3, [r3, r2]
 1205 0168 002B     		cmp	r3, #0
 1206 016a 11DA     		bge	.L52
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 36


 786:..\..\..\BSP/bsp.c ****         axis_val >>= DEF_NIBBLE_NBR_BITS;                       /* Shift Back a Nibble, Since Accel
 1207              		.loc 1 786 0
 1208 016c 1623     		movs	r3, #22
 1209 016e FB18     		adds	r3, r7, r3
 1210 0170 1622     		movs	r2, #22
 1211 0172 BA18     		adds	r2, r7, r2
 1212 0174 0021     		movs	r1, #0
 1213 0176 525E     		ldrsh	r2, [r2, r1]
 1214 0178 1211     		asrs	r2, r2, #4
 1215 017a 1A80     		strh	r2, [r3]
 787:..\..\..\BSP/bsp.c ****         axis_val  |= BSP_ACCEL_INVALID_MSK;                     /* Invalidate Upper Nibble on Z-Axi
 1216              		.loc 1 787 0
 1217 017c 1623     		movs	r3, #22
 1218 017e FB18     		adds	r3, r7, r3
 1219 0180 1B88     		ldrh	r3, [r3]
 1220 0182 0C4A     		ldr	r2, .L54
 1221 0184 1343     		orrs	r3, r2
 1222 0186 9AB2     		uxth	r2, r3
 1223 0188 1623     		movs	r3, #22
 1224 018a FB18     		adds	r3, r7, r3
 1225 018c 1A80     		strh	r2, [r3]
 1226 018e 07E0     		b	.L53
 1227              	.L52:
 788:..\..\..\BSP/bsp.c ****     } else {
 789:..\..\..\BSP/bsp.c ****         axis_val >>= DEF_NIBBLE_NBR_BITS;                       /* Do Not Invalidate, just Shift Si
 1228              		.loc 1 789 0
 1229 0190 1623     		movs	r3, #22
 1230 0192 FB18     		adds	r3, r7, r3
 1231 0194 1622     		movs	r2, #22
 1232 0196 BA18     		adds	r2, r7, r2
 1233 0198 0021     		movs	r1, #0
 1234 019a 525E     		ldrsh	r2, [r2, r1]
 1235 019c 1211     		asrs	r2, r2, #4
 1236 019e 1A80     		strh	r2, [r3]
 1237              	.L53:
 790:..\..\..\BSP/bsp.c ****     }
 791:..\..\..\BSP/bsp.c ****     
 792:..\..\..\BSP/bsp.c ****    *z_axis = axis_val;                                          /* Assign Z-Axis Value to Return.  
 1238              		.loc 1 792 0
 1239 01a0 7B68     		ldr	r3, [r7, #4]
 1240 01a2 1622     		movs	r2, #22
 1241 01a4 BA18     		adds	r2, r7, r2
 1242 01a6 1288     		ldrh	r2, [r2]
 1243 01a8 1A80     		strh	r2, [r3]
 793:..\..\..\BSP/bsp.c **** }
 1244              		.loc 1 793 0
 1245 01aa C046     		nop
 1246 01ac BD46     		mov	sp, r7
 1247 01ae 06B0     		add	sp, sp, #24
 1248              		@ sp needed
 1249 01b0 80BD     		pop	{r7, pc}
 1250              	.L55:
 1251 01b2 C046     		.align	2
 1252              	.L54:
 1253 01b4 00F0FFFF 		.word	-4096
 1254              		.cfi_endproc
 1255              	.LFE45:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 37


 1256              		.size	BSP_Accel_Rd, .-BSP_Accel_Rd
 1257              		.section	.text.BSP_Accel_ISR_Handler,"ax",%progbits
 1258              		.align	2
 1259              		.global	BSP_Accel_ISR_Handler
 1260              		.code	16
 1261              		.thumb_func
 1262              		.type	BSP_Accel_ISR_Handler, %function
 1263              	BSP_Accel_ISR_Handler:
 1264              	.LFB46:
 794:..\..\..\BSP/bsp.c **** 
 795:..\..\..\BSP/bsp.c **** 
 796:..\..\..\BSP/bsp.c **** /*
 797:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 798:..\..\..\BSP/bsp.c **** *                                       BSP_Accel_ISR_Handler()
 799:..\..\..\BSP/bsp.c **** *
 800:..\..\..\BSP/bsp.c **** * Description : ISR Handler (I2C Based) for the KXTJ2-1009 3-Axis Accelerometer.
 801:..\..\..\BSP/bsp.c **** *
 802:..\..\..\BSP/bsp.c **** * Argument(s) : none.
 803:..\..\..\BSP/bsp.c **** *
 804:..\..\..\BSP/bsp.c **** * Return(s)   : none.
 805:..\..\..\BSP/bsp.c **** *
 806:..\..\..\BSP/bsp.c **** * Caller(s)   : This is an ISR.
 807:..\..\..\BSP/bsp.c **** *
 808:..\..\..\BSP/bsp.c **** * Note(s)     : (1) See BSP_Init Note (3) for more information on how to convert this ISR Handler i
 809:..\..\..\BSP/bsp.c **** *                   an OS-Aware ISR Handler.
 810:..\..\..\BSP/bsp.c **** ***************************************************************************************************
 811:..\..\..\BSP/bsp.c **** */
 812:..\..\..\BSP/bsp.c **** 
 813:..\..\..\BSP/bsp.c **** CY_ISR(BSP_Accel_ISR_Handler)
 814:..\..\..\BSP/bsp.c **** {
 1265              		.loc 1 814 0
 1266              		.cfi_startproc
 1267              		@ args = 0, pretend = 0, frame = 8
 1268              		@ frame_needed = 1, uses_anonymous_args = 0
 1269 0000 80B5     		push	{r7, lr}
 1270              		.cfi_def_cfa_offset 8
 1271              		.cfi_offset 7, -8
 1272              		.cfi_offset 14, -4
 1273 0002 82B0     		sub	sp, sp, #8
 1274              		.cfi_def_cfa_offset 16
 1275 0004 00AF     		add	r7, sp, #0
 1276              		.cfi_def_cfa_register 7
 815:..\..\..\BSP/bsp.c ****     CPU_INT08U  data_resp;
 816:..\..\..\BSP/bsp.c ****     
 817:..\..\..\BSP/bsp.c ****                                                                 /* ----------------- CLR PENDING IN
 818:..\..\..\BSP/bsp.c ****     BSP_Accel_RegRdWr( BSP_KXTJ2_DIR_READ,                      /* Read INT_REL to Clear any Int Sr
 1277              		.loc 1 818 0
 1278 0006 FB1D     		adds	r3, r7, #7
 1279 0008 1A00     		movs	r2, r3
 1280 000a 1A21     		movs	r1, #26
 1281 000c 0120     		movs	r0, #1
 1282 000e FFF7FEFF 		bl	BSP_Accel_RegRdWr
 819:..\..\..\BSP/bsp.c ****                        BSP_ACCEL_REG_INT_REL,
 820:..\..\..\BSP/bsp.c ****                       &data_resp);
 821:..\..\..\BSP/bsp.c ****     
 822:..\..\..\BSP/bsp.c ****     Accel_Pin_ClearInterrupt();                                 /* Clear Pending GPIO Interrupt.   
 1283              		.loc 1 822 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 38


 1284 0012 FFF7FEFF 		bl	Accel_Pin_ClearInterrupt
 823:..\..\..\BSP/bsp.c **** }...
 1285              		.loc 1 823 0
 1286 0016 C046     		nop
 1287 0018 BD46     		mov	sp, r7
 1288 001a 02B0     		add	sp, sp, #8
 1289              		@ sp needed
 1290 001c 80BD     		pop	{r7, pc}
 1291              		.cfi_endproc
 1292              	.LFE46:
 1293              		.size	BSP_Accel_ISR_Handler, .-BSP_Accel_ISR_Handler
 1294 001e C046     		.text
 1295              	.Letext0:
 1296              		.file 2 "..\\..\\..\\..\\..\\..\\Software\\uC-CPU\\ARM-Cortex-M0\\GNU/cpu.h"
 1297              		.file 3 "Generated_Source\\PSoC4/cytypes.h"
 1298              		.file 4 "..\\..\\..\\BSP\\bsp.h"
 1299              		.section	.debug_info,"",%progbits
 1300              	.Ldebug_info0:
 1301 0000 0F040000 		.4byte	0x40f
 1302 0004 0400     		.2byte	0x4
 1303 0006 00000000 		.4byte	.Ldebug_abbrev0
 1304 000a 04       		.byte	0x4
 1305 000b 01       		.uleb128 0x1
 1306 000c 21010000 		.4byte	.LASF58
 1307 0010 0C       		.byte	0xc
 1308 0011 07000000 		.4byte	.LASF59
 1309 0015 EF020000 		.4byte	.LASF60
 1310 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1311 001d 00000000 		.4byte	0
 1312 0021 00000000 		.4byte	.Ldebug_line0
 1313 0025 02       		.uleb128 0x2
 1314 0026 01       		.byte	0x1
 1315 0027 06       		.byte	0x6
 1316 0028 B6000000 		.4byte	.LASF0
 1317 002c 02       		.uleb128 0x2
 1318 002d 01       		.byte	0x1
 1319 002e 08       		.byte	0x8
 1320 002f DE010000 		.4byte	.LASF1
 1321 0033 02       		.uleb128 0x2
 1322 0034 02       		.byte	0x2
 1323 0035 05       		.byte	0x5
 1324 0036 37000000 		.4byte	.LASF2
 1325 003a 02       		.uleb128 0x2
 1326 003b 02       		.byte	0x2
 1327 003c 07       		.byte	0x7
 1328 003d 4E020000 		.4byte	.LASF3
 1329 0041 02       		.uleb128 0x2
 1330 0042 04       		.byte	0x4
 1331 0043 05       		.byte	0x5
 1332 0044 EE000000 		.4byte	.LASF4
 1333 0048 02       		.uleb128 0x2
 1334 0049 04       		.byte	0x4
 1335 004a 07       		.byte	0x7
 1336 004b DD020000 		.4byte	.LASF5
 1337 004f 02       		.uleb128 0x2
 1338 0050 08       		.byte	0x8
 1339 0051 05       		.byte	0x5
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 39


 1340 0052 C8000000 		.4byte	.LASF6
 1341 0056 02       		.uleb128 0x2
 1342 0057 08       		.byte	0x8
 1343 0058 07       		.byte	0x7
 1344 0059 F5010000 		.4byte	.LASF7
 1345 005d 03       		.uleb128 0x3
 1346 005e 04       		.byte	0x4
 1347 005f 05       		.byte	0x5
 1348 0060 696E7400 		.ascii	"int\000"
 1349 0064 02       		.uleb128 0x2
 1350 0065 04       		.byte	0x4
 1351 0066 07       		.byte	0x7
 1352 0067 0C020000 		.4byte	.LASF8
 1353 006b 02       		.uleb128 0x2
 1354 006c 08       		.byte	0x8
 1355 006d 04       		.byte	0x4
 1356 006e BE010000 		.4byte	.LASF9
 1357 0072 02       		.uleb128 0x2
 1358 0073 04       		.byte	0x4
 1359 0074 07       		.byte	0x7
 1360 0075 77030000 		.4byte	.LASF10
 1361 0079 02       		.uleb128 0x2
 1362 007a 01       		.byte	0x1
 1363 007b 08       		.byte	0x8
 1364 007c 8B020000 		.4byte	.LASF11
 1365 0080 02       		.uleb128 0x2
 1366 0081 04       		.byte	0x4
 1367 0082 04       		.byte	0x4
 1368 0083 C2000000 		.4byte	.LASF12
 1369 0087 02       		.uleb128 0x2
 1370 0088 08       		.byte	0x8
 1371 0089 04       		.byte	0x4
 1372 008a 49030000 		.4byte	.LASF13
 1373 008e 04       		.uleb128 0x4
 1374 008f E2000000 		.4byte	.LASF14
 1375 0093 02       		.byte	0x2
 1376 0094 7D       		.byte	0x7d
 1377 0095 2C000000 		.4byte	0x2c
 1378 0099 04       		.uleb128 0x4
 1379 009a 80020000 		.4byte	.LASF15
 1380 009e 02       		.byte	0x2
 1381 009f 7E       		.byte	0x7e
 1382 00a0 2C000000 		.4byte	0x2c
 1383 00a4 04       		.uleb128 0x4
 1384 00a5 BD030000 		.4byte	.LASF16
 1385 00a9 02       		.byte	0x2
 1386 00aa 80       		.byte	0x80
 1387 00ab 3A000000 		.4byte	0x3a
 1388 00af 04       		.uleb128 0x4
 1389 00b0 B2030000 		.4byte	.LASF17
 1390 00b4 02       		.byte	0x2
 1391 00b5 81       		.byte	0x81
 1392 00b6 33000000 		.4byte	0x33
 1393 00ba 04       		.uleb128 0x4
 1394 00bb C1020000 		.4byte	.LASF18
 1395 00bf 02       		.byte	0x2
 1396 00c0 82       		.byte	0x82
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 40


 1397 00c1 64000000 		.4byte	0x64
 1398 00c5 04       		.uleb128 0x4
 1399 00c6 CC020000 		.4byte	.LASF19
 1400 00ca 02       		.byte	0x2
 1401 00cb 8D       		.byte	0x8d
 1402 00cc D0000000 		.4byte	0xd0
 1403 00d0 05       		.uleb128 0x5
 1404 00d1 BA000000 		.4byte	0xba
 1405 00d5 04       		.uleb128 0x4
 1406 00d6 9D000000 		.4byte	.LASF20
 1407 00da 03       		.byte	0x3
 1408 00db C2       		.byte	0xc2
 1409 00dc 2C000000 		.4byte	0x2c
 1410 00e0 04       		.uleb128 0x4
 1411 00e1 85000000 		.4byte	.LASF21
 1412 00e5 03       		.byte	0x3
 1413 00e6 C3       		.byte	0xc3
 1414 00e7 3A000000 		.4byte	0x3a
 1415 00eb 04       		.uleb128 0x4
 1416 00ec D6020000 		.4byte	.LASF22
 1417 00f0 03       		.byte	0x3
 1418 00f1 C4       		.byte	0xc4
 1419 00f2 48000000 		.4byte	0x48
 1420 00f6 06       		.uleb128 0x6
 1421 00f7 A8020000 		.4byte	.LASF61
 1422 00fb 01       		.byte	0x1
 1423 00fc 2C000000 		.4byte	0x2c
 1424 0100 04       		.byte	0x4
 1425 0101 EB       		.byte	0xeb
 1426 0102 19010000 		.4byte	0x119
 1427 0106 07       		.uleb128 0x7
 1428 0107 CA010000 		.4byte	.LASF23
 1429 010b 00       		.byte	0
 1430 010c 07       		.uleb128 0x7
 1431 010d C8030000 		.4byte	.LASF24
 1432 0111 01       		.byte	0x1
 1433 0112 07       		.uleb128 0x7
 1434 0113 A3000000 		.4byte	.LASF25
 1435 0117 02       		.byte	0x2
 1436 0118 00       		.byte	0
 1437 0119 04       		.uleb128 0x4
 1438 011a 5B030000 		.4byte	.LASF26
 1439 011e 04       		.byte	0x4
 1440 011f EF       		.byte	0xef
 1441 0120 F6000000 		.4byte	0xf6
 1442 0124 08       		.uleb128 0x8
 1443 0125 6E030000 		.4byte	.LASF29
 1444 0129 01       		.byte	0x1
 1445 012a 9E       		.byte	0x9e
 1446 012b 00000000 		.4byte	.LFB34
 1447 012f 5C000000 		.4byte	.LFE34-.LFB34
 1448 0133 01       		.uleb128 0x1
 1449 0134 9C       		.byte	0x9c
 1450 0135 56010000 		.4byte	0x156
 1451 0139 09       		.uleb128 0x9
 1452 013a 3C020000 		.4byte	.LASF27
 1453 013e 01       		.byte	0x1
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 41


 1454 013f A0       		.byte	0xa0
 1455 0140 BA000000 		.4byte	0xba
 1456 0144 02       		.uleb128 0x2
 1457 0145 91       		.byte	0x91
 1458 0146 74       		.sleb128 -12
 1459 0147 09       		.uleb128 0x9
 1460 0148 50030000 		.4byte	.LASF28
 1461 014c 01       		.byte	0x1
 1462 014d A1       		.byte	0xa1
 1463 014e 56010000 		.4byte	0x156
 1464 0152 02       		.uleb128 0x2
 1465 0153 91       		.byte	0x91
 1466 0154 70       		.sleb128 -16
 1467 0155 00       		.byte	0
 1468 0156 0A       		.uleb128 0xa
 1469 0157 04       		.byte	0x4
 1470 0158 BA000000 		.4byte	0xba
 1471 015c 08       		.uleb128 0x8
 1472 015d F7000000 		.4byte	.LASF30
 1473 0161 01       		.byte	0x1
 1474 0162 CD       		.byte	0xcd
 1475 0163 00000000 		.4byte	.LFB35
 1476 0167 1E000000 		.4byte	.LFE35-.LFB35
 1477 016b 01       		.uleb128 0x1
 1478 016c 9C       		.byte	0x9c
 1479 016d 80010000 		.4byte	0x180
 1480 0171 09       		.uleb128 0x9
 1481 0172 73020000 		.4byte	.LASF31
 1482 0176 01       		.byte	0x1
 1483 0177 CF       		.byte	0xcf
 1484 0178 BA000000 		.4byte	0xba
 1485 017c 02       		.uleb128 0x2
 1486 017d 91       		.byte	0x91
 1487 017e 74       		.sleb128 -12
 1488 017f 00       		.byte	0
 1489 0180 0B       		.uleb128 0xb
 1490 0181 DB030000 		.4byte	.LASF62
 1491 0185 01       		.byte	0x1
 1492 0186 E8       		.byte	0xe8
 1493 0187 BA000000 		.4byte	0xba
 1494 018b 00000000 		.4byte	.LFB36
 1495 018f 10000000 		.4byte	.LFE36-.LFB36
 1496 0193 01       		.uleb128 0x1
 1497 0194 9C       		.byte	0x9c
 1498 0195 0C       		.uleb128 0xc
 1499 0196 92000000 		.4byte	.LASF32
 1500 019a 01       		.byte	0x1
 1501 019b 0801     		.2byte	0x108
 1502 019d 00000000 		.4byte	.LFB37
 1503 01a1 18000000 		.4byte	.LFE37-.LFB37
 1504 01a5 01       		.uleb128 0x1
 1505 01a6 9C       		.byte	0x9c
 1506 01a7 0C       		.uleb128 0xc
 1507 01a8 08010000 		.4byte	.LASF33
 1508 01ac 01       		.byte	0x1
 1509 01ad 2101     		.2byte	0x121
 1510 01af 00000000 		.4byte	.LFB38
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 42


 1511 01b3 24000000 		.4byte	.LFE38-.LFB38
 1512 01b7 01       		.uleb128 0x1
 1513 01b8 9C       		.byte	0x9c
 1514 01b9 0D       		.uleb128 0xd
 1515 01ba 20020000 		.4byte	.LASF34
 1516 01be 01       		.byte	0x1
 1517 01bf 3E01     		.2byte	0x13e
 1518 01c1 00000000 		.4byte	.LFB39
 1519 01c5 E0000000 		.4byte	.LFE39-.LFB39
 1520 01c9 01       		.uleb128 0x1
 1521 01ca 9C       		.byte	0x9c
 1522 01cb 0C020000 		.4byte	0x20c
 1523 01cf 0E       		.uleb128 0xe
 1524 01d0 41000000 		.4byte	.LASF38
 1525 01d4 01       		.byte	0x1
 1526 01d5 3E01     		.2byte	0x13e
 1527 01d7 BA000000 		.4byte	0xba
 1528 01db 02       		.uleb128 0x2
 1529 01dc 91       		.byte	0x91
 1530 01dd 6C       		.sleb128 -20
 1531 01de 0F       		.uleb128 0xf
 1532 01df 8C000000 		.4byte	.LASF35
 1533 01e3 01       		.byte	0x1
 1534 01e4 4001     		.2byte	0x140
 1535 01e6 99000000 		.4byte	0x99
 1536 01ea 02       		.uleb128 0x2
 1537 01eb 91       		.byte	0x91
 1538 01ec 77       		.sleb128 -9
 1539 01ed 0F       		.uleb128 0xf
 1540 01ee A8030000 		.4byte	.LASF36
 1541 01f2 01       		.byte	0x1
 1542 01f3 4101     		.2byte	0x141
 1543 01f5 99000000 		.4byte	0x99
 1544 01f9 02       		.uleb128 0x2
 1545 01fa 91       		.byte	0x91
 1546 01fb 76       		.sleb128 -10
 1547 01fc 0F       		.uleb128 0xf
 1548 01fd 44020000 		.4byte	.LASF37
 1549 0201 01       		.byte	0x1
 1550 0202 4201     		.2byte	0x142
 1551 0204 A4000000 		.4byte	0xa4
 1552 0208 02       		.uleb128 0x2
 1553 0209 91       		.byte	0x91
 1554 020a 74       		.sleb128 -12
 1555 020b 00       		.byte	0
 1556 020c 10       		.uleb128 0x10
 1557 020d 80030000 		.4byte	.LASF39
 1558 0211 01       		.byte	0x1
 1559 0212 7A01     		.2byte	0x17a
 1560 0214 BA000000 		.4byte	0xba
 1561 0218 00000000 		.4byte	.LFB40
 1562 021c 9C000000 		.4byte	.LFE40-.LFB40
 1563 0220 01       		.uleb128 0x1
 1564 0221 9C       		.byte	0x9c
 1565 0222 54020000 		.4byte	0x254
 1566 0226 0F       		.uleb128 0xf
 1567 0227 41000000 		.4byte	.LASF38
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 43


 1568 022b 01       		.byte	0x1
 1569 022c 7C01     		.2byte	0x17c
 1570 022e BA000000 		.4byte	0xba
 1571 0232 02       		.uleb128 0x2
 1572 0233 91       		.byte	0x91
 1573 0234 74       		.sleb128 -12
 1574 0235 0F       		.uleb128 0xf
 1575 0236 44020000 		.4byte	.LASF37
 1576 023a 01       		.byte	0x1
 1577 023b 7D01     		.2byte	0x17d
 1578 023d A4000000 		.4byte	0xa4
 1579 0241 02       		.uleb128 0x2
 1580 0242 91       		.byte	0x91
 1581 0243 72       		.sleb128 -14
 1582 0244 0F       		.uleb128 0xf
 1583 0245 A8030000 		.4byte	.LASF36
 1584 0249 01       		.byte	0x1
 1585 024a 7E01     		.2byte	0x17e
 1586 024c 99000000 		.4byte	0x99
 1587 0250 02       		.uleb128 0x2
 1588 0251 91       		.byte	0x91
 1589 0252 71       		.sleb128 -15
 1590 0253 00       		.byte	0
 1591 0254 10       		.uleb128 0x10
 1592 0255 58000000 		.4byte	.LASF40
 1593 0259 01       		.byte	0x1
 1594 025a B401     		.2byte	0x1b4
 1595 025c 8E000000 		.4byte	0x8e
 1596 0260 00000000 		.4byte	.LFB41
 1597 0264 30000000 		.4byte	.LFE41-.LFB41
 1598 0268 01       		.uleb128 0x1
 1599 0269 9C       		.byte	0x9c
 1600 026a 8D020000 		.4byte	0x28d
 1601 026e 0F       		.uleb128 0xf
 1602 026f 69000000 		.4byte	.LASF41
 1603 0273 01       		.byte	0x1
 1604 0274 B601     		.2byte	0x1b6
 1605 0276 8E000000 		.4byte	0x8e
 1606 027a 02       		.uleb128 0x2
 1607 027b 91       		.byte	0x91
 1608 027c 6E       		.sleb128 -18
 1609 027d 0F       		.uleb128 0xf
 1610 027e 19020000 		.4byte	.LASF42
 1611 0282 01       		.byte	0x1
 1612 0283 B701     		.2byte	0x1b7
 1613 0285 99000000 		.4byte	0x99
 1614 0289 02       		.uleb128 0x2
 1615 028a 91       		.byte	0x91
 1616 028b 6F       		.sleb128 -17
 1617 028c 00       		.byte	0
 1618 028d 0D       		.uleb128 0xd
 1619 028e AF010000 		.4byte	.LASF43
 1620 0292 01       		.byte	0x1
 1621 0293 E101     		.2byte	0x1e1
 1622 0295 00000000 		.4byte	.LFB42
 1623 0299 EC000000 		.4byte	.LFE42-.LFB42
 1624 029d 01       		.uleb128 0x1
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 44


 1625 029e 9C       		.byte	0x9c
 1626 029f C2020000 		.4byte	0x2c2
 1627 02a3 0F       		.uleb128 0xf
 1628 02a4 14010000 		.4byte	.LASF44
 1629 02a8 01       		.byte	0x1
 1630 02a9 E301     		.2byte	0x1e3
 1631 02ab 8E000000 		.4byte	0x8e
 1632 02af 02       		.uleb128 0x2
 1633 02b0 91       		.byte	0x91
 1634 02b1 6F       		.sleb128 -17
 1635 02b2 0F       		.uleb128 0xf
 1636 02b3 4E000000 		.4byte	.LASF45
 1637 02b7 01       		.byte	0x1
 1638 02b8 E401     		.2byte	0x1e4
 1639 02ba 99000000 		.4byte	0x99
 1640 02be 02       		.uleb128 0x2
 1641 02bf 91       		.byte	0x91
 1642 02c0 6E       		.sleb128 -18
 1643 02c1 00       		.byte	0
 1644 02c2 11       		.uleb128 0x11
 1645 02c3 92030000 		.4byte	.LASF47
 1646 02c7 01       		.byte	0x1
 1647 02c8 4302     		.2byte	0x243
 1648 02ca 8E000000 		.4byte	0x8e
 1649 02ce 00000000 		.4byte	.LFB43
 1650 02d2 CE000000 		.4byte	.LFE43-.LFB43
 1651 02d6 01       		.uleb128 0x1
 1652 02d7 9C       		.byte	0x9c
 1653 02d8 07030000 		.4byte	0x307
 1654 02dc 12       		.uleb128 0x12
 1655 02dd D6000000 		.4byte	.LASF63
 1656 02e1 01       		.byte	0x1
 1657 02e2 4502     		.2byte	0x245
 1658 02e4 8E000000 		.4byte	0x8e
 1659 02e8 0F       		.uleb128 0xf
 1660 02e9 90020000 		.4byte	.LASF46
 1661 02ed 01       		.byte	0x1
 1662 02ee 4602     		.2byte	0x246
 1663 02f0 8E000000 		.4byte	0x8e
 1664 02f4 02       		.uleb128 0x2
 1665 02f5 91       		.byte	0x91
 1666 02f6 6F       		.sleb128 -17
 1667 02f7 0F       		.uleb128 0xf
 1668 02f8 4E000000 		.4byte	.LASF45
 1669 02fc 01       		.byte	0x1
 1670 02fd 4702     		.2byte	0x247
 1671 02ff 99000000 		.4byte	0x99
 1672 0303 02       		.uleb128 0x2
 1673 0304 91       		.byte	0x91
 1674 0305 6E       		.sleb128 -18
 1675 0306 00       		.byte	0
 1676 0307 11       		.uleb128 0x11
 1677 0308 61020000 		.4byte	.LASF48
 1678 030c 01       		.byte	0x1
 1679 030d 9502     		.2byte	0x295
 1680 030f 8E000000 		.4byte	0x8e
 1681 0313 00000000 		.4byte	.LFB44
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 45


 1682 0317 D2000000 		.4byte	.LFE44-.LFB44
 1683 031b 01       		.uleb128 0x1
 1684 031c 9C       		.byte	0x9c
 1685 031d 6D030000 		.4byte	0x36d
 1686 0321 0E       		.uleb128 0xe
 1687 0322 BB020000 		.4byte	.LASF49
 1688 0326 01       		.byte	0x1
 1689 0327 9502     		.2byte	0x295
 1690 0329 19010000 		.4byte	0x119
 1691 032d 02       		.uleb128 0x2
 1692 032e 91       		.byte	0x91
 1693 032f 6F       		.sleb128 -17
 1694 0330 13       		.uleb128 0x13
 1695 0331 72656700 		.ascii	"reg\000"
 1696 0335 01       		.byte	0x1
 1697 0336 9602     		.2byte	0x296
 1698 0338 99000000 		.4byte	0x99
 1699 033c 02       		.uleb128 0x2
 1700 033d 91       		.byte	0x91
 1701 033e 6E       		.sleb128 -18
 1702 033f 0E       		.uleb128 0xe
 1703 0340 73000000 		.4byte	.LASF50
 1704 0344 01       		.byte	0x1
 1705 0345 9702     		.2byte	0x297
 1706 0347 6D030000 		.4byte	0x36d
 1707 034b 02       		.uleb128 0x2
 1708 034c 91       		.byte	0x91
 1709 034d 68       		.sleb128 -24
 1710 034e 0F       		.uleb128 0xf
 1711 034f 31020000 		.4byte	.LASF51
 1712 0353 01       		.byte	0x1
 1713 0354 9902     		.2byte	0x299
 1714 0356 99000000 		.4byte	0x99
 1715 035a 02       		.uleb128 0x2
 1716 035b 91       		.byte	0x91
 1717 035c 76       		.sleb128 -10
 1718 035d 0F       		.uleb128 0xf
 1719 035e 14010000 		.4byte	.LASF44
 1720 0362 01       		.byte	0x1
 1721 0363 9A02     		.2byte	0x29a
 1722 0365 8E000000 		.4byte	0x8e
 1723 0369 02       		.uleb128 0x2
 1724 036a 91       		.byte	0x91
 1725 036b 77       		.sleb128 -9
 1726 036c 00       		.byte	0
 1727 036d 0A       		.uleb128 0xa
 1728 036e 04       		.byte	0x4
 1729 036f 99000000 		.4byte	0x99
 1730 0373 0D       		.uleb128 0xd
 1731 0374 9B020000 		.4byte	.LASF52
 1732 0378 01       		.byte	0x1
 1733 0379 D102     		.2byte	0x2d1
 1734 037b 00000000 		.4byte	.LFB45
 1735 037f B8010000 		.4byte	.LFE45-.LFB45
 1736 0383 01       		.uleb128 0x1
 1737 0384 9C       		.byte	0x9c
 1738 0385 D5030000 		.4byte	0x3d5
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 46


 1739 0389 0E       		.uleb128 0xe
 1740 038a 1A000000 		.4byte	.LASF53
 1741 038e 01       		.byte	0x1
 1742 038f D102     		.2byte	0x2d1
 1743 0391 D5030000 		.4byte	0x3d5
 1744 0395 02       		.uleb128 0x2
 1745 0396 91       		.byte	0x91
 1746 0397 6C       		.sleb128 -20
 1747 0398 0E       		.uleb128 0xe
 1748 0399 47000000 		.4byte	.LASF54
 1749 039d 01       		.byte	0x1
 1750 039e D202     		.2byte	0x2d2
 1751 03a0 D5030000 		.4byte	0x3d5
 1752 03a4 02       		.uleb128 0x2
 1753 03a5 91       		.byte	0x91
 1754 03a6 68       		.sleb128 -24
 1755 03a7 0E       		.uleb128 0xe
 1756 03a8 00000000 		.4byte	.LASF55
 1757 03ac 01       		.byte	0x1
 1758 03ad D302     		.2byte	0x2d3
 1759 03af D5030000 		.4byte	0x3d5
 1760 03b3 02       		.uleb128 0x2
 1761 03b4 91       		.byte	0x91
 1762 03b5 64       		.sleb128 -28
 1763 03b6 0F       		.uleb128 0xf
 1764 03b7 EC010000 		.4byte	.LASF56
 1765 03bb 01       		.byte	0x1
 1766 03bc D502     		.2byte	0x2d5
 1767 03be AF000000 		.4byte	0xaf
 1768 03c2 02       		.uleb128 0x2
 1769 03c3 91       		.byte	0x91
 1770 03c4 76       		.sleb128 -10
 1771 03c5 0F       		.uleb128 0xf
 1772 03c6 4E000000 		.4byte	.LASF45
 1773 03ca 01       		.byte	0x1
 1774 03cb D602     		.2byte	0x2d6
 1775 03cd 99000000 		.4byte	0x99
 1776 03d1 02       		.uleb128 0x2
 1777 03d2 91       		.byte	0x91
 1778 03d3 75       		.sleb128 -11
 1779 03d4 00       		.byte	0
 1780 03d5 0A       		.uleb128 0xa
 1781 03d6 04       		.byte	0x4
 1782 03d7 AF000000 		.4byte	0xaf
 1783 03db 0D       		.uleb128 0xd
 1784 03dc 21000000 		.4byte	.LASF57
 1785 03e0 01       		.byte	0x1
 1786 03e1 2D03     		.2byte	0x32d
 1787 03e3 00000000 		.4byte	.LFB46
 1788 03e7 1E000000 		.4byte	.LFE46-.LFB46
 1789 03eb 01       		.uleb128 0x1
 1790 03ec 9C       		.byte	0x9c
 1791 03ed 01040000 		.4byte	0x401
 1792 03f1 0F       		.uleb128 0xf
 1793 03f2 4E000000 		.4byte	.LASF45
 1794 03f6 01       		.byte	0x1
 1795 03f7 2F03     		.2byte	0x32f
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 47


 1796 03f9 99000000 		.4byte	0x99
 1797 03fd 02       		.uleb128 0x2
 1798 03fe 91       		.byte	0x91
 1799 03ff 77       		.sleb128 -9
 1800 0400 00       		.byte	0
 1801 0401 14       		.uleb128 0x14
 1802 0402 79000000 		.4byte	.LASF64
 1803 0406 01       		.byte	0x1
 1804 0407 54       		.byte	0x54
 1805 0408 BA000000 		.4byte	0xba
 1806 040c 05       		.uleb128 0x5
 1807 040d 03       		.byte	0x3
 1808 040e 00000000 		.4byte	RGB_PrevVal
 1809 0412 00       		.byte	0
 1810              		.section	.debug_abbrev,"",%progbits
 1811              	.Ldebug_abbrev0:
 1812 0000 01       		.uleb128 0x1
 1813 0001 11       		.uleb128 0x11
 1814 0002 01       		.byte	0x1
 1815 0003 25       		.uleb128 0x25
 1816 0004 0E       		.uleb128 0xe
 1817 0005 13       		.uleb128 0x13
 1818 0006 0B       		.uleb128 0xb
 1819 0007 03       		.uleb128 0x3
 1820 0008 0E       		.uleb128 0xe
 1821 0009 1B       		.uleb128 0x1b
 1822 000a 0E       		.uleb128 0xe
 1823 000b 55       		.uleb128 0x55
 1824 000c 17       		.uleb128 0x17
 1825 000d 11       		.uleb128 0x11
 1826 000e 01       		.uleb128 0x1
 1827 000f 10       		.uleb128 0x10
 1828 0010 17       		.uleb128 0x17
 1829 0011 00       		.byte	0
 1830 0012 00       		.byte	0
 1831 0013 02       		.uleb128 0x2
 1832 0014 24       		.uleb128 0x24
 1833 0015 00       		.byte	0
 1834 0016 0B       		.uleb128 0xb
 1835 0017 0B       		.uleb128 0xb
 1836 0018 3E       		.uleb128 0x3e
 1837 0019 0B       		.uleb128 0xb
 1838 001a 03       		.uleb128 0x3
 1839 001b 0E       		.uleb128 0xe
 1840 001c 00       		.byte	0
 1841 001d 00       		.byte	0
 1842 001e 03       		.uleb128 0x3
 1843 001f 24       		.uleb128 0x24
 1844 0020 00       		.byte	0
 1845 0021 0B       		.uleb128 0xb
 1846 0022 0B       		.uleb128 0xb
 1847 0023 3E       		.uleb128 0x3e
 1848 0024 0B       		.uleb128 0xb
 1849 0025 03       		.uleb128 0x3
 1850 0026 08       		.uleb128 0x8
 1851 0027 00       		.byte	0
 1852 0028 00       		.byte	0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 48


 1853 0029 04       		.uleb128 0x4
 1854 002a 16       		.uleb128 0x16
 1855 002b 00       		.byte	0
 1856 002c 03       		.uleb128 0x3
 1857 002d 0E       		.uleb128 0xe
 1858 002e 3A       		.uleb128 0x3a
 1859 002f 0B       		.uleb128 0xb
 1860 0030 3B       		.uleb128 0x3b
 1861 0031 0B       		.uleb128 0xb
 1862 0032 49       		.uleb128 0x49
 1863 0033 13       		.uleb128 0x13
 1864 0034 00       		.byte	0
 1865 0035 00       		.byte	0
 1866 0036 05       		.uleb128 0x5
 1867 0037 35       		.uleb128 0x35
 1868 0038 00       		.byte	0
 1869 0039 49       		.uleb128 0x49
 1870 003a 13       		.uleb128 0x13
 1871 003b 00       		.byte	0
 1872 003c 00       		.byte	0
 1873 003d 06       		.uleb128 0x6
 1874 003e 04       		.uleb128 0x4
 1875 003f 01       		.byte	0x1
 1876 0040 03       		.uleb128 0x3
 1877 0041 0E       		.uleb128 0xe
 1878 0042 0B       		.uleb128 0xb
 1879 0043 0B       		.uleb128 0xb
 1880 0044 49       		.uleb128 0x49
 1881 0045 13       		.uleb128 0x13
 1882 0046 3A       		.uleb128 0x3a
 1883 0047 0B       		.uleb128 0xb
 1884 0048 3B       		.uleb128 0x3b
 1885 0049 0B       		.uleb128 0xb
 1886 004a 01       		.uleb128 0x1
 1887 004b 13       		.uleb128 0x13
 1888 004c 00       		.byte	0
 1889 004d 00       		.byte	0
 1890 004e 07       		.uleb128 0x7
 1891 004f 28       		.uleb128 0x28
 1892 0050 00       		.byte	0
 1893 0051 03       		.uleb128 0x3
 1894 0052 0E       		.uleb128 0xe
 1895 0053 1C       		.uleb128 0x1c
 1896 0054 0B       		.uleb128 0xb
 1897 0055 00       		.byte	0
 1898 0056 00       		.byte	0
 1899 0057 08       		.uleb128 0x8
 1900 0058 2E       		.uleb128 0x2e
 1901 0059 01       		.byte	0x1
 1902 005a 3F       		.uleb128 0x3f
 1903 005b 19       		.uleb128 0x19
 1904 005c 03       		.uleb128 0x3
 1905 005d 0E       		.uleb128 0xe
 1906 005e 3A       		.uleb128 0x3a
 1907 005f 0B       		.uleb128 0xb
 1908 0060 3B       		.uleb128 0x3b
 1909 0061 0B       		.uleb128 0xb
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 49


 1910 0062 27       		.uleb128 0x27
 1911 0063 19       		.uleb128 0x19
 1912 0064 11       		.uleb128 0x11
 1913 0065 01       		.uleb128 0x1
 1914 0066 12       		.uleb128 0x12
 1915 0067 06       		.uleb128 0x6
 1916 0068 40       		.uleb128 0x40
 1917 0069 18       		.uleb128 0x18
 1918 006a 9642     		.uleb128 0x2116
 1919 006c 19       		.uleb128 0x19
 1920 006d 01       		.uleb128 0x1
 1921 006e 13       		.uleb128 0x13
 1922 006f 00       		.byte	0
 1923 0070 00       		.byte	0
 1924 0071 09       		.uleb128 0x9
 1925 0072 34       		.uleb128 0x34
 1926 0073 00       		.byte	0
 1927 0074 03       		.uleb128 0x3
 1928 0075 0E       		.uleb128 0xe
 1929 0076 3A       		.uleb128 0x3a
 1930 0077 0B       		.uleb128 0xb
 1931 0078 3B       		.uleb128 0x3b
 1932 0079 0B       		.uleb128 0xb
 1933 007a 49       		.uleb128 0x49
 1934 007b 13       		.uleb128 0x13
 1935 007c 02       		.uleb128 0x2
 1936 007d 18       		.uleb128 0x18
 1937 007e 00       		.byte	0
 1938 007f 00       		.byte	0
 1939 0080 0A       		.uleb128 0xa
 1940 0081 0F       		.uleb128 0xf
 1941 0082 00       		.byte	0
 1942 0083 0B       		.uleb128 0xb
 1943 0084 0B       		.uleb128 0xb
 1944 0085 49       		.uleb128 0x49
 1945 0086 13       		.uleb128 0x13
 1946 0087 00       		.byte	0
 1947 0088 00       		.byte	0
 1948 0089 0B       		.uleb128 0xb
 1949 008a 2E       		.uleb128 0x2e
 1950 008b 00       		.byte	0
 1951 008c 3F       		.uleb128 0x3f
 1952 008d 19       		.uleb128 0x19
 1953 008e 03       		.uleb128 0x3
 1954 008f 0E       		.uleb128 0xe
 1955 0090 3A       		.uleb128 0x3a
 1956 0091 0B       		.uleb128 0xb
 1957 0092 3B       		.uleb128 0x3b
 1958 0093 0B       		.uleb128 0xb
 1959 0094 27       		.uleb128 0x27
 1960 0095 19       		.uleb128 0x19
 1961 0096 49       		.uleb128 0x49
 1962 0097 13       		.uleb128 0x13
 1963 0098 11       		.uleb128 0x11
 1964 0099 01       		.uleb128 0x1
 1965 009a 12       		.uleb128 0x12
 1966 009b 06       		.uleb128 0x6
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 50


 1967 009c 40       		.uleb128 0x40
 1968 009d 18       		.uleb128 0x18
 1969 009e 9742     		.uleb128 0x2117
 1970 00a0 19       		.uleb128 0x19
 1971 00a1 00       		.byte	0
 1972 00a2 00       		.byte	0
 1973 00a3 0C       		.uleb128 0xc
 1974 00a4 2E       		.uleb128 0x2e
 1975 00a5 00       		.byte	0
 1976 00a6 3F       		.uleb128 0x3f
 1977 00a7 19       		.uleb128 0x19
 1978 00a8 03       		.uleb128 0x3
 1979 00a9 0E       		.uleb128 0xe
 1980 00aa 3A       		.uleb128 0x3a
 1981 00ab 0B       		.uleb128 0xb
 1982 00ac 3B       		.uleb128 0x3b
 1983 00ad 05       		.uleb128 0x5
 1984 00ae 27       		.uleb128 0x27
 1985 00af 19       		.uleb128 0x19
 1986 00b0 11       		.uleb128 0x11
 1987 00b1 01       		.uleb128 0x1
 1988 00b2 12       		.uleb128 0x12
 1989 00b3 06       		.uleb128 0x6
 1990 00b4 40       		.uleb128 0x40
 1991 00b5 18       		.uleb128 0x18
 1992 00b6 9642     		.uleb128 0x2116
 1993 00b8 19       		.uleb128 0x19
 1994 00b9 00       		.byte	0
 1995 00ba 00       		.byte	0
 1996 00bb 0D       		.uleb128 0xd
 1997 00bc 2E       		.uleb128 0x2e
 1998 00bd 01       		.byte	0x1
 1999 00be 3F       		.uleb128 0x3f
 2000 00bf 19       		.uleb128 0x19
 2001 00c0 03       		.uleb128 0x3
 2002 00c1 0E       		.uleb128 0xe
 2003 00c2 3A       		.uleb128 0x3a
 2004 00c3 0B       		.uleb128 0xb
 2005 00c4 3B       		.uleb128 0x3b
 2006 00c5 05       		.uleb128 0x5
 2007 00c6 27       		.uleb128 0x27
 2008 00c7 19       		.uleb128 0x19
 2009 00c8 11       		.uleb128 0x11
 2010 00c9 01       		.uleb128 0x1
 2011 00ca 12       		.uleb128 0x12
 2012 00cb 06       		.uleb128 0x6
 2013 00cc 40       		.uleb128 0x40
 2014 00cd 18       		.uleb128 0x18
 2015 00ce 9642     		.uleb128 0x2116
 2016 00d0 19       		.uleb128 0x19
 2017 00d1 01       		.uleb128 0x1
 2018 00d2 13       		.uleb128 0x13
 2019 00d3 00       		.byte	0
 2020 00d4 00       		.byte	0
 2021 00d5 0E       		.uleb128 0xe
 2022 00d6 05       		.uleb128 0x5
 2023 00d7 00       		.byte	0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 51


 2024 00d8 03       		.uleb128 0x3
 2025 00d9 0E       		.uleb128 0xe
 2026 00da 3A       		.uleb128 0x3a
 2027 00db 0B       		.uleb128 0xb
 2028 00dc 3B       		.uleb128 0x3b
 2029 00dd 05       		.uleb128 0x5
 2030 00de 49       		.uleb128 0x49
 2031 00df 13       		.uleb128 0x13
 2032 00e0 02       		.uleb128 0x2
 2033 00e1 18       		.uleb128 0x18
 2034 00e2 00       		.byte	0
 2035 00e3 00       		.byte	0
 2036 00e4 0F       		.uleb128 0xf
 2037 00e5 34       		.uleb128 0x34
 2038 00e6 00       		.byte	0
 2039 00e7 03       		.uleb128 0x3
 2040 00e8 0E       		.uleb128 0xe
 2041 00e9 3A       		.uleb128 0x3a
 2042 00ea 0B       		.uleb128 0xb
 2043 00eb 3B       		.uleb128 0x3b
 2044 00ec 05       		.uleb128 0x5
 2045 00ed 49       		.uleb128 0x49
 2046 00ee 13       		.uleb128 0x13
 2047 00ef 02       		.uleb128 0x2
 2048 00f0 18       		.uleb128 0x18
 2049 00f1 00       		.byte	0
 2050 00f2 00       		.byte	0
 2051 00f3 10       		.uleb128 0x10
 2052 00f4 2E       		.uleb128 0x2e
 2053 00f5 01       		.byte	0x1
 2054 00f6 3F       		.uleb128 0x3f
 2055 00f7 19       		.uleb128 0x19
 2056 00f8 03       		.uleb128 0x3
 2057 00f9 0E       		.uleb128 0xe
 2058 00fa 3A       		.uleb128 0x3a
 2059 00fb 0B       		.uleb128 0xb
 2060 00fc 3B       		.uleb128 0x3b
 2061 00fd 05       		.uleb128 0x5
 2062 00fe 27       		.uleb128 0x27
 2063 00ff 19       		.uleb128 0x19
 2064 0100 49       		.uleb128 0x49
 2065 0101 13       		.uleb128 0x13
 2066 0102 11       		.uleb128 0x11
 2067 0103 01       		.uleb128 0x1
 2068 0104 12       		.uleb128 0x12
 2069 0105 06       		.uleb128 0x6
 2070 0106 40       		.uleb128 0x40
 2071 0107 18       		.uleb128 0x18
 2072 0108 9642     		.uleb128 0x2116
 2073 010a 19       		.uleb128 0x19
 2074 010b 01       		.uleb128 0x1
 2075 010c 13       		.uleb128 0x13
 2076 010d 00       		.byte	0
 2077 010e 00       		.byte	0
 2078 010f 11       		.uleb128 0x11
 2079 0110 2E       		.uleb128 0x2e
 2080 0111 01       		.byte	0x1
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 52


 2081 0112 03       		.uleb128 0x3
 2082 0113 0E       		.uleb128 0xe
 2083 0114 3A       		.uleb128 0x3a
 2084 0115 0B       		.uleb128 0xb
 2085 0116 3B       		.uleb128 0x3b
 2086 0117 05       		.uleb128 0x5
 2087 0118 27       		.uleb128 0x27
 2088 0119 19       		.uleb128 0x19
 2089 011a 49       		.uleb128 0x49
 2090 011b 13       		.uleb128 0x13
 2091 011c 11       		.uleb128 0x11
 2092 011d 01       		.uleb128 0x1
 2093 011e 12       		.uleb128 0x12
 2094 011f 06       		.uleb128 0x6
 2095 0120 40       		.uleb128 0x40
 2096 0121 18       		.uleb128 0x18
 2097 0122 9642     		.uleb128 0x2116
 2098 0124 19       		.uleb128 0x19
 2099 0125 01       		.uleb128 0x1
 2100 0126 13       		.uleb128 0x13
 2101 0127 00       		.byte	0
 2102 0128 00       		.byte	0
 2103 0129 12       		.uleb128 0x12
 2104 012a 34       		.uleb128 0x34
 2105 012b 00       		.byte	0
 2106 012c 03       		.uleb128 0x3
 2107 012d 0E       		.uleb128 0xe
 2108 012e 3A       		.uleb128 0x3a
 2109 012f 0B       		.uleb128 0xb
 2110 0130 3B       		.uleb128 0x3b
 2111 0131 05       		.uleb128 0x5
 2112 0132 49       		.uleb128 0x49
 2113 0133 13       		.uleb128 0x13
 2114 0134 00       		.byte	0
 2115 0135 00       		.byte	0
 2116 0136 13       		.uleb128 0x13
 2117 0137 05       		.uleb128 0x5
 2118 0138 00       		.byte	0
 2119 0139 03       		.uleb128 0x3
 2120 013a 08       		.uleb128 0x8
 2121 013b 3A       		.uleb128 0x3a
 2122 013c 0B       		.uleb128 0xb
 2123 013d 3B       		.uleb128 0x3b
 2124 013e 05       		.uleb128 0x5
 2125 013f 49       		.uleb128 0x49
 2126 0140 13       		.uleb128 0x13
 2127 0141 02       		.uleb128 0x2
 2128 0142 18       		.uleb128 0x18
 2129 0143 00       		.byte	0
 2130 0144 00       		.byte	0
 2131 0145 14       		.uleb128 0x14
 2132 0146 34       		.uleb128 0x34
 2133 0147 00       		.byte	0
 2134 0148 03       		.uleb128 0x3
 2135 0149 0E       		.uleb128 0xe
 2136 014a 3A       		.uleb128 0x3a
 2137 014b 0B       		.uleb128 0xb
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 53


 2138 014c 3B       		.uleb128 0x3b
 2139 014d 0B       		.uleb128 0xb
 2140 014e 49       		.uleb128 0x49
 2141 014f 13       		.uleb128 0x13
 2142 0150 3F       		.uleb128 0x3f
 2143 0151 19       		.uleb128 0x19
 2144 0152 02       		.uleb128 0x2
 2145 0153 18       		.uleb128 0x18
 2146 0154 00       		.byte	0
 2147 0155 00       		.byte	0
 2148 0156 00       		.byte	0
 2149              		.section	.debug_aranges,"",%progbits
 2150 0000 7C000000 		.4byte	0x7c
 2151 0004 0200     		.2byte	0x2
 2152 0006 00000000 		.4byte	.Ldebug_info0
 2153 000a 04       		.byte	0x4
 2154 000b 00       		.byte	0
 2155 000c 0000     		.2byte	0
 2156 000e 0000     		.2byte	0
 2157 0010 00000000 		.4byte	.LFB34
 2158 0014 5C000000 		.4byte	.LFE34-.LFB34
 2159 0018 00000000 		.4byte	.LFB35
 2160 001c 1E000000 		.4byte	.LFE35-.LFB35
 2161 0020 00000000 		.4byte	.LFB36
 2162 0024 10000000 		.4byte	.LFE36-.LFB36
 2163 0028 00000000 		.4byte	.LFB37
 2164 002c 18000000 		.4byte	.LFE37-.LFB37
 2165 0030 00000000 		.4byte	.LFB38
 2166 0034 24000000 		.4byte	.LFE38-.LFB38
 2167 0038 00000000 		.4byte	.LFB39
 2168 003c E0000000 		.4byte	.LFE39-.LFB39
 2169 0040 00000000 		.4byte	.LFB40
 2170 0044 9C000000 		.4byte	.LFE40-.LFB40
 2171 0048 00000000 		.4byte	.LFB41
 2172 004c 30000000 		.4byte	.LFE41-.LFB41
 2173 0050 00000000 		.4byte	.LFB42
 2174 0054 EC000000 		.4byte	.LFE42-.LFB42
 2175 0058 00000000 		.4byte	.LFB43
 2176 005c CE000000 		.4byte	.LFE43-.LFB43
 2177 0060 00000000 		.4byte	.LFB44
 2178 0064 D2000000 		.4byte	.LFE44-.LFB44
 2179 0068 00000000 		.4byte	.LFB45
 2180 006c B8010000 		.4byte	.LFE45-.LFB45
 2181 0070 00000000 		.4byte	.LFB46
 2182 0074 1E000000 		.4byte	.LFE46-.LFB46
 2183 0078 00000000 		.4byte	0
 2184 007c 00000000 		.4byte	0
 2185              		.section	.debug_ranges,"",%progbits
 2186              	.Ldebug_ranges0:
 2187 0000 00000000 		.4byte	.LFB34
 2188 0004 5C000000 		.4byte	.LFE34
 2189 0008 00000000 		.4byte	.LFB35
 2190 000c 1E000000 		.4byte	.LFE35
 2191 0010 00000000 		.4byte	.LFB36
 2192 0014 10000000 		.4byte	.LFE36
 2193 0018 00000000 		.4byte	.LFB37
 2194 001c 18000000 		.4byte	.LFE37
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 54


 2195 0020 00000000 		.4byte	.LFB38
 2196 0024 24000000 		.4byte	.LFE38
 2197 0028 00000000 		.4byte	.LFB39
 2198 002c E0000000 		.4byte	.LFE39
 2199 0030 00000000 		.4byte	.LFB40
 2200 0034 9C000000 		.4byte	.LFE40
 2201 0038 00000000 		.4byte	.LFB41
 2202 003c 30000000 		.4byte	.LFE41
 2203 0040 00000000 		.4byte	.LFB42
 2204 0044 EC000000 		.4byte	.LFE42
 2205 0048 00000000 		.4byte	.LFB43
 2206 004c CE000000 		.4byte	.LFE43
 2207 0050 00000000 		.4byte	.LFB44
 2208 0054 D2000000 		.4byte	.LFE44
 2209 0058 00000000 		.4byte	.LFB45
 2210 005c B8010000 		.4byte	.LFE45
 2211 0060 00000000 		.4byte	.LFB46
 2212 0064 1E000000 		.4byte	.LFE46
 2213 0068 00000000 		.4byte	0
 2214 006c 00000000 		.4byte	0
 2215              		.section	.debug_line,"",%progbits
 2216              	.Ldebug_line0:
 2217 0000 38020000 		.section	.debug_str,"MS",%progbits,1
 2217      02009300 
 2217      00000201 
 2217      FB0E0D00 
 2217      01010101 
 2218              	.LASF55:
 2219 0000 7A5F6178 		.ascii	"z_axis\000"
 2219      697300
 2220              	.LASF59:
 2221 0007 2E2E5C2E 		.ascii	"..\\..\\..\\BSP\\bsp.c\000"
 2221      2E5C2E2E 
 2221      5C425350 
 2221      5C627370 
 2221      2E6300
 2222              	.LASF53:
 2223 001a 785F6178 		.ascii	"x_axis\000"
 2223      697300
 2224              	.LASF57:
 2225 0021 4253505F 		.ascii	"BSP_Accel_ISR_Handler\000"
 2225      41636365 
 2225      6C5F4953 
 2225      525F4861 
 2225      6E646C65 
 2226              	.LASF2:
 2227 0037 73686F72 		.ascii	"short int\000"
 2227      7420696E 
 2227      7400
 2228              	.LASF38:
 2229 0041 636F6C6F 		.ascii	"color\000"
 2229      7200
 2230              	.LASF54:
 2231 0047 795F6178 		.ascii	"y_axis\000"
 2231      697300
 2232              	.LASF45:
 2233 004e 64617461 		.ascii	"data_resp\000"
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 55


 2233      5F726573 
 2233      7000
 2234              	.LASF40:
 2235 0058 4253505F 		.ascii	"BSP_PB_StatusGet\000"
 2235      50425F53 
 2235      74617475 
 2235      73476574 
 2235      00
 2236              	.LASF41:
 2237 0069 70625F73 		.ascii	"pb_status\000"
 2237      74617475 
 2237      7300
 2238              	.LASF50:
 2239 0073 76616C75 		.ascii	"value\000"
 2239      6500
 2240              	.LASF64:
 2241 0079 5247425F 		.ascii	"RGB_PrevVal\000"
 2241      50726576 
 2241      56616C00 
 2242              	.LASF21:
 2243 0085 75696E74 		.ascii	"uint16\000"
 2243      313600
 2244              	.LASF35:
 2245 008c 616C7068 		.ascii	"alpha\000"
 2245      6100
 2246              	.LASF32:
 2247 0092 4253505F 		.ascii	"BSP_RGB_On\000"
 2247      5247425F 
 2247      4F6E00
 2248              	.LASF20:
 2249 009d 75696E74 		.ascii	"uint8\000"
 2249      3800
 2250              	.LASF25:
 2251 00a3 4253505F 		.ascii	"BSP_KXTJ2_DIR_NONE\000"
 2251      4B58544A 
 2251      325F4449 
 2251      525F4E4F 
 2251      4E4500
 2252              	.LASF0:
 2253 00b6 7369676E 		.ascii	"signed char\000"
 2253      65642063 
 2253      68617200 
 2254              	.LASF12:
 2255 00c2 666C6F61 		.ascii	"float\000"
 2255      7400
 2256              	.LASF6:
 2257 00c8 6C6F6E67 		.ascii	"long long int\000"
 2257      206C6F6E 
 2257      6720696E 
 2257      7400
 2258              	.LASF63:
 2259 00d6 74657374 		.ascii	"test_status\000"
 2259      5F737461 
 2259      74757300 
 2260              	.LASF14:
 2261 00e2 4350555F 		.ascii	"CPU_BOOLEAN\000"
 2261      424F4F4C 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 56


 2261      45414E00 
 2262              	.LASF4:
 2263 00ee 6C6F6E67 		.ascii	"long int\000"
 2263      20696E74 
 2263      00
 2264              	.LASF30:
 2265 00f7 4253505F 		.ascii	"BSP_CPU_TickInit\000"
 2265      4350555F 
 2265      5469636B 
 2265      496E6974 
 2265      00
 2266              	.LASF33:
 2267 0108 4253505F 		.ascii	"BSP_RGB_Off\000"
 2267      5247425F 
 2267      4F666600 
 2268              	.LASF44:
 2269 0114 61636365 		.ascii	"accel_status\000"
 2269      6C5F7374 
 2269      61747573 
 2269      00
 2270              	.LASF58:
 2271 0121 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 2271      43313120 
 2271      352E342E 
 2271      31203230 
 2271      31363036 
 2272 0154 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 2272      20726576 
 2272      6973696F 
 2272      6E203233 
 2272      37373135 
 2273 0187 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2273      66756E63 
 2273      74696F6E 
 2273      2D736563 
 2273      74696F6E 
 2274              	.LASF43:
 2275 01af 4253505F 		.ascii	"BSP_Accel_Init\000"
 2275      41636365 
 2275      6C5F496E 
 2275      697400
 2276              	.LASF9:
 2277 01be 6C6F6E67 		.ascii	"long double\000"
 2277      20646F75 
 2277      626C6500 
 2278              	.LASF23:
 2279 01ca 4253505F 		.ascii	"BSP_KXTJ2_DIR_WRITE\000"
 2279      4B58544A 
 2279      325F4449 
 2279      525F5752 
 2279      49544500 
 2280              	.LASF1:
 2281 01de 756E7369 		.ascii	"unsigned char\000"
 2281      676E6564 
 2281      20636861 
 2281      7200
 2282              	.LASF56:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 57


 2283 01ec 61786973 		.ascii	"axis_val\000"
 2283      5F76616C 
 2283      00
 2284              	.LASF7:
 2285 01f5 6C6F6E67 		.ascii	"long long unsigned int\000"
 2285      206C6F6E 
 2285      6720756E 
 2285      7369676E 
 2285      65642069 
 2286              	.LASF8:
 2287 020c 756E7369 		.ascii	"unsigned int\000"
 2287      676E6564 
 2287      20696E74 
 2287      00
 2288              	.LASF42:
 2289 0219 73775F76 		.ascii	"sw_val\000"
 2289      616C00
 2290              	.LASF34:
 2291 0220 4253505F 		.ascii	"BSP_RGB_ColorSet\000"
 2291      5247425F 
 2291      436F6C6F 
 2291      72536574 
 2291      00
 2292              	.LASF51:
 2293 0231 6932635F 		.ascii	"i2c_status\000"
 2293      73746174 
 2293      757300
 2294              	.LASF27:
 2295 023c 7265675F 		.ascii	"reg_val\000"
 2295      76616C00 
 2296              	.LASF37:
 2297 0244 70776D5F 		.ascii	"pwm_color\000"
 2297      636F6C6F 
 2297      7200
 2298              	.LASF3:
 2299 024e 73686F72 		.ascii	"short unsigned int\000"
 2299      7420756E 
 2299      7369676E 
 2299      65642069 
 2299      6E7400
 2300              	.LASF48:
 2301 0261 4253505F 		.ascii	"BSP_Accel_RegRdWr\000"
 2301      41636365 
 2301      6C5F5265 
 2301      67526457 
 2301      7200
 2302              	.LASF31:
 2303 0273 6370755F 		.ascii	"cpu_clk_freq\000"
 2303      636C6B5F 
 2303      66726571 
 2303      00
 2304              	.LASF15:
 2305 0280 4350555F 		.ascii	"CPU_INT08U\000"
 2305      494E5430 
 2305      385500
 2306              	.LASF11:
 2307 028b 63686172 		.ascii	"char\000"
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 58


 2307      00
 2308              	.LASF46:
 2309 0290 61636365 		.ascii	"accel_resp\000"
 2309      6C5F7265 
 2309      737000
 2310              	.LASF52:
 2311 029b 4253505F 		.ascii	"BSP_Accel_Rd\000"
 2311      41636365 
 2311      6C5F5264 
 2311      00
 2312              	.LASF61:
 2313 02a8 6273705F 		.ascii	"bsp_kxtj2_data_dir\000"
 2313      6B78746A 
 2313      325F6461 
 2313      74615F64 
 2313      697200
 2314              	.LASF49:
 2315 02bb 72645F77 		.ascii	"rd_wr\000"
 2315      7200
 2316              	.LASF18:
 2317 02c1 4350555F 		.ascii	"CPU_INT32U\000"
 2317      494E5433 
 2317      325500
 2318              	.LASF19:
 2319 02cc 4350555F 		.ascii	"CPU_REG32\000"
 2319      52454733 
 2319      3200
 2320              	.LASF22:
 2321 02d6 75696E74 		.ascii	"uint32\000"
 2321      333200
 2322              	.LASF5:
 2323 02dd 6C6F6E67 		.ascii	"long unsigned int\000"
 2323      20756E73 
 2323      69676E65 
 2323      6420696E 
 2323      7400
 2324              	.LASF60:
 2325 02ef 443A5C43 		.ascii	"D:\\CYTEST\\Micrium_CY8CKIT-044_OS2\\Micrium\\Examp"
 2325      59544553 
 2325      545C4D69 
 2325      63726975 
 2325      6D5F4359 
 2326 031e 6C65735C 		.ascii	"les\\Cypress\\CY8CKIT-044\\OS2\\PSoC\\OS2.cydsn\000"
 2326      43797072 
 2326      6573735C 
 2326      43593843 
 2326      4B49542D 
 2327              	.LASF13:
 2328 0349 646F7562 		.ascii	"double\000"
 2328      6C6500
 2329              	.LASF28:
 2330 0350 705F7665 		.ascii	"p_vect_tbl\000"
 2330      63745F74 
 2330      626C00
 2331              	.LASF26:
 2332 035b 4253505F 		.ascii	"BSP_KXTJ2_DATA_DIR\000"
 2332      4B58544A 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\cckWWWWy.s 			page 59


 2332      325F4441 
 2332      54415F44 
 2332      495200
 2333              	.LASF29:
 2334 036e 4253505F 		.ascii	"BSP_Init\000"
 2334      496E6974 
 2334      00
 2335              	.LASF10:
 2336 0377 73697A65 		.ascii	"sizetype\000"
 2336      74797065 
 2336      00
 2337              	.LASF39:
 2338 0380 4253505F 		.ascii	"BSP_RGB_ColorRead\000"
 2338      5247425F 
 2338      436F6C6F 
 2338      72526561 
 2338      6400
 2339              	.LASF47:
 2340 0392 4253505F 		.ascii	"BSP_Accel_InitSelfTst\000"
 2340      41636365 
 2340      6C5F496E 
 2340      69745365 
 2340      6C665473 
 2341              	.LASF36:
 2342 03a8 636F6C6F 		.ascii	"color_val\000"
 2342      725F7661 
 2342      6C00
 2343              	.LASF17:
 2344 03b2 4350555F 		.ascii	"CPU_INT16S\000"
 2344      494E5431 
 2344      365300
 2345              	.LASF16:
 2346 03bd 4350555F 		.ascii	"CPU_INT16U\000"
 2346      494E5431 
 2346      365500
 2347              	.LASF24:
 2348 03c8 4253505F 		.ascii	"BSP_KXTJ2_DIR_READ\000"
 2348      4B58544A 
 2348      325F4449 
 2348      525F5245 
 2348      414400
 2349              	.LASF62:
 2350 03db 4253505F 		.ascii	"BSP_CPU_ClkFreq\000"
 2350      4350555F 
 2350      436C6B46 
 2350      72657100 
 2351              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
