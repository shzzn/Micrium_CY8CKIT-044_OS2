ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m0
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"PWM_Red.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.global	PWM_Red_initVar
  20              		.bss
  21              		.type	PWM_Red_initVar, %object
  22              		.size	PWM_Red_initVar, 1
  23              	PWM_Red_initVar:
  24 0000 00       		.space	1
  25              		.section	.text.PWM_Red_Init,"ax",%progbits
  26              		.align	2
  27              		.global	PWM_Red_Init
  28              		.code	16
  29              		.thumb_func
  30              		.type	PWM_Red_Init, %function
  31              	PWM_Red_Init:
  32              	.LFB1:
  33              		.file 1 "Generated_Source\\PSoC4\\PWM_Red.c"
   1:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
   2:Generated_Source\PSoC4/PWM_Red.c **** * File Name: PWM_Red.c
   3:Generated_Source\PSoC4/PWM_Red.c **** * Version 2.0
   4:Generated_Source\PSoC4/PWM_Red.c **** *
   5:Generated_Source\PSoC4/PWM_Red.c **** * Description:
   6:Generated_Source\PSoC4/PWM_Red.c **** *  This file provides the source code to the API for the PWM_Red
   7:Generated_Source\PSoC4/PWM_Red.c **** *  component
   8:Generated_Source\PSoC4/PWM_Red.c **** *
   9:Generated_Source\PSoC4/PWM_Red.c **** * Note:
  10:Generated_Source\PSoC4/PWM_Red.c **** *  None
  11:Generated_Source\PSoC4/PWM_Red.c **** *
  12:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
  13:Generated_Source\PSoC4/PWM_Red.c **** * Copyright 2013-2014, Cypress Semiconductor Corporation.  All rights reserved.
  14:Generated_Source\PSoC4/PWM_Red.c **** * You may use this file only in accordance with the license, terms, conditions,
  15:Generated_Source\PSoC4/PWM_Red.c **** * disclaimers, and limitations in the end user license agreement accompanying
  16:Generated_Source\PSoC4/PWM_Red.c **** * the software package with which this file was provided.
  17:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
  18:Generated_Source\PSoC4/PWM_Red.c **** 
  19:Generated_Source\PSoC4/PWM_Red.c **** #include "PWM_Red.h"
  20:Generated_Source\PSoC4/PWM_Red.c **** 
  21:Generated_Source\PSoC4/PWM_Red.c **** uint8 PWM_Red_initVar = 0u;
  22:Generated_Source\PSoC4/PWM_Red.c **** 
  23:Generated_Source\PSoC4/PWM_Red.c **** 
  24:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 2


  25:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_Init
  26:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
  27:Generated_Source\PSoC4/PWM_Red.c **** *
  28:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
  29:Generated_Source\PSoC4/PWM_Red.c **** *  Initialize/Restore default PWM_Red configuration.
  30:Generated_Source\PSoC4/PWM_Red.c **** *
  31:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
  32:Generated_Source\PSoC4/PWM_Red.c **** *  None
  33:Generated_Source\PSoC4/PWM_Red.c **** *
  34:Generated_Source\PSoC4/PWM_Red.c **** * Return:
  35:Generated_Source\PSoC4/PWM_Red.c **** *  None
  36:Generated_Source\PSoC4/PWM_Red.c **** *
  37:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
  38:Generated_Source\PSoC4/PWM_Red.c **** void PWM_Red_Init(void)
  39:Generated_Source\PSoC4/PWM_Red.c **** {
  34              		.loc 1 39 0
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 0
  37              		@ frame_needed = 1, uses_anonymous_args = 0
  38 0000 80B5     		push	{r7, lr}
  39              		.cfi_def_cfa_offset 8
  40              		.cfi_offset 7, -8
  41              		.cfi_offset 14, -4
  42 0002 00AF     		add	r7, sp, #0
  43              		.cfi_def_cfa_register 7
  40:Generated_Source\PSoC4/PWM_Red.c **** 
  41:Generated_Source\PSoC4/PWM_Red.c ****     /* Set values from customizer to CTRL */
  42:Generated_Source\PSoC4/PWM_Red.c ****     #if (PWM_Red__QUAD == PWM_Red_CONFIG)
  43:Generated_Source\PSoC4/PWM_Red.c ****         PWM_Red_CONTROL_REG = PWM_Red_CTRL_QUAD_BASE_CONFIG;
  44:Generated_Source\PSoC4/PWM_Red.c ****         
  45:Generated_Source\PSoC4/PWM_Red.c ****         /* Set values from customizer to CTRL1 */
  46:Generated_Source\PSoC4/PWM_Red.c ****         PWM_Red_TRIG_CONTROL1_REG  = PWM_Red_QUAD_SIGNALS_MODES;
  47:Generated_Source\PSoC4/PWM_Red.c **** 
  48:Generated_Source\PSoC4/PWM_Red.c ****         /* Set values from customizer to INTR */
  49:Generated_Source\PSoC4/PWM_Red.c ****         PWM_Red_SetInterruptMode(PWM_Red_QUAD_INTERRUPT_MASK);
  50:Generated_Source\PSoC4/PWM_Red.c ****         
  51:Generated_Source\PSoC4/PWM_Red.c ****          /* Set other values */
  52:Generated_Source\PSoC4/PWM_Red.c ****         PWM_Red_SetCounterMode(PWM_Red_COUNT_DOWN);
  53:Generated_Source\PSoC4/PWM_Red.c ****         PWM_Red_WritePeriod(PWM_Red_QUAD_PERIOD_INIT_VALUE);
  54:Generated_Source\PSoC4/PWM_Red.c ****         PWM_Red_WriteCounter(PWM_Red_QUAD_PERIOD_INIT_VALUE);
  55:Generated_Source\PSoC4/PWM_Red.c ****     #endif  /* (PWM_Red__QUAD == PWM_Red_CONFIG) */
  56:Generated_Source\PSoC4/PWM_Red.c **** 
  57:Generated_Source\PSoC4/PWM_Red.c ****     #if (PWM_Red__TIMER == PWM_Red_CONFIG)
  58:Generated_Source\PSoC4/PWM_Red.c ****         PWM_Red_CONTROL_REG = PWM_Red_CTRL_TIMER_BASE_CONFIG;
  59:Generated_Source\PSoC4/PWM_Red.c ****         
  60:Generated_Source\PSoC4/PWM_Red.c ****         /* Set values from customizer to CTRL1 */
  61:Generated_Source\PSoC4/PWM_Red.c ****         PWM_Red_TRIG_CONTROL1_REG  = PWM_Red_TIMER_SIGNALS_MODES;
  62:Generated_Source\PSoC4/PWM_Red.c ****     
  63:Generated_Source\PSoC4/PWM_Red.c ****         /* Set values from customizer to INTR */
  64:Generated_Source\PSoC4/PWM_Red.c ****         PWM_Red_SetInterruptMode(PWM_Red_TC_INTERRUPT_MASK);
  65:Generated_Source\PSoC4/PWM_Red.c ****         
  66:Generated_Source\PSoC4/PWM_Red.c ****         /* Set other values from customizer */
  67:Generated_Source\PSoC4/PWM_Red.c ****         PWM_Red_WritePeriod(PWM_Red_TC_PERIOD_VALUE );
  68:Generated_Source\PSoC4/PWM_Red.c **** 
  69:Generated_Source\PSoC4/PWM_Red.c ****         #if (PWM_Red__COMPARE == PWM_Red_TC_COMP_CAP_MODE)
  70:Generated_Source\PSoC4/PWM_Red.c ****             PWM_Red_WriteCompare(PWM_Red_TC_COMPARE_VALUE);
  71:Generated_Source\PSoC4/PWM_Red.c **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 3


  72:Generated_Source\PSoC4/PWM_Red.c ****             #if (1u == PWM_Red_TC_COMPARE_SWAP)
  73:Generated_Source\PSoC4/PWM_Red.c ****                 PWM_Red_SetCompareSwap(1u);
  74:Generated_Source\PSoC4/PWM_Red.c ****                 PWM_Red_WriteCompareBuf(PWM_Red_TC_COMPARE_BUF_VALUE);
  75:Generated_Source\PSoC4/PWM_Red.c ****             #endif  /* (1u == PWM_Red_TC_COMPARE_SWAP) */
  76:Generated_Source\PSoC4/PWM_Red.c ****         #endif  /* (PWM_Red__COMPARE == PWM_Red_TC_COMP_CAP_MODE) */
  77:Generated_Source\PSoC4/PWM_Red.c **** 
  78:Generated_Source\PSoC4/PWM_Red.c ****         /* Initialize counter value */
  79:Generated_Source\PSoC4/PWM_Red.c ****         #if (PWM_Red_CY_TCPWM_V2 && PWM_Red_TIMER_UPDOWN_CNT_USED && !PWM_Red_CY_TCPWM_4000)
  80:Generated_Source\PSoC4/PWM_Red.c ****             PWM_Red_WriteCounter(1u);
  81:Generated_Source\PSoC4/PWM_Red.c ****         #elif(PWM_Red__COUNT_DOWN == PWM_Red_TC_COUNTER_MODE)
  82:Generated_Source\PSoC4/PWM_Red.c ****             PWM_Red_WriteCounter(PWM_Red_TC_PERIOD_VALUE);
  83:Generated_Source\PSoC4/PWM_Red.c ****         #else
  84:Generated_Source\PSoC4/PWM_Red.c ****             PWM_Red_WriteCounter(0u);
  85:Generated_Source\PSoC4/PWM_Red.c ****         #endif /* (PWM_Red_CY_TCPWM_V2 && PWM_Red_TIMER_UPDOWN_CNT_USED && !PWM_Red_CY_TCPWM_4000) 
  86:Generated_Source\PSoC4/PWM_Red.c ****     #endif  /* (PWM_Red__TIMER == PWM_Red_CONFIG) */
  87:Generated_Source\PSoC4/PWM_Red.c **** 
  88:Generated_Source\PSoC4/PWM_Red.c ****     #if (PWM_Red__PWM_SEL == PWM_Red_CONFIG)
  89:Generated_Source\PSoC4/PWM_Red.c ****         PWM_Red_CONTROL_REG = PWM_Red_CTRL_PWM_BASE_CONFIG;
  44              		.loc 1 89 0
  45 0004 0F4B     		ldr	r3, .L2
  46 0006 C022     		movs	r2, #192
  47 0008 D204     		lsls	r2, r2, #19
  48 000a 1A60     		str	r2, [r3]
  90:Generated_Source\PSoC4/PWM_Red.c **** 
  91:Generated_Source\PSoC4/PWM_Red.c ****         #if (PWM_Red__PWM_PR == PWM_Red_PWM_MODE)
  92:Generated_Source\PSoC4/PWM_Red.c ****             PWM_Red_CONTROL_REG |= PWM_Red_CTRL_PWM_RUN_MODE;
  49              		.loc 1 92 0
  50 000c 0D4B     		ldr	r3, .L2
  51 000e 0D4A     		ldr	r2, .L2
  52 0010 1268     		ldr	r2, [r2]
  53 0012 1A60     		str	r2, [r3]
  93:Generated_Source\PSoC4/PWM_Red.c ****             PWM_Red_WriteCounter(PWM_Red_PWM_PR_INIT_VALUE);
  54              		.loc 1 93 0
  55 0014 0120     		movs	r0, #1
  56 0016 FFF7FEFF 		bl	PWM_Red_WriteCounter
  94:Generated_Source\PSoC4/PWM_Red.c ****         #else
  95:Generated_Source\PSoC4/PWM_Red.c ****             PWM_Red_CONTROL_REG |= PWM_Red_CTRL_PWM_ALIGN | PWM_Red_CTRL_PWM_KILL_EVENT;
  96:Generated_Source\PSoC4/PWM_Red.c ****             
  97:Generated_Source\PSoC4/PWM_Red.c ****             /* Initialize counter value */
  98:Generated_Source\PSoC4/PWM_Red.c ****             #if (PWM_Red_CY_TCPWM_V2 && PWM_Red_PWM_UPDOWN_CNT_USED && !PWM_Red_CY_TCPWM_4000)
  99:Generated_Source\PSoC4/PWM_Red.c ****                 PWM_Red_WriteCounter(1u);
 100:Generated_Source\PSoC4/PWM_Red.c ****             #elif (PWM_Red__RIGHT == PWM_Red_PWM_ALIGN)
 101:Generated_Source\PSoC4/PWM_Red.c ****                 PWM_Red_WriteCounter(PWM_Red_PWM_PERIOD_VALUE);
 102:Generated_Source\PSoC4/PWM_Red.c ****             #else 
 103:Generated_Source\PSoC4/PWM_Red.c ****                 PWM_Red_WriteCounter(0u);
 104:Generated_Source\PSoC4/PWM_Red.c ****             #endif  /* (PWM_Red_CY_TCPWM_V2 && PWM_Red_PWM_UPDOWN_CNT_USED && !PWM_Red_CY_TCPWM_400
 105:Generated_Source\PSoC4/PWM_Red.c ****         #endif  /* (PWM_Red__PWM_PR == PWM_Red_PWM_MODE) */
 106:Generated_Source\PSoC4/PWM_Red.c **** 
 107:Generated_Source\PSoC4/PWM_Red.c ****         #if (PWM_Red__PWM_DT == PWM_Red_PWM_MODE)
 108:Generated_Source\PSoC4/PWM_Red.c ****             PWM_Red_CONTROL_REG |= PWM_Red_CTRL_PWM_DEAD_TIME_CYCLE;
 109:Generated_Source\PSoC4/PWM_Red.c ****         #endif  /* (PWM_Red__PWM_DT == PWM_Red_PWM_MODE) */
 110:Generated_Source\PSoC4/PWM_Red.c **** 
 111:Generated_Source\PSoC4/PWM_Red.c ****         #if (PWM_Red__PWM == PWM_Red_PWM_MODE)
 112:Generated_Source\PSoC4/PWM_Red.c ****             PWM_Red_CONTROL_REG |= PWM_Red_CTRL_PWM_PRESCALER;
 113:Generated_Source\PSoC4/PWM_Red.c ****         #endif  /* (PWM_Red__PWM == PWM_Red_PWM_MODE) */
 114:Generated_Source\PSoC4/PWM_Red.c **** 
 115:Generated_Source\PSoC4/PWM_Red.c ****         /* Set values from customizer to CTRL1 */
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 4


 116:Generated_Source\PSoC4/PWM_Red.c ****         PWM_Red_TRIG_CONTROL1_REG  = PWM_Red_PWM_SIGNALS_MODES;
  57              		.loc 1 116 0
  58 001a 0B4B     		ldr	r3, .L2+4
  59 001c 0C22     		movs	r2, #12
  60 001e 1A60     		str	r2, [r3]
 117:Generated_Source\PSoC4/PWM_Red.c ****     
 118:Generated_Source\PSoC4/PWM_Red.c ****         /* Set values from customizer to INTR */
 119:Generated_Source\PSoC4/PWM_Red.c ****         PWM_Red_SetInterruptMode(PWM_Red_PWM_INTERRUPT_MASK);
  61              		.loc 1 119 0
  62 0020 0020     		movs	r0, #0
  63 0022 FFF7FEFF 		bl	PWM_Red_SetInterruptMode
 120:Generated_Source\PSoC4/PWM_Red.c **** 
 121:Generated_Source\PSoC4/PWM_Red.c ****         /* Set values from customizer to CTRL2 */
 122:Generated_Source\PSoC4/PWM_Red.c ****         #if (PWM_Red__PWM_PR == PWM_Red_PWM_MODE)
 123:Generated_Source\PSoC4/PWM_Red.c ****             PWM_Red_TRIG_CONTROL2_REG =
  64              		.loc 1 123 0
  65 0026 094B     		ldr	r3, .L2+8
  66 0028 3F22     		movs	r2, #63
  67 002a 1A60     		str	r2, [r3]
 124:Generated_Source\PSoC4/PWM_Red.c ****                     (PWM_Red_CC_MATCH_NO_CHANGE    |
 125:Generated_Source\PSoC4/PWM_Red.c ****                     PWM_Red_OVERLOW_NO_CHANGE      |
 126:Generated_Source\PSoC4/PWM_Red.c ****                     PWM_Red_UNDERFLOW_NO_CHANGE);
 127:Generated_Source\PSoC4/PWM_Red.c ****         #else
 128:Generated_Source\PSoC4/PWM_Red.c ****             #if (PWM_Red__LEFT == PWM_Red_PWM_ALIGN)
 129:Generated_Source\PSoC4/PWM_Red.c ****                 PWM_Red_TRIG_CONTROL2_REG = PWM_Red_PWM_MODE_LEFT;
 130:Generated_Source\PSoC4/PWM_Red.c ****             #endif  /* ( PWM_Red_PWM_LEFT == PWM_Red_PWM_ALIGN) */
 131:Generated_Source\PSoC4/PWM_Red.c **** 
 132:Generated_Source\PSoC4/PWM_Red.c ****             #if (PWM_Red__RIGHT == PWM_Red_PWM_ALIGN)
 133:Generated_Source\PSoC4/PWM_Red.c ****                 PWM_Red_TRIG_CONTROL2_REG = PWM_Red_PWM_MODE_RIGHT;
 134:Generated_Source\PSoC4/PWM_Red.c ****             #endif  /* ( PWM_Red_PWM_RIGHT == PWM_Red_PWM_ALIGN) */
 135:Generated_Source\PSoC4/PWM_Red.c **** 
 136:Generated_Source\PSoC4/PWM_Red.c ****             #if (PWM_Red__CENTER == PWM_Red_PWM_ALIGN)
 137:Generated_Source\PSoC4/PWM_Red.c ****                 PWM_Red_TRIG_CONTROL2_REG = PWM_Red_PWM_MODE_CENTER;
 138:Generated_Source\PSoC4/PWM_Red.c ****             #endif  /* ( PWM_Red_PWM_CENTER == PWM_Red_PWM_ALIGN) */
 139:Generated_Source\PSoC4/PWM_Red.c **** 
 140:Generated_Source\PSoC4/PWM_Red.c ****             #if (PWM_Red__ASYMMETRIC == PWM_Red_PWM_ALIGN)
 141:Generated_Source\PSoC4/PWM_Red.c ****                 PWM_Red_TRIG_CONTROL2_REG = PWM_Red_PWM_MODE_ASYM;
 142:Generated_Source\PSoC4/PWM_Red.c ****             #endif  /* (PWM_Red__ASYMMETRIC == PWM_Red_PWM_ALIGN) */
 143:Generated_Source\PSoC4/PWM_Red.c ****         #endif  /* (PWM_Red__PWM_PR == PWM_Red_PWM_MODE) */
 144:Generated_Source\PSoC4/PWM_Red.c **** 
 145:Generated_Source\PSoC4/PWM_Red.c ****         /* Set other values from customizer */
 146:Generated_Source\PSoC4/PWM_Red.c ****         PWM_Red_WritePeriod(PWM_Red_PWM_PERIOD_VALUE );
  68              		.loc 1 146 0
  69 002c 084B     		ldr	r3, .L2+12
  70 002e 1800     		movs	r0, r3
  71 0030 FFF7FEFF 		bl	PWM_Red_WritePeriod
 147:Generated_Source\PSoC4/PWM_Red.c ****         PWM_Red_WriteCompare(PWM_Red_PWM_COMPARE_VALUE);
  72              		.loc 1 147 0
  73 0034 074B     		ldr	r3, .L2+16
  74 0036 1800     		movs	r0, r3
  75 0038 FFF7FEFF 		bl	PWM_Red_WriteCompare
 148:Generated_Source\PSoC4/PWM_Red.c **** 
 149:Generated_Source\PSoC4/PWM_Red.c ****         #if (1u == PWM_Red_PWM_COMPARE_SWAP)
 150:Generated_Source\PSoC4/PWM_Red.c ****             PWM_Red_SetCompareSwap(1u);
 151:Generated_Source\PSoC4/PWM_Red.c ****             PWM_Red_WriteCompareBuf(PWM_Red_PWM_COMPARE_BUF_VALUE);
 152:Generated_Source\PSoC4/PWM_Red.c ****         #endif  /* (1u == PWM_Red_PWM_COMPARE_SWAP) */
 153:Generated_Source\PSoC4/PWM_Red.c **** 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 5


 154:Generated_Source\PSoC4/PWM_Red.c ****         #if (1u == PWM_Red_PWM_PERIOD_SWAP)
 155:Generated_Source\PSoC4/PWM_Red.c ****             PWM_Red_SetPeriodSwap(1u);
 156:Generated_Source\PSoC4/PWM_Red.c ****             PWM_Red_WritePeriodBuf(PWM_Red_PWM_PERIOD_BUF_VALUE);
 157:Generated_Source\PSoC4/PWM_Red.c ****         #endif  /* (1u == PWM_Red_PWM_PERIOD_SWAP) */
 158:Generated_Source\PSoC4/PWM_Red.c ****     #endif  /* (PWM_Red__PWM_SEL == PWM_Red_CONFIG) */
 159:Generated_Source\PSoC4/PWM_Red.c ****     
 160:Generated_Source\PSoC4/PWM_Red.c **** }
  76              		.loc 1 160 0
  77 003c C046     		nop
  78 003e BD46     		mov	sp, r7
  79              		@ sp needed
  80 0040 80BD     		pop	{r7, pc}
  81              	.L3:
  82 0042 C046     		.align	2
  83              	.L2:
  84 0044 40012040 		.word	1075839296
  85 0048 64012040 		.word	1075839332
  86 004c 68012040 		.word	1075839336
  87 0050 FFFF0000 		.word	65535
  88 0054 FF7F0000 		.word	32767
  89              		.cfi_endproc
  90              	.LFE1:
  91              		.size	PWM_Red_Init, .-PWM_Red_Init
  92              		.section	.text.PWM_Red_Enable,"ax",%progbits
  93              		.align	2
  94              		.global	PWM_Red_Enable
  95              		.code	16
  96              		.thumb_func
  97              		.type	PWM_Red_Enable, %function
  98              	PWM_Red_Enable:
  99              	.LFB2:
 161:Generated_Source\PSoC4/PWM_Red.c **** 
 162:Generated_Source\PSoC4/PWM_Red.c **** 
 163:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
 164:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_Enable
 165:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
 166:Generated_Source\PSoC4/PWM_Red.c **** *
 167:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
 168:Generated_Source\PSoC4/PWM_Red.c **** *  Enables the PWM_Red.
 169:Generated_Source\PSoC4/PWM_Red.c **** *
 170:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
 171:Generated_Source\PSoC4/PWM_Red.c **** *  None
 172:Generated_Source\PSoC4/PWM_Red.c **** *
 173:Generated_Source\PSoC4/PWM_Red.c **** * Return:
 174:Generated_Source\PSoC4/PWM_Red.c **** *  None
 175:Generated_Source\PSoC4/PWM_Red.c **** *
 176:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
 177:Generated_Source\PSoC4/PWM_Red.c **** void PWM_Red_Enable(void)
 178:Generated_Source\PSoC4/PWM_Red.c **** {
 100              		.loc 1 178 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 8
 103              		@ frame_needed = 1, uses_anonymous_args = 0
 104 0000 90B5     		push	{r4, r7, lr}
 105              		.cfi_def_cfa_offset 12
 106              		.cfi_offset 4, -12
 107              		.cfi_offset 7, -8
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 6


 108              		.cfi_offset 14, -4
 109 0002 83B0     		sub	sp, sp, #12
 110              		.cfi_def_cfa_offset 24
 111 0004 00AF     		add	r7, sp, #0
 112              		.cfi_def_cfa_register 7
 179:Generated_Source\PSoC4/PWM_Red.c ****     uint8 enableInterrupts;
 180:Generated_Source\PSoC4/PWM_Red.c **** 
 181:Generated_Source\PSoC4/PWM_Red.c ****     enableInterrupts = CyEnterCriticalSection();
 113              		.loc 1 181 0
 114 0006 FC1D     		adds	r4, r7, #7
 115 0008 FFF7FEFF 		bl	CyEnterCriticalSection
 116 000c 0300     		movs	r3, r0
 117 000e 2370     		strb	r3, [r4]
 182:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_BLOCK_CONTROL_REG |= PWM_Red_MASK;
 118              		.loc 1 182 0
 119 0010 094B     		ldr	r3, .L5
 120 0012 094A     		ldr	r2, .L5
 121 0014 1268     		ldr	r2, [r2]
 122 0016 0221     		movs	r1, #2
 123 0018 0A43     		orrs	r2, r1
 124 001a 1A60     		str	r2, [r3]
 183:Generated_Source\PSoC4/PWM_Red.c ****     CyExitCriticalSection(enableInterrupts);
 125              		.loc 1 183 0
 126 001c FB1D     		adds	r3, r7, #7
 127 001e 1B78     		ldrb	r3, [r3]
 128 0020 1800     		movs	r0, r3
 129 0022 FFF7FEFF 		bl	CyExitCriticalSection
 184:Generated_Source\PSoC4/PWM_Red.c **** 
 185:Generated_Source\PSoC4/PWM_Red.c ****     /* Start Timer or PWM if start input is absent */
 186:Generated_Source\PSoC4/PWM_Red.c ****     #if (PWM_Red__PWM_SEL == PWM_Red_CONFIG)
 187:Generated_Source\PSoC4/PWM_Red.c ****         #if (0u == PWM_Red_PWM_START_SIGNAL_PRESENT)
 188:Generated_Source\PSoC4/PWM_Red.c ****             PWM_Red_TriggerCommand(PWM_Red_MASK, PWM_Red_CMD_START);
 130              		.loc 1 188 0
 131 0026 1821     		movs	r1, #24
 132 0028 0220     		movs	r0, #2
 133 002a FFF7FEFF 		bl	PWM_Red_TriggerCommand
 189:Generated_Source\PSoC4/PWM_Red.c ****         #endif /* (0u == PWM_Red_PWM_START_SIGNAL_PRESENT) */
 190:Generated_Source\PSoC4/PWM_Red.c ****     #endif /* (PWM_Red__PWM_SEL == PWM_Red_CONFIG) */
 191:Generated_Source\PSoC4/PWM_Red.c **** 
 192:Generated_Source\PSoC4/PWM_Red.c ****     #if (PWM_Red__TIMER == PWM_Red_CONFIG)
 193:Generated_Source\PSoC4/PWM_Red.c ****         #if (0u == PWM_Red_TC_START_SIGNAL_PRESENT)
 194:Generated_Source\PSoC4/PWM_Red.c ****             PWM_Red_TriggerCommand(PWM_Red_MASK, PWM_Red_CMD_START);
 195:Generated_Source\PSoC4/PWM_Red.c ****         #endif /* (0u == PWM_Red_TC_START_SIGNAL_PRESENT) */
 196:Generated_Source\PSoC4/PWM_Red.c ****     #endif /* (PWM_Red__TIMER == PWM_Red_CONFIG) */
 197:Generated_Source\PSoC4/PWM_Red.c **** }
 134              		.loc 1 197 0
 135 002e C046     		nop
 136 0030 BD46     		mov	sp, r7
 137 0032 03B0     		add	sp, sp, #12
 138              		@ sp needed
 139 0034 90BD     		pop	{r4, r7, pc}
 140              	.L6:
 141 0036 C046     		.align	2
 142              	.L5:
 143 0038 00002040 		.word	1075838976
 144              		.cfi_endproc
 145              	.LFE2:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 7


 146              		.size	PWM_Red_Enable, .-PWM_Red_Enable
 147              		.section	.text.PWM_Red_Start,"ax",%progbits
 148              		.align	2
 149              		.global	PWM_Red_Start
 150              		.code	16
 151              		.thumb_func
 152              		.type	PWM_Red_Start, %function
 153              	PWM_Red_Start:
 154              	.LFB3:
 198:Generated_Source\PSoC4/PWM_Red.c **** 
 199:Generated_Source\PSoC4/PWM_Red.c **** 
 200:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
 201:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_Start
 202:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
 203:Generated_Source\PSoC4/PWM_Red.c **** *
 204:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
 205:Generated_Source\PSoC4/PWM_Red.c **** *  Initializes the PWM_Red with default customizer
 206:Generated_Source\PSoC4/PWM_Red.c **** *  values when called the first time and enables the PWM_Red.
 207:Generated_Source\PSoC4/PWM_Red.c **** *  For subsequent calls the configuration is left unchanged and the component is
 208:Generated_Source\PSoC4/PWM_Red.c **** *  just enabled.
 209:Generated_Source\PSoC4/PWM_Red.c **** *
 210:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
 211:Generated_Source\PSoC4/PWM_Red.c **** *  None
 212:Generated_Source\PSoC4/PWM_Red.c **** *
 213:Generated_Source\PSoC4/PWM_Red.c **** * Return:
 214:Generated_Source\PSoC4/PWM_Red.c **** *  None
 215:Generated_Source\PSoC4/PWM_Red.c **** *
 216:Generated_Source\PSoC4/PWM_Red.c **** * Global variables:
 217:Generated_Source\PSoC4/PWM_Red.c **** *  PWM_Red_initVar: global variable is used to indicate initial
 218:Generated_Source\PSoC4/PWM_Red.c **** *  configuration of this component.  The variable is initialized to zero and set
 219:Generated_Source\PSoC4/PWM_Red.c **** *  to 1 the first time PWM_Red_Start() is called. This allows
 220:Generated_Source\PSoC4/PWM_Red.c **** *  enabling/disabling a component without re-initialization in all subsequent
 221:Generated_Source\PSoC4/PWM_Red.c **** *  calls to the PWM_Red_Start() routine.
 222:Generated_Source\PSoC4/PWM_Red.c **** *
 223:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
 224:Generated_Source\PSoC4/PWM_Red.c **** void PWM_Red_Start(void)
 225:Generated_Source\PSoC4/PWM_Red.c **** {
 155              		.loc 1 225 0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 0
 158              		@ frame_needed = 1, uses_anonymous_args = 0
 159 0000 80B5     		push	{r7, lr}
 160              		.cfi_def_cfa_offset 8
 161              		.cfi_offset 7, -8
 162              		.cfi_offset 14, -4
 163 0002 00AF     		add	r7, sp, #0
 164              		.cfi_def_cfa_register 7
 226:Generated_Source\PSoC4/PWM_Red.c ****     if (0u == PWM_Red_initVar)
 165              		.loc 1 226 0
 166 0004 064B     		ldr	r3, .L9
 167 0006 1B78     		ldrb	r3, [r3]
 168 0008 002B     		cmp	r3, #0
 169 000a 04D1     		bne	.L8
 227:Generated_Source\PSoC4/PWM_Red.c ****     {
 228:Generated_Source\PSoC4/PWM_Red.c ****         PWM_Red_Init();
 170              		.loc 1 228 0
 171 000c FFF7FEFF 		bl	PWM_Red_Init
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 8


 229:Generated_Source\PSoC4/PWM_Red.c ****         PWM_Red_initVar = 1u;
 172              		.loc 1 229 0
 173 0010 034B     		ldr	r3, .L9
 174 0012 0122     		movs	r2, #1
 175 0014 1A70     		strb	r2, [r3]
 176              	.L8:
 230:Generated_Source\PSoC4/PWM_Red.c ****     }
 231:Generated_Source\PSoC4/PWM_Red.c **** 
 232:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_Enable();
 177              		.loc 1 232 0
 178 0016 FFF7FEFF 		bl	PWM_Red_Enable
 233:Generated_Source\PSoC4/PWM_Red.c **** }
 179              		.loc 1 233 0
 180 001a C046     		nop
 181 001c BD46     		mov	sp, r7
 182              		@ sp needed
 183 001e 80BD     		pop	{r7, pc}
 184              	.L10:
 185              		.align	2
 186              	.L9:
 187 0020 00000000 		.word	PWM_Red_initVar
 188              		.cfi_endproc
 189              	.LFE3:
 190              		.size	PWM_Red_Start, .-PWM_Red_Start
 191              		.section	.text.PWM_Red_Stop,"ax",%progbits
 192              		.align	2
 193              		.global	PWM_Red_Stop
 194              		.code	16
 195              		.thumb_func
 196              		.type	PWM_Red_Stop, %function
 197              	PWM_Red_Stop:
 198              	.LFB4:
 234:Generated_Source\PSoC4/PWM_Red.c **** 
 235:Generated_Source\PSoC4/PWM_Red.c **** 
 236:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
 237:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_Stop
 238:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
 239:Generated_Source\PSoC4/PWM_Red.c **** *
 240:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
 241:Generated_Source\PSoC4/PWM_Red.c **** *  Disables the PWM_Red.
 242:Generated_Source\PSoC4/PWM_Red.c **** *
 243:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
 244:Generated_Source\PSoC4/PWM_Red.c **** *  None
 245:Generated_Source\PSoC4/PWM_Red.c **** *
 246:Generated_Source\PSoC4/PWM_Red.c **** * Return:
 247:Generated_Source\PSoC4/PWM_Red.c **** *  None
 248:Generated_Source\PSoC4/PWM_Red.c **** *
 249:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
 250:Generated_Source\PSoC4/PWM_Red.c **** void PWM_Red_Stop(void)
 251:Generated_Source\PSoC4/PWM_Red.c **** {
 199              		.loc 1 251 0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 8
 202              		@ frame_needed = 1, uses_anonymous_args = 0
 203 0000 90B5     		push	{r4, r7, lr}
 204              		.cfi_def_cfa_offset 12
 205              		.cfi_offset 4, -12
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 9


 206              		.cfi_offset 7, -8
 207              		.cfi_offset 14, -4
 208 0002 83B0     		sub	sp, sp, #12
 209              		.cfi_def_cfa_offset 24
 210 0004 00AF     		add	r7, sp, #0
 211              		.cfi_def_cfa_register 7
 252:Generated_Source\PSoC4/PWM_Red.c ****     uint8 enableInterrupts;
 253:Generated_Source\PSoC4/PWM_Red.c **** 
 254:Generated_Source\PSoC4/PWM_Red.c ****     enableInterrupts = CyEnterCriticalSection();
 212              		.loc 1 254 0
 213 0006 FC1D     		adds	r4, r7, #7
 214 0008 FFF7FEFF 		bl	CyEnterCriticalSection
 215 000c 0300     		movs	r3, r0
 216 000e 2370     		strb	r3, [r4]
 255:Generated_Source\PSoC4/PWM_Red.c **** 
 256:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_BLOCK_CONTROL_REG &= (uint32)~PWM_Red_MASK;
 217              		.loc 1 256 0
 218 0010 074B     		ldr	r3, .L12
 219 0012 074A     		ldr	r2, .L12
 220 0014 1268     		ldr	r2, [r2]
 221 0016 0221     		movs	r1, #2
 222 0018 8A43     		bics	r2, r1
 223 001a 1A60     		str	r2, [r3]
 257:Generated_Source\PSoC4/PWM_Red.c **** 
 258:Generated_Source\PSoC4/PWM_Red.c ****     CyExitCriticalSection(enableInterrupts);
 224              		.loc 1 258 0
 225 001c FB1D     		adds	r3, r7, #7
 226 001e 1B78     		ldrb	r3, [r3]
 227 0020 1800     		movs	r0, r3
 228 0022 FFF7FEFF 		bl	CyExitCriticalSection
 259:Generated_Source\PSoC4/PWM_Red.c **** }
 229              		.loc 1 259 0
 230 0026 C046     		nop
 231 0028 BD46     		mov	sp, r7
 232 002a 03B0     		add	sp, sp, #12
 233              		@ sp needed
 234 002c 90BD     		pop	{r4, r7, pc}
 235              	.L13:
 236 002e C046     		.align	2
 237              	.L12:
 238 0030 00002040 		.word	1075838976
 239              		.cfi_endproc
 240              	.LFE4:
 241              		.size	PWM_Red_Stop, .-PWM_Red_Stop
 242              		.section	.text.PWM_Red_SetMode,"ax",%progbits
 243              		.align	2
 244              		.global	PWM_Red_SetMode
 245              		.code	16
 246              		.thumb_func
 247              		.type	PWM_Red_SetMode, %function
 248              	PWM_Red_SetMode:
 249              	.LFB5:
 260:Generated_Source\PSoC4/PWM_Red.c **** 
 261:Generated_Source\PSoC4/PWM_Red.c **** 
 262:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
 263:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_SetMode
 264:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 10


 265:Generated_Source\PSoC4/PWM_Red.c **** *
 266:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
 267:Generated_Source\PSoC4/PWM_Red.c **** *  Sets the operation mode of the PWM_Red. This function is used when
 268:Generated_Source\PSoC4/PWM_Red.c **** *  configured as a generic PWM_Red and the actual mode of operation is
 269:Generated_Source\PSoC4/PWM_Red.c **** *  set at runtime. The mode must be set while the component is disabled.
 270:Generated_Source\PSoC4/PWM_Red.c **** *
 271:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
 272:Generated_Source\PSoC4/PWM_Red.c **** *  mode: Mode for the PWM_Red to operate in
 273:Generated_Source\PSoC4/PWM_Red.c **** *   Values:
 274:Generated_Source\PSoC4/PWM_Red.c **** *   - PWM_Red_MODE_TIMER_COMPARE - Timer / Counter with
 275:Generated_Source\PSoC4/PWM_Red.c **** *                                                 compare capability
 276:Generated_Source\PSoC4/PWM_Red.c **** *         - PWM_Red_MODE_TIMER_CAPTURE - Timer / Counter with
 277:Generated_Source\PSoC4/PWM_Red.c **** *                                                 capture capability
 278:Generated_Source\PSoC4/PWM_Red.c **** *         - PWM_Red_MODE_QUAD - Quadrature decoder
 279:Generated_Source\PSoC4/PWM_Red.c **** *         - PWM_Red_MODE_PWM - PWM
 280:Generated_Source\PSoC4/PWM_Red.c **** *         - PWM_Red_MODE_PWM_DT - PWM with dead time
 281:Generated_Source\PSoC4/PWM_Red.c **** *         - PWM_Red_MODE_PWM_PR - PWM with pseudo random capability
 282:Generated_Source\PSoC4/PWM_Red.c **** *
 283:Generated_Source\PSoC4/PWM_Red.c **** * Return:
 284:Generated_Source\PSoC4/PWM_Red.c **** *  None
 285:Generated_Source\PSoC4/PWM_Red.c **** *
 286:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
 287:Generated_Source\PSoC4/PWM_Red.c **** void PWM_Red_SetMode(uint32 mode)
 288:Generated_Source\PSoC4/PWM_Red.c **** {
 250              		.loc 1 288 0
 251              		.cfi_startproc
 252              		@ args = 0, pretend = 0, frame = 16
 253              		@ frame_needed = 1, uses_anonymous_args = 0
 254 0000 90B5     		push	{r4, r7, lr}
 255              		.cfi_def_cfa_offset 12
 256              		.cfi_offset 4, -12
 257              		.cfi_offset 7, -8
 258              		.cfi_offset 14, -4
 259 0002 85B0     		sub	sp, sp, #20
 260              		.cfi_def_cfa_offset 32
 261 0004 00AF     		add	r7, sp, #0
 262              		.cfi_def_cfa_register 7
 263 0006 7860     		str	r0, [r7, #4]
 289:Generated_Source\PSoC4/PWM_Red.c ****     uint8 enableInterrupts;
 290:Generated_Source\PSoC4/PWM_Red.c **** 
 291:Generated_Source\PSoC4/PWM_Red.c ****     enableInterrupts = CyEnterCriticalSection();
 264              		.loc 1 291 0
 265 0008 0F23     		movs	r3, #15
 266 000a FC18     		adds	r4, r7, r3
 267 000c FFF7FEFF 		bl	CyEnterCriticalSection
 268 0010 0300     		movs	r3, r0
 269 0012 2370     		strb	r3, [r4]
 292:Generated_Source\PSoC4/PWM_Red.c **** 
 293:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_CONTROL_REG &= (uint32)~PWM_Red_MODE_MASK;
 270              		.loc 1 293 0
 271 0014 0A4B     		ldr	r3, .L15
 272 0016 0A4A     		ldr	r2, .L15
 273 0018 1268     		ldr	r2, [r2]
 274 001a 0A49     		ldr	r1, .L15+4
 275 001c 0A40     		ands	r2, r1
 276 001e 1A60     		str	r2, [r3]
 294:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_CONTROL_REG |= mode;
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 11


 277              		.loc 1 294 0
 278 0020 074B     		ldr	r3, .L15
 279 0022 074A     		ldr	r2, .L15
 280 0024 1168     		ldr	r1, [r2]
 281 0026 7A68     		ldr	r2, [r7, #4]
 282 0028 0A43     		orrs	r2, r1
 283 002a 1A60     		str	r2, [r3]
 295:Generated_Source\PSoC4/PWM_Red.c **** 
 296:Generated_Source\PSoC4/PWM_Red.c ****     CyExitCriticalSection(enableInterrupts);
 284              		.loc 1 296 0
 285 002c 0F23     		movs	r3, #15
 286 002e FB18     		adds	r3, r7, r3
 287 0030 1B78     		ldrb	r3, [r3]
 288 0032 1800     		movs	r0, r3
 289 0034 FFF7FEFF 		bl	CyExitCriticalSection
 297:Generated_Source\PSoC4/PWM_Red.c **** }
 290              		.loc 1 297 0
 291 0038 C046     		nop
 292 003a BD46     		mov	sp, r7
 293 003c 05B0     		add	sp, sp, #20
 294              		@ sp needed
 295 003e 90BD     		pop	{r4, r7, pc}
 296              	.L16:
 297              		.align	2
 298              	.L15:
 299 0040 40012040 		.word	1075839296
 300 0044 FFFFFFF8 		.word	-117440513
 301              		.cfi_endproc
 302              	.LFE5:
 303              		.size	PWM_Red_SetMode, .-PWM_Red_SetMode
 304              		.section	.text.PWM_Red_SetQDMode,"ax",%progbits
 305              		.align	2
 306              		.global	PWM_Red_SetQDMode
 307              		.code	16
 308              		.thumb_func
 309              		.type	PWM_Red_SetQDMode, %function
 310              	PWM_Red_SetQDMode:
 311              	.LFB6:
 298:Generated_Source\PSoC4/PWM_Red.c **** 
 299:Generated_Source\PSoC4/PWM_Red.c **** 
 300:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
 301:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_SetQDMode
 302:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
 303:Generated_Source\PSoC4/PWM_Red.c **** *
 304:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
 305:Generated_Source\PSoC4/PWM_Red.c **** *  Sets the the Quadrature Decoder to one of the 3 supported modes.
 306:Generated_Source\PSoC4/PWM_Red.c **** *  Its functionality is only applicable to Quadrature Decoder operation.
 307:Generated_Source\PSoC4/PWM_Red.c **** *
 308:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
 309:Generated_Source\PSoC4/PWM_Red.c **** *  qdMode: Quadrature Decoder mode
 310:Generated_Source\PSoC4/PWM_Red.c **** *   Values:
 311:Generated_Source\PSoC4/PWM_Red.c **** *         - PWM_Red_MODE_X1 - Counts on phi 1 rising
 312:Generated_Source\PSoC4/PWM_Red.c **** *         - PWM_Red_MODE_X2 - Counts on both edges of phi1 (2x faster)
 313:Generated_Source\PSoC4/PWM_Red.c **** *         - PWM_Red_MODE_X4 - Counts on both edges of phi1 and phi2
 314:Generated_Source\PSoC4/PWM_Red.c **** *                                        (4x faster)
 315:Generated_Source\PSoC4/PWM_Red.c **** *
 316:Generated_Source\PSoC4/PWM_Red.c **** * Return:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 12


 317:Generated_Source\PSoC4/PWM_Red.c **** *  None
 318:Generated_Source\PSoC4/PWM_Red.c **** *
 319:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
 320:Generated_Source\PSoC4/PWM_Red.c **** void PWM_Red_SetQDMode(uint32 qdMode)
 321:Generated_Source\PSoC4/PWM_Red.c **** {
 312              		.loc 1 321 0
 313              		.cfi_startproc
 314              		@ args = 0, pretend = 0, frame = 16
 315              		@ frame_needed = 1, uses_anonymous_args = 0
 316 0000 90B5     		push	{r4, r7, lr}
 317              		.cfi_def_cfa_offset 12
 318              		.cfi_offset 4, -12
 319              		.cfi_offset 7, -8
 320              		.cfi_offset 14, -4
 321 0002 85B0     		sub	sp, sp, #20
 322              		.cfi_def_cfa_offset 32
 323 0004 00AF     		add	r7, sp, #0
 324              		.cfi_def_cfa_register 7
 325 0006 7860     		str	r0, [r7, #4]
 322:Generated_Source\PSoC4/PWM_Red.c ****     uint8 enableInterrupts;
 323:Generated_Source\PSoC4/PWM_Red.c **** 
 324:Generated_Source\PSoC4/PWM_Red.c ****     enableInterrupts = CyEnterCriticalSection();
 326              		.loc 1 324 0
 327 0008 0F23     		movs	r3, #15
 328 000a FC18     		adds	r4, r7, r3
 329 000c FFF7FEFF 		bl	CyEnterCriticalSection
 330 0010 0300     		movs	r3, r0
 331 0012 2370     		strb	r3, [r4]
 325:Generated_Source\PSoC4/PWM_Red.c **** 
 326:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_CONTROL_REG &= (uint32)~PWM_Red_QUAD_MODE_MASK;
 332              		.loc 1 326 0
 333 0014 0A4B     		ldr	r3, .L18
 334 0016 0A4A     		ldr	r2, .L18
 335 0018 1268     		ldr	r2, [r2]
 336 001a 0A49     		ldr	r1, .L18+4
 337 001c 0A40     		ands	r2, r1
 338 001e 1A60     		str	r2, [r3]
 327:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_CONTROL_REG |= qdMode;
 339              		.loc 1 327 0
 340 0020 074B     		ldr	r3, .L18
 341 0022 074A     		ldr	r2, .L18
 342 0024 1168     		ldr	r1, [r2]
 343 0026 7A68     		ldr	r2, [r7, #4]
 344 0028 0A43     		orrs	r2, r1
 345 002a 1A60     		str	r2, [r3]
 328:Generated_Source\PSoC4/PWM_Red.c **** 
 329:Generated_Source\PSoC4/PWM_Red.c ****     CyExitCriticalSection(enableInterrupts);
 346              		.loc 1 329 0
 347 002c 0F23     		movs	r3, #15
 348 002e FB18     		adds	r3, r7, r3
 349 0030 1B78     		ldrb	r3, [r3]
 350 0032 1800     		movs	r0, r3
 351 0034 FFF7FEFF 		bl	CyExitCriticalSection
 330:Generated_Source\PSoC4/PWM_Red.c **** }
 352              		.loc 1 330 0
 353 0038 C046     		nop
 354 003a BD46     		mov	sp, r7
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 13


 355 003c 05B0     		add	sp, sp, #20
 356              		@ sp needed
 357 003e 90BD     		pop	{r4, r7, pc}
 358              	.L19:
 359              		.align	2
 360              	.L18:
 361 0040 40012040 		.word	1075839296
 362 0044 FFFF8FFF 		.word	-7340033
 363              		.cfi_endproc
 364              	.LFE6:
 365              		.size	PWM_Red_SetQDMode, .-PWM_Red_SetQDMode
 366              		.section	.text.PWM_Red_SetPrescaler,"ax",%progbits
 367              		.align	2
 368              		.global	PWM_Red_SetPrescaler
 369              		.code	16
 370              		.thumb_func
 371              		.type	PWM_Red_SetPrescaler, %function
 372              	PWM_Red_SetPrescaler:
 373              	.LFB7:
 331:Generated_Source\PSoC4/PWM_Red.c **** 
 332:Generated_Source\PSoC4/PWM_Red.c **** 
 333:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
 334:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_SetPrescaler
 335:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
 336:Generated_Source\PSoC4/PWM_Red.c **** *
 337:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
 338:Generated_Source\PSoC4/PWM_Red.c **** *  Sets the prescaler value that is applied to the clock input.  Not applicable
 339:Generated_Source\PSoC4/PWM_Red.c **** *  to a PWM with the dead time mode or Quadrature Decoder mode.
 340:Generated_Source\PSoC4/PWM_Red.c **** *
 341:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
 342:Generated_Source\PSoC4/PWM_Red.c **** *  prescaler: Prescaler divider value
 343:Generated_Source\PSoC4/PWM_Red.c **** *   Values:
 344:Generated_Source\PSoC4/PWM_Red.c **** *         - PWM_Red_PRESCALE_DIVBY1    - Divide by 1 (no prescaling)
 345:Generated_Source\PSoC4/PWM_Red.c **** *         - PWM_Red_PRESCALE_DIVBY2    - Divide by 2
 346:Generated_Source\PSoC4/PWM_Red.c **** *         - PWM_Red_PRESCALE_DIVBY4    - Divide by 4
 347:Generated_Source\PSoC4/PWM_Red.c **** *         - PWM_Red_PRESCALE_DIVBY8    - Divide by 8
 348:Generated_Source\PSoC4/PWM_Red.c **** *         - PWM_Red_PRESCALE_DIVBY16   - Divide by 16
 349:Generated_Source\PSoC4/PWM_Red.c **** *         - PWM_Red_PRESCALE_DIVBY32   - Divide by 32
 350:Generated_Source\PSoC4/PWM_Red.c **** *         - PWM_Red_PRESCALE_DIVBY64   - Divide by 64
 351:Generated_Source\PSoC4/PWM_Red.c **** *         - PWM_Red_PRESCALE_DIVBY128  - Divide by 128
 352:Generated_Source\PSoC4/PWM_Red.c **** *
 353:Generated_Source\PSoC4/PWM_Red.c **** * Return:
 354:Generated_Source\PSoC4/PWM_Red.c **** *  None
 355:Generated_Source\PSoC4/PWM_Red.c **** *
 356:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
 357:Generated_Source\PSoC4/PWM_Red.c **** void PWM_Red_SetPrescaler(uint32 prescaler)
 358:Generated_Source\PSoC4/PWM_Red.c **** {
 374              		.loc 1 358 0
 375              		.cfi_startproc
 376              		@ args = 0, pretend = 0, frame = 16
 377              		@ frame_needed = 1, uses_anonymous_args = 0
 378 0000 90B5     		push	{r4, r7, lr}
 379              		.cfi_def_cfa_offset 12
 380              		.cfi_offset 4, -12
 381              		.cfi_offset 7, -8
 382              		.cfi_offset 14, -4
 383 0002 85B0     		sub	sp, sp, #20
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 14


 384              		.cfi_def_cfa_offset 32
 385 0004 00AF     		add	r7, sp, #0
 386              		.cfi_def_cfa_register 7
 387 0006 7860     		str	r0, [r7, #4]
 359:Generated_Source\PSoC4/PWM_Red.c ****     uint8 enableInterrupts;
 360:Generated_Source\PSoC4/PWM_Red.c **** 
 361:Generated_Source\PSoC4/PWM_Red.c ****     enableInterrupts = CyEnterCriticalSection();
 388              		.loc 1 361 0
 389 0008 0F23     		movs	r3, #15
 390 000a FC18     		adds	r4, r7, r3
 391 000c FFF7FEFF 		bl	CyEnterCriticalSection
 392 0010 0300     		movs	r3, r0
 393 0012 2370     		strb	r3, [r4]
 362:Generated_Source\PSoC4/PWM_Red.c **** 
 363:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_CONTROL_REG &= (uint32)~PWM_Red_PRESCALER_MASK;
 394              		.loc 1 363 0
 395 0014 0A4B     		ldr	r3, .L21
 396 0016 0A4A     		ldr	r2, .L21
 397 0018 1268     		ldr	r2, [r2]
 398 001a 0A49     		ldr	r1, .L21+4
 399 001c 0A40     		ands	r2, r1
 400 001e 1A60     		str	r2, [r3]
 364:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_CONTROL_REG |= prescaler;
 401              		.loc 1 364 0
 402 0020 074B     		ldr	r3, .L21
 403 0022 074A     		ldr	r2, .L21
 404 0024 1168     		ldr	r1, [r2]
 405 0026 7A68     		ldr	r2, [r7, #4]
 406 0028 0A43     		orrs	r2, r1
 407 002a 1A60     		str	r2, [r3]
 365:Generated_Source\PSoC4/PWM_Red.c **** 
 366:Generated_Source\PSoC4/PWM_Red.c ****     CyExitCriticalSection(enableInterrupts);
 408              		.loc 1 366 0
 409 002c 0F23     		movs	r3, #15
 410 002e FB18     		adds	r3, r7, r3
 411 0030 1B78     		ldrb	r3, [r3]
 412 0032 1800     		movs	r0, r3
 413 0034 FFF7FEFF 		bl	CyExitCriticalSection
 367:Generated_Source\PSoC4/PWM_Red.c **** }
 414              		.loc 1 367 0
 415 0038 C046     		nop
 416 003a BD46     		mov	sp, r7
 417 003c 05B0     		add	sp, sp, #20
 418              		@ sp needed
 419 003e 90BD     		pop	{r4, r7, pc}
 420              	.L22:
 421              		.align	2
 422              	.L21:
 423 0040 40012040 		.word	1075839296
 424 0044 FF00FFFF 		.word	-65281
 425              		.cfi_endproc
 426              	.LFE7:
 427              		.size	PWM_Red_SetPrescaler, .-PWM_Red_SetPrescaler
 428              		.section	.text.PWM_Red_SetOneShot,"ax",%progbits
 429              		.align	2
 430              		.global	PWM_Red_SetOneShot
 431              		.code	16
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 15


 432              		.thumb_func
 433              		.type	PWM_Red_SetOneShot, %function
 434              	PWM_Red_SetOneShot:
 435              	.LFB8:
 368:Generated_Source\PSoC4/PWM_Red.c **** 
 369:Generated_Source\PSoC4/PWM_Red.c **** 
 370:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
 371:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_SetOneShot
 372:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
 373:Generated_Source\PSoC4/PWM_Red.c **** *
 374:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
 375:Generated_Source\PSoC4/PWM_Red.c **** *  Writes the register that controls whether the PWM_Red runs
 376:Generated_Source\PSoC4/PWM_Red.c **** *  continuously or stops when terminal count is reached.  By default the
 377:Generated_Source\PSoC4/PWM_Red.c **** *  PWM_Red operates in the continuous mode.
 378:Generated_Source\PSoC4/PWM_Red.c **** *
 379:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
 380:Generated_Source\PSoC4/PWM_Red.c **** *  oneShotEnable
 381:Generated_Source\PSoC4/PWM_Red.c **** *   Values:
 382:Generated_Source\PSoC4/PWM_Red.c **** *     - 0 - Continuous
 383:Generated_Source\PSoC4/PWM_Red.c **** *     - 1 - Enable One Shot
 384:Generated_Source\PSoC4/PWM_Red.c **** *
 385:Generated_Source\PSoC4/PWM_Red.c **** * Return:
 386:Generated_Source\PSoC4/PWM_Red.c **** *  None
 387:Generated_Source\PSoC4/PWM_Red.c **** *
 388:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
 389:Generated_Source\PSoC4/PWM_Red.c **** void PWM_Red_SetOneShot(uint32 oneShotEnable)
 390:Generated_Source\PSoC4/PWM_Red.c **** {
 436              		.loc 1 390 0
 437              		.cfi_startproc
 438              		@ args = 0, pretend = 0, frame = 16
 439              		@ frame_needed = 1, uses_anonymous_args = 0
 440 0000 90B5     		push	{r4, r7, lr}
 441              		.cfi_def_cfa_offset 12
 442              		.cfi_offset 4, -12
 443              		.cfi_offset 7, -8
 444              		.cfi_offset 14, -4
 445 0002 85B0     		sub	sp, sp, #20
 446              		.cfi_def_cfa_offset 32
 447 0004 00AF     		add	r7, sp, #0
 448              		.cfi_def_cfa_register 7
 449 0006 7860     		str	r0, [r7, #4]
 391:Generated_Source\PSoC4/PWM_Red.c ****     uint8 enableInterrupts;
 392:Generated_Source\PSoC4/PWM_Red.c **** 
 393:Generated_Source\PSoC4/PWM_Red.c ****     enableInterrupts = CyEnterCriticalSection();
 450              		.loc 1 393 0
 451 0008 0F23     		movs	r3, #15
 452 000a FC18     		adds	r4, r7, r3
 453 000c FFF7FEFF 		bl	CyEnterCriticalSection
 454 0010 0300     		movs	r3, r0
 455 0012 2370     		strb	r3, [r4]
 394:Generated_Source\PSoC4/PWM_Red.c **** 
 395:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_CONTROL_REG &= (uint32)~PWM_Red_ONESHOT_MASK;
 456              		.loc 1 395 0
 457 0014 0C4B     		ldr	r3, .L24
 458 0016 0C4A     		ldr	r2, .L24
 459 0018 1268     		ldr	r2, [r2]
 460 001a 0C49     		ldr	r1, .L24+4
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 16


 461 001c 0A40     		ands	r2, r1
 462 001e 1A60     		str	r2, [r3]
 396:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_CONTROL_REG |= ((uint32)((oneShotEnable & PWM_Red_1BIT_MASK) <<
 463              		.loc 1 396 0
 464 0020 094B     		ldr	r3, .L24
 465 0022 094A     		ldr	r2, .L24
 466 0024 1168     		ldr	r1, [r2]
 467 0026 7A68     		ldr	r2, [r7, #4]
 468 0028 9004     		lsls	r0, r2, #18
 469 002a 8022     		movs	r2, #128
 470 002c D202     		lsls	r2, r2, #11
 471 002e 0240     		ands	r2, r0
 472 0030 0A43     		orrs	r2, r1
 473 0032 1A60     		str	r2, [r3]
 397:Generated_Source\PSoC4/PWM_Red.c ****                                                                PWM_Red_ONESHOT_SHIFT));
 398:Generated_Source\PSoC4/PWM_Red.c **** 
 399:Generated_Source\PSoC4/PWM_Red.c ****     CyExitCriticalSection(enableInterrupts);
 474              		.loc 1 399 0
 475 0034 0F23     		movs	r3, #15
 476 0036 FB18     		adds	r3, r7, r3
 477 0038 1B78     		ldrb	r3, [r3]
 478 003a 1800     		movs	r0, r3
 479 003c FFF7FEFF 		bl	CyExitCriticalSection
 400:Generated_Source\PSoC4/PWM_Red.c **** }
 480              		.loc 1 400 0
 481 0040 C046     		nop
 482 0042 BD46     		mov	sp, r7
 483 0044 05B0     		add	sp, sp, #20
 484              		@ sp needed
 485 0046 90BD     		pop	{r4, r7, pc}
 486              	.L25:
 487              		.align	2
 488              	.L24:
 489 0048 40012040 		.word	1075839296
 490 004c FFFFFBFF 		.word	-262145
 491              		.cfi_endproc
 492              	.LFE8:
 493              		.size	PWM_Red_SetOneShot, .-PWM_Red_SetOneShot
 494              		.section	.text.PWM_Red_SetPWMMode,"ax",%progbits
 495              		.align	2
 496              		.global	PWM_Red_SetPWMMode
 497              		.code	16
 498              		.thumb_func
 499              		.type	PWM_Red_SetPWMMode, %function
 500              	PWM_Red_SetPWMMode:
 501              	.LFB9:
 401:Generated_Source\PSoC4/PWM_Red.c **** 
 402:Generated_Source\PSoC4/PWM_Red.c **** 
 403:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
 404:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_SetPWMMode
 405:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
 406:Generated_Source\PSoC4/PWM_Red.c **** *
 407:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
 408:Generated_Source\PSoC4/PWM_Red.c **** *  Writes the control register that determines what mode of operation the PWM
 409:Generated_Source\PSoC4/PWM_Red.c **** *  output lines are driven in.  There is a setting for what to do on a
 410:Generated_Source\PSoC4/PWM_Red.c **** *  comparison match (CC_MATCH), on an overflow (OVERFLOW) and on an underflow
 411:Generated_Source\PSoC4/PWM_Red.c **** *  (UNDERFLOW).  The value for each of the three must be ORed together to form
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 17


 412:Generated_Source\PSoC4/PWM_Red.c **** *  the mode.
 413:Generated_Source\PSoC4/PWM_Red.c **** *
 414:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
 415:Generated_Source\PSoC4/PWM_Red.c **** *  modeMask: A combination of three mode settings.  Mask must include a value
 416:Generated_Source\PSoC4/PWM_Red.c **** *  for each of the three or use one of the preconfigured PWM settings.
 417:Generated_Source\PSoC4/PWM_Red.c **** *   Values:
 418:Generated_Source\PSoC4/PWM_Red.c **** *     - CC_MATCH_SET        - Set on comparison match
 419:Generated_Source\PSoC4/PWM_Red.c **** *     - CC_MATCH_CLEAR      - Clear on comparison match
 420:Generated_Source\PSoC4/PWM_Red.c **** *     - CC_MATCH_INVERT     - Invert on comparison match
 421:Generated_Source\PSoC4/PWM_Red.c **** *     - CC_MATCH_NO_CHANGE  - No change on comparison match
 422:Generated_Source\PSoC4/PWM_Red.c **** *     - OVERLOW_SET         - Set on overflow
 423:Generated_Source\PSoC4/PWM_Red.c **** *     - OVERLOW_CLEAR       - Clear on  overflow
 424:Generated_Source\PSoC4/PWM_Red.c **** *     - OVERLOW_INVERT      - Invert on overflow
 425:Generated_Source\PSoC4/PWM_Red.c **** *     - OVERLOW_NO_CHANGE   - No change on overflow
 426:Generated_Source\PSoC4/PWM_Red.c **** *     - UNDERFLOW_SET       - Set on underflow
 427:Generated_Source\PSoC4/PWM_Red.c **** *     - UNDERFLOW_CLEAR     - Clear on underflow
 428:Generated_Source\PSoC4/PWM_Red.c **** *     - UNDERFLOW_INVERT    - Invert on underflow
 429:Generated_Source\PSoC4/PWM_Red.c **** *     - UNDERFLOW_NO_CHANGE - No change on underflow
 430:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_MODE_LEFT       - Setting for left aligned PWM.  Should be combined
 431:Generated_Source\PSoC4/PWM_Red.c **** *                             with up counting mode
 432:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_MODE_RIGHT      - Setting for right aligned PWM.  Should be combined
 433:Generated_Source\PSoC4/PWM_Red.c **** *                             with down counting mode
 434:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_MODE_CENTER     - Setting for center aligned PWM.  Should be
 435:Generated_Source\PSoC4/PWM_Red.c **** *                             combined with up/down 0 mode
 436:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_MODE_ASYM       - Setting for asymmetric PWM.  Should be combined
 437:Generated_Source\PSoC4/PWM_Red.c **** *                             with up/down 1 mode
 438:Generated_Source\PSoC4/PWM_Red.c **** *
 439:Generated_Source\PSoC4/PWM_Red.c **** * Return:
 440:Generated_Source\PSoC4/PWM_Red.c **** *  None
 441:Generated_Source\PSoC4/PWM_Red.c **** *
 442:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
 443:Generated_Source\PSoC4/PWM_Red.c **** void PWM_Red_SetPWMMode(uint32 modeMask)
 444:Generated_Source\PSoC4/PWM_Red.c **** {
 502              		.loc 1 444 0
 503              		.cfi_startproc
 504              		@ args = 0, pretend = 0, frame = 8
 505              		@ frame_needed = 1, uses_anonymous_args = 0
 506 0000 80B5     		push	{r7, lr}
 507              		.cfi_def_cfa_offset 8
 508              		.cfi_offset 7, -8
 509              		.cfi_offset 14, -4
 510 0002 82B0     		sub	sp, sp, #8
 511              		.cfi_def_cfa_offset 16
 512 0004 00AF     		add	r7, sp, #0
 513              		.cfi_def_cfa_register 7
 514 0006 7860     		str	r0, [r7, #4]
 445:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_TRIG_CONTROL2_REG = (modeMask & PWM_Red_6BIT_MASK);
 515              		.loc 1 445 0
 516 0008 044B     		ldr	r3, .L27
 517 000a 7A68     		ldr	r2, [r7, #4]
 518 000c 3F21     		movs	r1, #63
 519 000e 0A40     		ands	r2, r1
 520 0010 1A60     		str	r2, [r3]
 446:Generated_Source\PSoC4/PWM_Red.c **** }
 521              		.loc 1 446 0
 522 0012 C046     		nop
 523 0014 BD46     		mov	sp, r7
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 18


 524 0016 02B0     		add	sp, sp, #8
 525              		@ sp needed
 526 0018 80BD     		pop	{r7, pc}
 527              	.L28:
 528 001a C046     		.align	2
 529              	.L27:
 530 001c 68012040 		.word	1075839336
 531              		.cfi_endproc
 532              	.LFE9:
 533              		.size	PWM_Red_SetPWMMode, .-PWM_Red_SetPWMMode
 534              		.section	.text.PWM_Red_SetPWMSyncKill,"ax",%progbits
 535              		.align	2
 536              		.global	PWM_Red_SetPWMSyncKill
 537              		.code	16
 538              		.thumb_func
 539              		.type	PWM_Red_SetPWMSyncKill, %function
 540              	PWM_Red_SetPWMSyncKill:
 541              	.LFB10:
 447:Generated_Source\PSoC4/PWM_Red.c **** 
 448:Generated_Source\PSoC4/PWM_Red.c **** 
 449:Generated_Source\PSoC4/PWM_Red.c **** 
 450:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
 451:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_SetPWMSyncKill
 452:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
 453:Generated_Source\PSoC4/PWM_Red.c **** *
 454:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
 455:Generated_Source\PSoC4/PWM_Red.c **** *  Writes the register that controls whether the PWM kill signal (stop input)
 456:Generated_Source\PSoC4/PWM_Red.c **** *  causes asynchronous or synchronous kill operation.  By default the kill
 457:Generated_Source\PSoC4/PWM_Red.c **** *  operation is asynchronous.  This functionality is only applicable to the PWM
 458:Generated_Source\PSoC4/PWM_Red.c **** *  and PWM with dead time modes.
 459:Generated_Source\PSoC4/PWM_Red.c **** *
 460:Generated_Source\PSoC4/PWM_Red.c **** *  For Synchronous mode the kill signal disables both the line and line_n
 461:Generated_Source\PSoC4/PWM_Red.c **** *  signals until the next terminal count.
 462:Generated_Source\PSoC4/PWM_Red.c **** *
 463:Generated_Source\PSoC4/PWM_Red.c **** *  For Asynchronous mode the kill signal disables both the line and line_n
 464:Generated_Source\PSoC4/PWM_Red.c **** *  signals when the kill signal is present.  This mode should only be used
 465:Generated_Source\PSoC4/PWM_Red.c **** *  when the kill signal (stop input) is configured in the pass through mode
 466:Generated_Source\PSoC4/PWM_Red.c **** *  (Level sensitive signal).
 467:Generated_Source\PSoC4/PWM_Red.c **** 
 468:Generated_Source\PSoC4/PWM_Red.c **** *
 469:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
 470:Generated_Source\PSoC4/PWM_Red.c **** *  syncKillEnable
 471:Generated_Source\PSoC4/PWM_Red.c **** *   Values:
 472:Generated_Source\PSoC4/PWM_Red.c **** *     - 0 - Asynchronous
 473:Generated_Source\PSoC4/PWM_Red.c **** *     - 1 - Synchronous
 474:Generated_Source\PSoC4/PWM_Red.c **** *
 475:Generated_Source\PSoC4/PWM_Red.c **** * Return:
 476:Generated_Source\PSoC4/PWM_Red.c **** *  None
 477:Generated_Source\PSoC4/PWM_Red.c **** *
 478:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
 479:Generated_Source\PSoC4/PWM_Red.c **** void PWM_Red_SetPWMSyncKill(uint32 syncKillEnable)
 480:Generated_Source\PSoC4/PWM_Red.c **** {
 542              		.loc 1 480 0
 543              		.cfi_startproc
 544              		@ args = 0, pretend = 0, frame = 16
 545              		@ frame_needed = 1, uses_anonymous_args = 0
 546 0000 90B5     		push	{r4, r7, lr}
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 19


 547              		.cfi_def_cfa_offset 12
 548              		.cfi_offset 4, -12
 549              		.cfi_offset 7, -8
 550              		.cfi_offset 14, -4
 551 0002 85B0     		sub	sp, sp, #20
 552              		.cfi_def_cfa_offset 32
 553 0004 00AF     		add	r7, sp, #0
 554              		.cfi_def_cfa_register 7
 555 0006 7860     		str	r0, [r7, #4]
 481:Generated_Source\PSoC4/PWM_Red.c ****     uint8 enableInterrupts;
 482:Generated_Source\PSoC4/PWM_Red.c **** 
 483:Generated_Source\PSoC4/PWM_Red.c ****     enableInterrupts = CyEnterCriticalSection();
 556              		.loc 1 483 0
 557 0008 0F23     		movs	r3, #15
 558 000a FC18     		adds	r4, r7, r3
 559 000c FFF7FEFF 		bl	CyEnterCriticalSection
 560 0010 0300     		movs	r3, r0
 561 0012 2370     		strb	r3, [r4]
 484:Generated_Source\PSoC4/PWM_Red.c **** 
 485:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_CONTROL_REG &= (uint32)~PWM_Red_PWM_SYNC_KILL_MASK;
 562              		.loc 1 485 0
 563 0014 0C4B     		ldr	r3, .L30
 564 0016 0C4A     		ldr	r2, .L30
 565 0018 1268     		ldr	r2, [r2]
 566 001a 0421     		movs	r1, #4
 567 001c 8A43     		bics	r2, r1
 568 001e 1A60     		str	r2, [r3]
 486:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_CONTROL_REG |= ((uint32)((syncKillEnable & PWM_Red_1BIT_MASK)  <<
 569              		.loc 1 486 0
 570 0020 094B     		ldr	r3, .L30
 571 0022 094A     		ldr	r2, .L30
 572 0024 1168     		ldr	r1, [r2]
 573 0026 7A68     		ldr	r2, [r7, #4]
 574 0028 9200     		lsls	r2, r2, #2
 575 002a 0420     		movs	r0, #4
 576 002c 0240     		ands	r2, r0
 577 002e 0A43     		orrs	r2, r1
 578 0030 1A60     		str	r2, [r3]
 487:Generated_Source\PSoC4/PWM_Red.c ****                                                PWM_Red_PWM_SYNC_KILL_SHIFT));
 488:Generated_Source\PSoC4/PWM_Red.c **** 
 489:Generated_Source\PSoC4/PWM_Red.c ****     CyExitCriticalSection(enableInterrupts);
 579              		.loc 1 489 0
 580 0032 0F23     		movs	r3, #15
 581 0034 FB18     		adds	r3, r7, r3
 582 0036 1B78     		ldrb	r3, [r3]
 583 0038 1800     		movs	r0, r3
 584 003a FFF7FEFF 		bl	CyExitCriticalSection
 490:Generated_Source\PSoC4/PWM_Red.c **** }
 585              		.loc 1 490 0
 586 003e C046     		nop
 587 0040 BD46     		mov	sp, r7
 588 0042 05B0     		add	sp, sp, #20
 589              		@ sp needed
 590 0044 90BD     		pop	{r4, r7, pc}
 591              	.L31:
 592 0046 C046     		.align	2
 593              	.L30:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 20


 594 0048 40012040 		.word	1075839296
 595              		.cfi_endproc
 596              	.LFE10:
 597              		.size	PWM_Red_SetPWMSyncKill, .-PWM_Red_SetPWMSyncKill
 598              		.section	.text.PWM_Red_SetPWMStopOnKill,"ax",%progbits
 599              		.align	2
 600              		.global	PWM_Red_SetPWMStopOnKill
 601              		.code	16
 602              		.thumb_func
 603              		.type	PWM_Red_SetPWMStopOnKill, %function
 604              	PWM_Red_SetPWMStopOnKill:
 605              	.LFB11:
 491:Generated_Source\PSoC4/PWM_Red.c **** 
 492:Generated_Source\PSoC4/PWM_Red.c **** 
 493:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
 494:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_SetPWMStopOnKill
 495:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
 496:Generated_Source\PSoC4/PWM_Red.c **** *
 497:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
 498:Generated_Source\PSoC4/PWM_Red.c **** *  Writes the register that controls whether the PWM kill signal (stop input)
 499:Generated_Source\PSoC4/PWM_Red.c **** *  causes the PWM counter to stop.  By default the kill operation does not stop
 500:Generated_Source\PSoC4/PWM_Red.c **** *  the counter.  This functionality is only applicable to the three PWM modes.
 501:Generated_Source\PSoC4/PWM_Red.c **** *
 502:Generated_Source\PSoC4/PWM_Red.c **** *
 503:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
 504:Generated_Source\PSoC4/PWM_Red.c **** *  stopOnKillEnable
 505:Generated_Source\PSoC4/PWM_Red.c **** *   Values:
 506:Generated_Source\PSoC4/PWM_Red.c **** *     - 0 - Don't stop
 507:Generated_Source\PSoC4/PWM_Red.c **** *     - 1 - Stop
 508:Generated_Source\PSoC4/PWM_Red.c **** *
 509:Generated_Source\PSoC4/PWM_Red.c **** * Return:
 510:Generated_Source\PSoC4/PWM_Red.c **** *  None
 511:Generated_Source\PSoC4/PWM_Red.c **** *
 512:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
 513:Generated_Source\PSoC4/PWM_Red.c **** void PWM_Red_SetPWMStopOnKill(uint32 stopOnKillEnable)
 514:Generated_Source\PSoC4/PWM_Red.c **** {
 606              		.loc 1 514 0
 607              		.cfi_startproc
 608              		@ args = 0, pretend = 0, frame = 16
 609              		@ frame_needed = 1, uses_anonymous_args = 0
 610 0000 90B5     		push	{r4, r7, lr}
 611              		.cfi_def_cfa_offset 12
 612              		.cfi_offset 4, -12
 613              		.cfi_offset 7, -8
 614              		.cfi_offset 14, -4
 615 0002 85B0     		sub	sp, sp, #20
 616              		.cfi_def_cfa_offset 32
 617 0004 00AF     		add	r7, sp, #0
 618              		.cfi_def_cfa_register 7
 619 0006 7860     		str	r0, [r7, #4]
 515:Generated_Source\PSoC4/PWM_Red.c ****     uint8 enableInterrupts;
 516:Generated_Source\PSoC4/PWM_Red.c **** 
 517:Generated_Source\PSoC4/PWM_Red.c ****     enableInterrupts = CyEnterCriticalSection();
 620              		.loc 1 517 0
 621 0008 0F23     		movs	r3, #15
 622 000a FC18     		adds	r4, r7, r3
 623 000c FFF7FEFF 		bl	CyEnterCriticalSection
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 21


 624 0010 0300     		movs	r3, r0
 625 0012 2370     		strb	r3, [r4]
 518:Generated_Source\PSoC4/PWM_Red.c **** 
 519:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_CONTROL_REG &= (uint32)~PWM_Red_PWM_STOP_KILL_MASK;
 626              		.loc 1 519 0
 627 0014 0C4B     		ldr	r3, .L33
 628 0016 0C4A     		ldr	r2, .L33
 629 0018 1268     		ldr	r2, [r2]
 630 001a 0821     		movs	r1, #8
 631 001c 8A43     		bics	r2, r1
 632 001e 1A60     		str	r2, [r3]
 520:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_CONTROL_REG |= ((uint32)((stopOnKillEnable & PWM_Red_1BIT_MASK)  <<
 633              		.loc 1 520 0
 634 0020 094B     		ldr	r3, .L33
 635 0022 094A     		ldr	r2, .L33
 636 0024 1168     		ldr	r1, [r2]
 637 0026 7A68     		ldr	r2, [r7, #4]
 638 0028 D200     		lsls	r2, r2, #3
 639 002a 0820     		movs	r0, #8
 640 002c 0240     		ands	r2, r0
 641 002e 0A43     		orrs	r2, r1
 642 0030 1A60     		str	r2, [r3]
 521:Generated_Source\PSoC4/PWM_Red.c ****                                                          PWM_Red_PWM_STOP_KILL_SHIFT));
 522:Generated_Source\PSoC4/PWM_Red.c **** 
 523:Generated_Source\PSoC4/PWM_Red.c ****     CyExitCriticalSection(enableInterrupts);
 643              		.loc 1 523 0
 644 0032 0F23     		movs	r3, #15
 645 0034 FB18     		adds	r3, r7, r3
 646 0036 1B78     		ldrb	r3, [r3]
 647 0038 1800     		movs	r0, r3
 648 003a FFF7FEFF 		bl	CyExitCriticalSection
 524:Generated_Source\PSoC4/PWM_Red.c **** }
 649              		.loc 1 524 0
 650 003e C046     		nop
 651 0040 BD46     		mov	sp, r7
 652 0042 05B0     		add	sp, sp, #20
 653              		@ sp needed
 654 0044 90BD     		pop	{r4, r7, pc}
 655              	.L34:
 656 0046 C046     		.align	2
 657              	.L33:
 658 0048 40012040 		.word	1075839296
 659              		.cfi_endproc
 660              	.LFE11:
 661              		.size	PWM_Red_SetPWMStopOnKill, .-PWM_Red_SetPWMStopOnKill
 662              		.section	.text.PWM_Red_SetPWMDeadTime,"ax",%progbits
 663              		.align	2
 664              		.global	PWM_Red_SetPWMDeadTime
 665              		.code	16
 666              		.thumb_func
 667              		.type	PWM_Red_SetPWMDeadTime, %function
 668              	PWM_Red_SetPWMDeadTime:
 669              	.LFB12:
 525:Generated_Source\PSoC4/PWM_Red.c **** 
 526:Generated_Source\PSoC4/PWM_Red.c **** 
 527:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
 528:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_SetPWMDeadTime
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 22


 529:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
 530:Generated_Source\PSoC4/PWM_Red.c **** *
 531:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
 532:Generated_Source\PSoC4/PWM_Red.c **** *  Writes the dead time control value.  This value delays the rising edge of
 533:Generated_Source\PSoC4/PWM_Red.c **** *  both the line and line_n signals the designated number of cycles resulting
 534:Generated_Source\PSoC4/PWM_Red.c **** *  in both signals being inactive for that many cycles.  This functionality is
 535:Generated_Source\PSoC4/PWM_Red.c **** *  only applicable to the PWM in the dead time mode.
 536:Generated_Source\PSoC4/PWM_Red.c **** 
 537:Generated_Source\PSoC4/PWM_Red.c **** *
 538:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
 539:Generated_Source\PSoC4/PWM_Red.c **** *  Dead time to insert
 540:Generated_Source\PSoC4/PWM_Red.c **** *   Values: 0 to 255
 541:Generated_Source\PSoC4/PWM_Red.c **** *
 542:Generated_Source\PSoC4/PWM_Red.c **** * Return:
 543:Generated_Source\PSoC4/PWM_Red.c **** *  None
 544:Generated_Source\PSoC4/PWM_Red.c **** *
 545:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
 546:Generated_Source\PSoC4/PWM_Red.c **** void PWM_Red_SetPWMDeadTime(uint32 deadTime)
 547:Generated_Source\PSoC4/PWM_Red.c **** {
 670              		.loc 1 547 0
 671              		.cfi_startproc
 672              		@ args = 0, pretend = 0, frame = 16
 673              		@ frame_needed = 1, uses_anonymous_args = 0
 674 0000 90B5     		push	{r4, r7, lr}
 675              		.cfi_def_cfa_offset 12
 676              		.cfi_offset 4, -12
 677              		.cfi_offset 7, -8
 678              		.cfi_offset 14, -4
 679 0002 85B0     		sub	sp, sp, #20
 680              		.cfi_def_cfa_offset 32
 681 0004 00AF     		add	r7, sp, #0
 682              		.cfi_def_cfa_register 7
 683 0006 7860     		str	r0, [r7, #4]
 548:Generated_Source\PSoC4/PWM_Red.c ****     uint8 enableInterrupts;
 549:Generated_Source\PSoC4/PWM_Red.c **** 
 550:Generated_Source\PSoC4/PWM_Red.c ****     enableInterrupts = CyEnterCriticalSection();
 684              		.loc 1 550 0
 685 0008 0F23     		movs	r3, #15
 686 000a FC18     		adds	r4, r7, r3
 687 000c FFF7FEFF 		bl	CyEnterCriticalSection
 688 0010 0300     		movs	r3, r0
 689 0012 2370     		strb	r3, [r4]
 551:Generated_Source\PSoC4/PWM_Red.c **** 
 552:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_CONTROL_REG &= (uint32)~PWM_Red_PRESCALER_MASK;
 690              		.loc 1 552 0
 691 0014 0C4B     		ldr	r3, .L36
 692 0016 0C4A     		ldr	r2, .L36
 693 0018 1268     		ldr	r2, [r2]
 694 001a 0C49     		ldr	r1, .L36+4
 695 001c 0A40     		ands	r2, r1
 696 001e 1A60     		str	r2, [r3]
 553:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_CONTROL_REG |= ((uint32)((deadTime & PWM_Red_8BIT_MASK) <<
 697              		.loc 1 553 0
 698 0020 094B     		ldr	r3, .L36
 699 0022 094A     		ldr	r2, .L36
 700 0024 1168     		ldr	r1, [r2]
 701 0026 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 23


 702 0028 1202     		lsls	r2, r2, #8
 703 002a 1204     		lsls	r2, r2, #16
 704 002c 120C     		lsrs	r2, r2, #16
 705 002e 0A43     		orrs	r2, r1
 706 0030 1A60     		str	r2, [r3]
 554:Generated_Source\PSoC4/PWM_Red.c ****                                                           PWM_Red_PRESCALER_SHIFT));
 555:Generated_Source\PSoC4/PWM_Red.c **** 
 556:Generated_Source\PSoC4/PWM_Red.c ****     CyExitCriticalSection(enableInterrupts);
 707              		.loc 1 556 0
 708 0032 0F23     		movs	r3, #15
 709 0034 FB18     		adds	r3, r7, r3
 710 0036 1B78     		ldrb	r3, [r3]
 711 0038 1800     		movs	r0, r3
 712 003a FFF7FEFF 		bl	CyExitCriticalSection
 557:Generated_Source\PSoC4/PWM_Red.c **** }
 713              		.loc 1 557 0
 714 003e C046     		nop
 715 0040 BD46     		mov	sp, r7
 716 0042 05B0     		add	sp, sp, #20
 717              		@ sp needed
 718 0044 90BD     		pop	{r4, r7, pc}
 719              	.L37:
 720 0046 C046     		.align	2
 721              	.L36:
 722 0048 40012040 		.word	1075839296
 723 004c FF00FFFF 		.word	-65281
 724              		.cfi_endproc
 725              	.LFE12:
 726              		.size	PWM_Red_SetPWMDeadTime, .-PWM_Red_SetPWMDeadTime
 727              		.section	.text.PWM_Red_SetPWMInvert,"ax",%progbits
 728              		.align	2
 729              		.global	PWM_Red_SetPWMInvert
 730              		.code	16
 731              		.thumb_func
 732              		.type	PWM_Red_SetPWMInvert, %function
 733              	PWM_Red_SetPWMInvert:
 734              	.LFB13:
 558:Generated_Source\PSoC4/PWM_Red.c **** 
 559:Generated_Source\PSoC4/PWM_Red.c **** 
 560:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
 561:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_SetPWMInvert
 562:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
 563:Generated_Source\PSoC4/PWM_Red.c **** *
 564:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
 565:Generated_Source\PSoC4/PWM_Red.c **** *  Writes the bits that control whether the line and line_n outputs are
 566:Generated_Source\PSoC4/PWM_Red.c **** *  inverted from their normal output values.  This functionality is only
 567:Generated_Source\PSoC4/PWM_Red.c **** *  applicable to the three PWM modes.
 568:Generated_Source\PSoC4/PWM_Red.c **** *
 569:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
 570:Generated_Source\PSoC4/PWM_Red.c **** *  mask: Mask of outputs to invert.
 571:Generated_Source\PSoC4/PWM_Red.c **** *   Values:
 572:Generated_Source\PSoC4/PWM_Red.c **** *         - PWM_Red_INVERT_LINE   - Inverts the line output
 573:Generated_Source\PSoC4/PWM_Red.c **** *         - PWM_Red_INVERT_LINE_N - Inverts the line_n output
 574:Generated_Source\PSoC4/PWM_Red.c **** *
 575:Generated_Source\PSoC4/PWM_Red.c **** * Return:
 576:Generated_Source\PSoC4/PWM_Red.c **** *  None
 577:Generated_Source\PSoC4/PWM_Red.c **** *
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 24


 578:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
 579:Generated_Source\PSoC4/PWM_Red.c **** void PWM_Red_SetPWMInvert(uint32 mask)
 580:Generated_Source\PSoC4/PWM_Red.c **** {
 735              		.loc 1 580 0
 736              		.cfi_startproc
 737              		@ args = 0, pretend = 0, frame = 16
 738              		@ frame_needed = 1, uses_anonymous_args = 0
 739 0000 90B5     		push	{r4, r7, lr}
 740              		.cfi_def_cfa_offset 12
 741              		.cfi_offset 4, -12
 742              		.cfi_offset 7, -8
 743              		.cfi_offset 14, -4
 744 0002 85B0     		sub	sp, sp, #20
 745              		.cfi_def_cfa_offset 32
 746 0004 00AF     		add	r7, sp, #0
 747              		.cfi_def_cfa_register 7
 748 0006 7860     		str	r0, [r7, #4]
 581:Generated_Source\PSoC4/PWM_Red.c ****     uint8 enableInterrupts;
 582:Generated_Source\PSoC4/PWM_Red.c **** 
 583:Generated_Source\PSoC4/PWM_Red.c ****     enableInterrupts = CyEnterCriticalSection();
 749              		.loc 1 583 0
 750 0008 0F23     		movs	r3, #15
 751 000a FC18     		adds	r4, r7, r3
 752 000c FFF7FEFF 		bl	CyEnterCriticalSection
 753 0010 0300     		movs	r3, r0
 754 0012 2370     		strb	r3, [r4]
 584:Generated_Source\PSoC4/PWM_Red.c **** 
 585:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_CONTROL_REG &= (uint32)~PWM_Red_INV_OUT_MASK;
 755              		.loc 1 585 0
 756 0014 0A4B     		ldr	r3, .L39
 757 0016 0A4A     		ldr	r2, .L39
 758 0018 1268     		ldr	r2, [r2]
 759 001a 0A49     		ldr	r1, .L39+4
 760 001c 0A40     		ands	r2, r1
 761 001e 1A60     		str	r2, [r3]
 586:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_CONTROL_REG |= mask;
 762              		.loc 1 586 0
 763 0020 074B     		ldr	r3, .L39
 764 0022 074A     		ldr	r2, .L39
 765 0024 1168     		ldr	r1, [r2]
 766 0026 7A68     		ldr	r2, [r7, #4]
 767 0028 0A43     		orrs	r2, r1
 768 002a 1A60     		str	r2, [r3]
 587:Generated_Source\PSoC4/PWM_Red.c **** 
 588:Generated_Source\PSoC4/PWM_Red.c ****     CyExitCriticalSection(enableInterrupts);
 769              		.loc 1 588 0
 770 002c 0F23     		movs	r3, #15
 771 002e FB18     		adds	r3, r7, r3
 772 0030 1B78     		ldrb	r3, [r3]
 773 0032 1800     		movs	r0, r3
 774 0034 FFF7FEFF 		bl	CyExitCriticalSection
 589:Generated_Source\PSoC4/PWM_Red.c **** }
 775              		.loc 1 589 0
 776 0038 C046     		nop
 777 003a BD46     		mov	sp, r7
 778 003c 05B0     		add	sp, sp, #20
 779              		@ sp needed
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 25


 780 003e 90BD     		pop	{r4, r7, pc}
 781              	.L40:
 782              		.align	2
 783              	.L39:
 784 0040 40012040 		.word	1075839296
 785 0044 FFFFCFFF 		.word	-3145729
 786              		.cfi_endproc
 787              	.LFE13:
 788              		.size	PWM_Red_SetPWMInvert, .-PWM_Red_SetPWMInvert
 789              		.section	.text.PWM_Red_WriteCounter,"ax",%progbits
 790              		.align	2
 791              		.global	PWM_Red_WriteCounter
 792              		.code	16
 793              		.thumb_func
 794              		.type	PWM_Red_WriteCounter, %function
 795              	PWM_Red_WriteCounter:
 796              	.LFB14:
 590:Generated_Source\PSoC4/PWM_Red.c **** 
 591:Generated_Source\PSoC4/PWM_Red.c **** 
 592:Generated_Source\PSoC4/PWM_Red.c **** 
 593:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
 594:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_WriteCounter
 595:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
 596:Generated_Source\PSoC4/PWM_Red.c **** *
 597:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
 598:Generated_Source\PSoC4/PWM_Red.c **** *  Writes a new 16bit counter value directly into the counter register, thus
 599:Generated_Source\PSoC4/PWM_Red.c **** *  setting the counter (not the period) to the value written. It is not
 600:Generated_Source\PSoC4/PWM_Red.c **** *  advised to write to this field when the counter is running.
 601:Generated_Source\PSoC4/PWM_Red.c **** *
 602:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
 603:Generated_Source\PSoC4/PWM_Red.c **** *  count: value to write
 604:Generated_Source\PSoC4/PWM_Red.c **** *
 605:Generated_Source\PSoC4/PWM_Red.c **** * Return:
 606:Generated_Source\PSoC4/PWM_Red.c **** *  None
 607:Generated_Source\PSoC4/PWM_Red.c **** *
 608:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
 609:Generated_Source\PSoC4/PWM_Red.c **** void PWM_Red_WriteCounter(uint32 count)
 610:Generated_Source\PSoC4/PWM_Red.c **** {
 797              		.loc 1 610 0
 798              		.cfi_startproc
 799              		@ args = 0, pretend = 0, frame = 8
 800              		@ frame_needed = 1, uses_anonymous_args = 0
 801 0000 80B5     		push	{r7, lr}
 802              		.cfi_def_cfa_offset 8
 803              		.cfi_offset 7, -8
 804              		.cfi_offset 14, -4
 805 0002 82B0     		sub	sp, sp, #8
 806              		.cfi_def_cfa_offset 16
 807 0004 00AF     		add	r7, sp, #0
 808              		.cfi_def_cfa_register 7
 809 0006 7860     		str	r0, [r7, #4]
 611:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_COUNTER_REG = (count & PWM_Red_16BIT_MASK);
 810              		.loc 1 611 0
 811 0008 044B     		ldr	r3, .L42
 812 000a 7A68     		ldr	r2, [r7, #4]
 813 000c 1204     		lsls	r2, r2, #16
 814 000e 120C     		lsrs	r2, r2, #16
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 26


 815 0010 1A60     		str	r2, [r3]
 612:Generated_Source\PSoC4/PWM_Red.c **** }
 816              		.loc 1 612 0
 817 0012 C046     		nop
 818 0014 BD46     		mov	sp, r7
 819 0016 02B0     		add	sp, sp, #8
 820              		@ sp needed
 821 0018 80BD     		pop	{r7, pc}
 822              	.L43:
 823 001a C046     		.align	2
 824              	.L42:
 825 001c 48012040 		.word	1075839304
 826              		.cfi_endproc
 827              	.LFE14:
 828              		.size	PWM_Red_WriteCounter, .-PWM_Red_WriteCounter
 829              		.section	.text.PWM_Red_ReadCounter,"ax",%progbits
 830              		.align	2
 831              		.global	PWM_Red_ReadCounter
 832              		.code	16
 833              		.thumb_func
 834              		.type	PWM_Red_ReadCounter, %function
 835              	PWM_Red_ReadCounter:
 836              	.LFB15:
 613:Generated_Source\PSoC4/PWM_Red.c **** 
 614:Generated_Source\PSoC4/PWM_Red.c **** 
 615:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
 616:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_ReadCounter
 617:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
 618:Generated_Source\PSoC4/PWM_Red.c **** *
 619:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
 620:Generated_Source\PSoC4/PWM_Red.c **** *  Reads the current counter value.
 621:Generated_Source\PSoC4/PWM_Red.c **** *
 622:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
 623:Generated_Source\PSoC4/PWM_Red.c **** *  None
 624:Generated_Source\PSoC4/PWM_Red.c **** *
 625:Generated_Source\PSoC4/PWM_Red.c **** * Return:
 626:Generated_Source\PSoC4/PWM_Red.c **** *  Current counter value
 627:Generated_Source\PSoC4/PWM_Red.c **** *
 628:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
 629:Generated_Source\PSoC4/PWM_Red.c **** uint32 PWM_Red_ReadCounter(void)
 630:Generated_Source\PSoC4/PWM_Red.c **** {
 837              		.loc 1 630 0
 838              		.cfi_startproc
 839              		@ args = 0, pretend = 0, frame = 0
 840              		@ frame_needed = 1, uses_anonymous_args = 0
 841 0000 80B5     		push	{r7, lr}
 842              		.cfi_def_cfa_offset 8
 843              		.cfi_offset 7, -8
 844              		.cfi_offset 14, -4
 845 0002 00AF     		add	r7, sp, #0
 846              		.cfi_def_cfa_register 7
 631:Generated_Source\PSoC4/PWM_Red.c ****     return (PWM_Red_COUNTER_REG & PWM_Red_16BIT_MASK);
 847              		.loc 1 631 0
 848 0004 034B     		ldr	r3, .L46
 849 0006 1B68     		ldr	r3, [r3]
 850 0008 1B04     		lsls	r3, r3, #16
 851 000a 1B0C     		lsrs	r3, r3, #16
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 27


 632:Generated_Source\PSoC4/PWM_Red.c **** }
 852              		.loc 1 632 0
 853 000c 1800     		movs	r0, r3
 854 000e BD46     		mov	sp, r7
 855              		@ sp needed
 856 0010 80BD     		pop	{r7, pc}
 857              	.L47:
 858 0012 C046     		.align	2
 859              	.L46:
 860 0014 48012040 		.word	1075839304
 861              		.cfi_endproc
 862              	.LFE15:
 863              		.size	PWM_Red_ReadCounter, .-PWM_Red_ReadCounter
 864              		.section	.text.PWM_Red_SetCounterMode,"ax",%progbits
 865              		.align	2
 866              		.global	PWM_Red_SetCounterMode
 867              		.code	16
 868              		.thumb_func
 869              		.type	PWM_Red_SetCounterMode, %function
 870              	PWM_Red_SetCounterMode:
 871              	.LFB16:
 633:Generated_Source\PSoC4/PWM_Red.c **** 
 634:Generated_Source\PSoC4/PWM_Red.c **** 
 635:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
 636:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_SetCounterMode
 637:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
 638:Generated_Source\PSoC4/PWM_Red.c **** *
 639:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
 640:Generated_Source\PSoC4/PWM_Red.c **** *  Sets the counter mode.  Applicable to all modes except Quadrature Decoder
 641:Generated_Source\PSoC4/PWM_Red.c **** *  and the PWM with a pseudo random output.
 642:Generated_Source\PSoC4/PWM_Red.c **** *
 643:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
 644:Generated_Source\PSoC4/PWM_Red.c **** *  counterMode: Enumerated counter type values
 645:Generated_Source\PSoC4/PWM_Red.c **** *   Values:
 646:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_COUNT_UP       - Counts up
 647:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_COUNT_DOWN     - Counts down
 648:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_COUNT_UPDOWN0  - Counts up and down. Terminal count
 649:Generated_Source\PSoC4/PWM_Red.c **** *                                         generated when counter reaches 0
 650:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_COUNT_UPDOWN1  - Counts up and down. Terminal count
 651:Generated_Source\PSoC4/PWM_Red.c **** *                                         generated both when counter reaches 0
 652:Generated_Source\PSoC4/PWM_Red.c **** *                                         and period
 653:Generated_Source\PSoC4/PWM_Red.c **** *
 654:Generated_Source\PSoC4/PWM_Red.c **** * Return:
 655:Generated_Source\PSoC4/PWM_Red.c **** *  None
 656:Generated_Source\PSoC4/PWM_Red.c **** *
 657:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
 658:Generated_Source\PSoC4/PWM_Red.c **** void PWM_Red_SetCounterMode(uint32 counterMode)
 659:Generated_Source\PSoC4/PWM_Red.c **** {
 872              		.loc 1 659 0
 873              		.cfi_startproc
 874              		@ args = 0, pretend = 0, frame = 16
 875              		@ frame_needed = 1, uses_anonymous_args = 0
 876 0000 90B5     		push	{r4, r7, lr}
 877              		.cfi_def_cfa_offset 12
 878              		.cfi_offset 4, -12
 879              		.cfi_offset 7, -8
 880              		.cfi_offset 14, -4
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 28


 881 0002 85B0     		sub	sp, sp, #20
 882              		.cfi_def_cfa_offset 32
 883 0004 00AF     		add	r7, sp, #0
 884              		.cfi_def_cfa_register 7
 885 0006 7860     		str	r0, [r7, #4]
 660:Generated_Source\PSoC4/PWM_Red.c ****     uint8 enableInterrupts;
 661:Generated_Source\PSoC4/PWM_Red.c **** 
 662:Generated_Source\PSoC4/PWM_Red.c ****     enableInterrupts = CyEnterCriticalSection();
 886              		.loc 1 662 0
 887 0008 0F23     		movs	r3, #15
 888 000a FC18     		adds	r4, r7, r3
 889 000c FFF7FEFF 		bl	CyEnterCriticalSection
 890 0010 0300     		movs	r3, r0
 891 0012 2370     		strb	r3, [r4]
 663:Generated_Source\PSoC4/PWM_Red.c **** 
 664:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_CONTROL_REG &= (uint32)~PWM_Red_UPDOWN_MASK;
 892              		.loc 1 664 0
 893 0014 0A4B     		ldr	r3, .L49
 894 0016 0A4A     		ldr	r2, .L49
 895 0018 1268     		ldr	r2, [r2]
 896 001a 0A49     		ldr	r1, .L49+4
 897 001c 0A40     		ands	r2, r1
 898 001e 1A60     		str	r2, [r3]
 665:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_CONTROL_REG |= counterMode;
 899              		.loc 1 665 0
 900 0020 074B     		ldr	r3, .L49
 901 0022 074A     		ldr	r2, .L49
 902 0024 1168     		ldr	r1, [r2]
 903 0026 7A68     		ldr	r2, [r7, #4]
 904 0028 0A43     		orrs	r2, r1
 905 002a 1A60     		str	r2, [r3]
 666:Generated_Source\PSoC4/PWM_Red.c **** 
 667:Generated_Source\PSoC4/PWM_Red.c ****     CyExitCriticalSection(enableInterrupts);
 906              		.loc 1 667 0
 907 002c 0F23     		movs	r3, #15
 908 002e FB18     		adds	r3, r7, r3
 909 0030 1B78     		ldrb	r3, [r3]
 910 0032 1800     		movs	r0, r3
 911 0034 FFF7FEFF 		bl	CyExitCriticalSection
 668:Generated_Source\PSoC4/PWM_Red.c **** }
 912              		.loc 1 668 0
 913 0038 C046     		nop
 914 003a BD46     		mov	sp, r7
 915 003c 05B0     		add	sp, sp, #20
 916              		@ sp needed
 917 003e 90BD     		pop	{r4, r7, pc}
 918              	.L50:
 919              		.align	2
 920              	.L49:
 921 0040 40012040 		.word	1075839296
 922 0044 FFFFFCFF 		.word	-196609
 923              		.cfi_endproc
 924              	.LFE16:
 925              		.size	PWM_Red_SetCounterMode, .-PWM_Red_SetCounterMode
 926              		.section	.text.PWM_Red_WritePeriod,"ax",%progbits
 927              		.align	2
 928              		.global	PWM_Red_WritePeriod
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 29


 929              		.code	16
 930              		.thumb_func
 931              		.type	PWM_Red_WritePeriod, %function
 932              	PWM_Red_WritePeriod:
 933              	.LFB17:
 669:Generated_Source\PSoC4/PWM_Red.c **** 
 670:Generated_Source\PSoC4/PWM_Red.c **** 
 671:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
 672:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_WritePeriod
 673:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
 674:Generated_Source\PSoC4/PWM_Red.c **** *
 675:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
 676:Generated_Source\PSoC4/PWM_Red.c **** *  Writes the 16 bit period register with the new period value.
 677:Generated_Source\PSoC4/PWM_Red.c **** *  To cause the counter to count for N cycles this register should be written
 678:Generated_Source\PSoC4/PWM_Red.c **** *  with N-1 (counts from 0 to period inclusive).
 679:Generated_Source\PSoC4/PWM_Red.c **** *
 680:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
 681:Generated_Source\PSoC4/PWM_Red.c **** *  period: Period value
 682:Generated_Source\PSoC4/PWM_Red.c **** *
 683:Generated_Source\PSoC4/PWM_Red.c **** * Return:
 684:Generated_Source\PSoC4/PWM_Red.c **** *  None
 685:Generated_Source\PSoC4/PWM_Red.c **** *
 686:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
 687:Generated_Source\PSoC4/PWM_Red.c **** void PWM_Red_WritePeriod(uint32 period)
 688:Generated_Source\PSoC4/PWM_Red.c **** {
 934              		.loc 1 688 0
 935              		.cfi_startproc
 936              		@ args = 0, pretend = 0, frame = 8
 937              		@ frame_needed = 1, uses_anonymous_args = 0
 938 0000 80B5     		push	{r7, lr}
 939              		.cfi_def_cfa_offset 8
 940              		.cfi_offset 7, -8
 941              		.cfi_offset 14, -4
 942 0002 82B0     		sub	sp, sp, #8
 943              		.cfi_def_cfa_offset 16
 944 0004 00AF     		add	r7, sp, #0
 945              		.cfi_def_cfa_register 7
 946 0006 7860     		str	r0, [r7, #4]
 689:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_PERIOD_REG = (period & PWM_Red_16BIT_MASK);
 947              		.loc 1 689 0
 948 0008 044B     		ldr	r3, .L52
 949 000a 7A68     		ldr	r2, [r7, #4]
 950 000c 1204     		lsls	r2, r2, #16
 951 000e 120C     		lsrs	r2, r2, #16
 952 0010 1A60     		str	r2, [r3]
 690:Generated_Source\PSoC4/PWM_Red.c **** }
 953              		.loc 1 690 0
 954 0012 C046     		nop
 955 0014 BD46     		mov	sp, r7
 956 0016 02B0     		add	sp, sp, #8
 957              		@ sp needed
 958 0018 80BD     		pop	{r7, pc}
 959              	.L53:
 960 001a C046     		.align	2
 961              	.L52:
 962 001c 54012040 		.word	1075839316
 963              		.cfi_endproc
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 30


 964              	.LFE17:
 965              		.size	PWM_Red_WritePeriod, .-PWM_Red_WritePeriod
 966              		.section	.text.PWM_Red_ReadPeriod,"ax",%progbits
 967              		.align	2
 968              		.global	PWM_Red_ReadPeriod
 969              		.code	16
 970              		.thumb_func
 971              		.type	PWM_Red_ReadPeriod, %function
 972              	PWM_Red_ReadPeriod:
 973              	.LFB18:
 691:Generated_Source\PSoC4/PWM_Red.c **** 
 692:Generated_Source\PSoC4/PWM_Red.c **** 
 693:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
 694:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_ReadPeriod
 695:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
 696:Generated_Source\PSoC4/PWM_Red.c **** *
 697:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
 698:Generated_Source\PSoC4/PWM_Red.c **** *  Reads the 16 bit period register.
 699:Generated_Source\PSoC4/PWM_Red.c **** *
 700:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
 701:Generated_Source\PSoC4/PWM_Red.c **** *  None
 702:Generated_Source\PSoC4/PWM_Red.c **** *
 703:Generated_Source\PSoC4/PWM_Red.c **** * Return:
 704:Generated_Source\PSoC4/PWM_Red.c **** *  Period value
 705:Generated_Source\PSoC4/PWM_Red.c **** *
 706:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
 707:Generated_Source\PSoC4/PWM_Red.c **** uint32 PWM_Red_ReadPeriod(void)
 708:Generated_Source\PSoC4/PWM_Red.c **** {
 974              		.loc 1 708 0
 975              		.cfi_startproc
 976              		@ args = 0, pretend = 0, frame = 0
 977              		@ frame_needed = 1, uses_anonymous_args = 0
 978 0000 80B5     		push	{r7, lr}
 979              		.cfi_def_cfa_offset 8
 980              		.cfi_offset 7, -8
 981              		.cfi_offset 14, -4
 982 0002 00AF     		add	r7, sp, #0
 983              		.cfi_def_cfa_register 7
 709:Generated_Source\PSoC4/PWM_Red.c ****     return (PWM_Red_PERIOD_REG & PWM_Red_16BIT_MASK);
 984              		.loc 1 709 0
 985 0004 034B     		ldr	r3, .L56
 986 0006 1B68     		ldr	r3, [r3]
 987 0008 1B04     		lsls	r3, r3, #16
 988 000a 1B0C     		lsrs	r3, r3, #16
 710:Generated_Source\PSoC4/PWM_Red.c **** }
 989              		.loc 1 710 0
 990 000c 1800     		movs	r0, r3
 991 000e BD46     		mov	sp, r7
 992              		@ sp needed
 993 0010 80BD     		pop	{r7, pc}
 994              	.L57:
 995 0012 C046     		.align	2
 996              	.L56:
 997 0014 54012040 		.word	1075839316
 998              		.cfi_endproc
 999              	.LFE18:
 1000              		.size	PWM_Red_ReadPeriod, .-PWM_Red_ReadPeriod
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 31


 1001              		.section	.text.PWM_Red_SetCompareSwap,"ax",%progbits
 1002              		.align	2
 1003              		.global	PWM_Red_SetCompareSwap
 1004              		.code	16
 1005              		.thumb_func
 1006              		.type	PWM_Red_SetCompareSwap, %function
 1007              	PWM_Red_SetCompareSwap:
 1008              	.LFB19:
 711:Generated_Source\PSoC4/PWM_Red.c **** 
 712:Generated_Source\PSoC4/PWM_Red.c **** 
 713:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
 714:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_SetCompareSwap
 715:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
 716:Generated_Source\PSoC4/PWM_Red.c **** *
 717:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
 718:Generated_Source\PSoC4/PWM_Red.c **** *  Writes the register that controls whether the compare registers are
 719:Generated_Source\PSoC4/PWM_Red.c **** *  swapped. When enabled in the Timer/Counter mode(without capture) the swap
 720:Generated_Source\PSoC4/PWM_Red.c **** *  occurs at a TC event. In the PWM mode the swap occurs at the next TC event
 721:Generated_Source\PSoC4/PWM_Red.c **** *  following a hardware switch event.
 722:Generated_Source\PSoC4/PWM_Red.c **** *
 723:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
 724:Generated_Source\PSoC4/PWM_Red.c **** *  swapEnable
 725:Generated_Source\PSoC4/PWM_Red.c **** *   Values:
 726:Generated_Source\PSoC4/PWM_Red.c **** *     - 0 - Disable swap
 727:Generated_Source\PSoC4/PWM_Red.c **** *     - 1 - Enable swap
 728:Generated_Source\PSoC4/PWM_Red.c **** *
 729:Generated_Source\PSoC4/PWM_Red.c **** * Return:
 730:Generated_Source\PSoC4/PWM_Red.c **** *  None
 731:Generated_Source\PSoC4/PWM_Red.c **** *
 732:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
 733:Generated_Source\PSoC4/PWM_Red.c **** void PWM_Red_SetCompareSwap(uint32 swapEnable)
 734:Generated_Source\PSoC4/PWM_Red.c **** {
 1009              		.loc 1 734 0
 1010              		.cfi_startproc
 1011              		@ args = 0, pretend = 0, frame = 16
 1012              		@ frame_needed = 1, uses_anonymous_args = 0
 1013 0000 90B5     		push	{r4, r7, lr}
 1014              		.cfi_def_cfa_offset 12
 1015              		.cfi_offset 4, -12
 1016              		.cfi_offset 7, -8
 1017              		.cfi_offset 14, -4
 1018 0002 85B0     		sub	sp, sp, #20
 1019              		.cfi_def_cfa_offset 32
 1020 0004 00AF     		add	r7, sp, #0
 1021              		.cfi_def_cfa_register 7
 1022 0006 7860     		str	r0, [r7, #4]
 735:Generated_Source\PSoC4/PWM_Red.c ****     uint8 enableInterrupts;
 736:Generated_Source\PSoC4/PWM_Red.c **** 
 737:Generated_Source\PSoC4/PWM_Red.c ****     enableInterrupts = CyEnterCriticalSection();
 1023              		.loc 1 737 0
 1024 0008 0F23     		movs	r3, #15
 1025 000a FC18     		adds	r4, r7, r3
 1026 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1027 0010 0300     		movs	r3, r0
 1028 0012 2370     		strb	r3, [r4]
 738:Generated_Source\PSoC4/PWM_Red.c **** 
 739:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_CONTROL_REG &= (uint32)~PWM_Red_RELOAD_CC_MASK;
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 32


 1029              		.loc 1 739 0
 1030 0014 0B4B     		ldr	r3, .L59
 1031 0016 0B4A     		ldr	r2, .L59
 1032 0018 1268     		ldr	r2, [r2]
 1033 001a 0121     		movs	r1, #1
 1034 001c 8A43     		bics	r2, r1
 1035 001e 1A60     		str	r2, [r3]
 740:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_CONTROL_REG |= (swapEnable & PWM_Red_1BIT_MASK);
 1036              		.loc 1 740 0
 1037 0020 084B     		ldr	r3, .L59
 1038 0022 084A     		ldr	r2, .L59
 1039 0024 1168     		ldr	r1, [r2]
 1040 0026 7A68     		ldr	r2, [r7, #4]
 1041 0028 0120     		movs	r0, #1
 1042 002a 0240     		ands	r2, r0
 1043 002c 0A43     		orrs	r2, r1
 1044 002e 1A60     		str	r2, [r3]
 741:Generated_Source\PSoC4/PWM_Red.c **** 
 742:Generated_Source\PSoC4/PWM_Red.c ****     CyExitCriticalSection(enableInterrupts);
 1045              		.loc 1 742 0
 1046 0030 0F23     		movs	r3, #15
 1047 0032 FB18     		adds	r3, r7, r3
 1048 0034 1B78     		ldrb	r3, [r3]
 1049 0036 1800     		movs	r0, r3
 1050 0038 FFF7FEFF 		bl	CyExitCriticalSection
 743:Generated_Source\PSoC4/PWM_Red.c **** }
 1051              		.loc 1 743 0
 1052 003c C046     		nop
 1053 003e BD46     		mov	sp, r7
 1054 0040 05B0     		add	sp, sp, #20
 1055              		@ sp needed
 1056 0042 90BD     		pop	{r4, r7, pc}
 1057              	.L60:
 1058              		.align	2
 1059              	.L59:
 1060 0044 40012040 		.word	1075839296
 1061              		.cfi_endproc
 1062              	.LFE19:
 1063              		.size	PWM_Red_SetCompareSwap, .-PWM_Red_SetCompareSwap
 1064              		.section	.text.PWM_Red_WritePeriodBuf,"ax",%progbits
 1065              		.align	2
 1066              		.global	PWM_Red_WritePeriodBuf
 1067              		.code	16
 1068              		.thumb_func
 1069              		.type	PWM_Red_WritePeriodBuf, %function
 1070              	PWM_Red_WritePeriodBuf:
 1071              	.LFB20:
 744:Generated_Source\PSoC4/PWM_Red.c **** 
 745:Generated_Source\PSoC4/PWM_Red.c **** 
 746:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
 747:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_WritePeriodBuf
 748:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
 749:Generated_Source\PSoC4/PWM_Red.c **** *
 750:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
 751:Generated_Source\PSoC4/PWM_Red.c **** *  Writes the 16 bit period buf register with the new period value.
 752:Generated_Source\PSoC4/PWM_Red.c **** *
 753:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 33


 754:Generated_Source\PSoC4/PWM_Red.c **** *  periodBuf: Period value
 755:Generated_Source\PSoC4/PWM_Red.c **** *
 756:Generated_Source\PSoC4/PWM_Red.c **** * Return:
 757:Generated_Source\PSoC4/PWM_Red.c **** *  None
 758:Generated_Source\PSoC4/PWM_Red.c **** *
 759:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
 760:Generated_Source\PSoC4/PWM_Red.c **** void PWM_Red_WritePeriodBuf(uint32 periodBuf)
 761:Generated_Source\PSoC4/PWM_Red.c **** {
 1072              		.loc 1 761 0
 1073              		.cfi_startproc
 1074              		@ args = 0, pretend = 0, frame = 8
 1075              		@ frame_needed = 1, uses_anonymous_args = 0
 1076 0000 80B5     		push	{r7, lr}
 1077              		.cfi_def_cfa_offset 8
 1078              		.cfi_offset 7, -8
 1079              		.cfi_offset 14, -4
 1080 0002 82B0     		sub	sp, sp, #8
 1081              		.cfi_def_cfa_offset 16
 1082 0004 00AF     		add	r7, sp, #0
 1083              		.cfi_def_cfa_register 7
 1084 0006 7860     		str	r0, [r7, #4]
 762:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_PERIOD_BUF_REG = (periodBuf & PWM_Red_16BIT_MASK);
 1085              		.loc 1 762 0
 1086 0008 044B     		ldr	r3, .L62
 1087 000a 7A68     		ldr	r2, [r7, #4]
 1088 000c 1204     		lsls	r2, r2, #16
 1089 000e 120C     		lsrs	r2, r2, #16
 1090 0010 1A60     		str	r2, [r3]
 763:Generated_Source\PSoC4/PWM_Red.c **** }
 1091              		.loc 1 763 0
 1092 0012 C046     		nop
 1093 0014 BD46     		mov	sp, r7
 1094 0016 02B0     		add	sp, sp, #8
 1095              		@ sp needed
 1096 0018 80BD     		pop	{r7, pc}
 1097              	.L63:
 1098 001a C046     		.align	2
 1099              	.L62:
 1100 001c 58012040 		.word	1075839320
 1101              		.cfi_endproc
 1102              	.LFE20:
 1103              		.size	PWM_Red_WritePeriodBuf, .-PWM_Red_WritePeriodBuf
 1104              		.section	.text.PWM_Red_ReadPeriodBuf,"ax",%progbits
 1105              		.align	2
 1106              		.global	PWM_Red_ReadPeriodBuf
 1107              		.code	16
 1108              		.thumb_func
 1109              		.type	PWM_Red_ReadPeriodBuf, %function
 1110              	PWM_Red_ReadPeriodBuf:
 1111              	.LFB21:
 764:Generated_Source\PSoC4/PWM_Red.c **** 
 765:Generated_Source\PSoC4/PWM_Red.c **** 
 766:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
 767:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_ReadPeriodBuf
 768:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
 769:Generated_Source\PSoC4/PWM_Red.c **** *
 770:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 34


 771:Generated_Source\PSoC4/PWM_Red.c **** *  Reads the 16 bit period buf register.
 772:Generated_Source\PSoC4/PWM_Red.c **** *
 773:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
 774:Generated_Source\PSoC4/PWM_Red.c **** *  None
 775:Generated_Source\PSoC4/PWM_Red.c **** *
 776:Generated_Source\PSoC4/PWM_Red.c **** * Return:
 777:Generated_Source\PSoC4/PWM_Red.c **** *  Period value
 778:Generated_Source\PSoC4/PWM_Red.c **** *
 779:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
 780:Generated_Source\PSoC4/PWM_Red.c **** uint32 PWM_Red_ReadPeriodBuf(void)
 781:Generated_Source\PSoC4/PWM_Red.c **** {
 1112              		.loc 1 781 0
 1113              		.cfi_startproc
 1114              		@ args = 0, pretend = 0, frame = 0
 1115              		@ frame_needed = 1, uses_anonymous_args = 0
 1116 0000 80B5     		push	{r7, lr}
 1117              		.cfi_def_cfa_offset 8
 1118              		.cfi_offset 7, -8
 1119              		.cfi_offset 14, -4
 1120 0002 00AF     		add	r7, sp, #0
 1121              		.cfi_def_cfa_register 7
 782:Generated_Source\PSoC4/PWM_Red.c ****     return (PWM_Red_PERIOD_BUF_REG & PWM_Red_16BIT_MASK);
 1122              		.loc 1 782 0
 1123 0004 034B     		ldr	r3, .L66
 1124 0006 1B68     		ldr	r3, [r3]
 1125 0008 1B04     		lsls	r3, r3, #16
 1126 000a 1B0C     		lsrs	r3, r3, #16
 783:Generated_Source\PSoC4/PWM_Red.c **** }
 1127              		.loc 1 783 0
 1128 000c 1800     		movs	r0, r3
 1129 000e BD46     		mov	sp, r7
 1130              		@ sp needed
 1131 0010 80BD     		pop	{r7, pc}
 1132              	.L67:
 1133 0012 C046     		.align	2
 1134              	.L66:
 1135 0014 58012040 		.word	1075839320
 1136              		.cfi_endproc
 1137              	.LFE21:
 1138              		.size	PWM_Red_ReadPeriodBuf, .-PWM_Red_ReadPeriodBuf
 1139              		.section	.text.PWM_Red_SetPeriodSwap,"ax",%progbits
 1140              		.align	2
 1141              		.global	PWM_Red_SetPeriodSwap
 1142              		.code	16
 1143              		.thumb_func
 1144              		.type	PWM_Red_SetPeriodSwap, %function
 1145              	PWM_Red_SetPeriodSwap:
 1146              	.LFB22:
 784:Generated_Source\PSoC4/PWM_Red.c **** 
 785:Generated_Source\PSoC4/PWM_Red.c **** 
 786:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
 787:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_SetPeriodSwap
 788:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
 789:Generated_Source\PSoC4/PWM_Red.c **** *
 790:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
 791:Generated_Source\PSoC4/PWM_Red.c **** *  Writes the register that controls whether the period registers are
 792:Generated_Source\PSoC4/PWM_Red.c **** *  swapped. When enabled in Timer/Counter mode the swap occurs at a TC event.
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 35


 793:Generated_Source\PSoC4/PWM_Red.c **** *  In the PWM mode the swap occurs at the next TC event following a hardware
 794:Generated_Source\PSoC4/PWM_Red.c **** *  switch event.
 795:Generated_Source\PSoC4/PWM_Red.c **** *
 796:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
 797:Generated_Source\PSoC4/PWM_Red.c **** *  swapEnable
 798:Generated_Source\PSoC4/PWM_Red.c **** *   Values:
 799:Generated_Source\PSoC4/PWM_Red.c **** *     - 0 - Disable swap
 800:Generated_Source\PSoC4/PWM_Red.c **** *     - 1 - Enable swap
 801:Generated_Source\PSoC4/PWM_Red.c **** *
 802:Generated_Source\PSoC4/PWM_Red.c **** * Return:
 803:Generated_Source\PSoC4/PWM_Red.c **** *  None
 804:Generated_Source\PSoC4/PWM_Red.c **** *
 805:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
 806:Generated_Source\PSoC4/PWM_Red.c **** void PWM_Red_SetPeriodSwap(uint32 swapEnable)
 807:Generated_Source\PSoC4/PWM_Red.c **** {
 1147              		.loc 1 807 0
 1148              		.cfi_startproc
 1149              		@ args = 0, pretend = 0, frame = 16
 1150              		@ frame_needed = 1, uses_anonymous_args = 0
 1151 0000 90B5     		push	{r4, r7, lr}
 1152              		.cfi_def_cfa_offset 12
 1153              		.cfi_offset 4, -12
 1154              		.cfi_offset 7, -8
 1155              		.cfi_offset 14, -4
 1156 0002 85B0     		sub	sp, sp, #20
 1157              		.cfi_def_cfa_offset 32
 1158 0004 00AF     		add	r7, sp, #0
 1159              		.cfi_def_cfa_register 7
 1160 0006 7860     		str	r0, [r7, #4]
 808:Generated_Source\PSoC4/PWM_Red.c ****     uint8 enableInterrupts;
 809:Generated_Source\PSoC4/PWM_Red.c **** 
 810:Generated_Source\PSoC4/PWM_Red.c ****     enableInterrupts = CyEnterCriticalSection();
 1161              		.loc 1 810 0
 1162 0008 0F23     		movs	r3, #15
 1163 000a FC18     		adds	r4, r7, r3
 1164 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1165 0010 0300     		movs	r3, r0
 1166 0012 2370     		strb	r3, [r4]
 811:Generated_Source\PSoC4/PWM_Red.c **** 
 812:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_CONTROL_REG &= (uint32)~PWM_Red_RELOAD_PERIOD_MASK;
 1167              		.loc 1 812 0
 1168 0014 0C4B     		ldr	r3, .L69
 1169 0016 0C4A     		ldr	r2, .L69
 1170 0018 1268     		ldr	r2, [r2]
 1171 001a 0221     		movs	r1, #2
 1172 001c 8A43     		bics	r2, r1
 1173 001e 1A60     		str	r2, [r3]
 813:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_CONTROL_REG |= ((uint32)((swapEnable & PWM_Red_1BIT_MASK) <<
 1174              		.loc 1 813 0
 1175 0020 094B     		ldr	r3, .L69
 1176 0022 094A     		ldr	r2, .L69
 1177 0024 1168     		ldr	r1, [r2]
 1178 0026 7A68     		ldr	r2, [r7, #4]
 1179 0028 5200     		lsls	r2, r2, #1
 1180 002a 0220     		movs	r0, #2
 1181 002c 0240     		ands	r2, r0
 1182 002e 0A43     		orrs	r2, r1
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 36


 1183 0030 1A60     		str	r2, [r3]
 814:Generated_Source\PSoC4/PWM_Red.c ****                                                             PWM_Red_RELOAD_PERIOD_SHIFT));
 815:Generated_Source\PSoC4/PWM_Red.c **** 
 816:Generated_Source\PSoC4/PWM_Red.c ****     CyExitCriticalSection(enableInterrupts);
 1184              		.loc 1 816 0
 1185 0032 0F23     		movs	r3, #15
 1186 0034 FB18     		adds	r3, r7, r3
 1187 0036 1B78     		ldrb	r3, [r3]
 1188 0038 1800     		movs	r0, r3
 1189 003a FFF7FEFF 		bl	CyExitCriticalSection
 817:Generated_Source\PSoC4/PWM_Red.c **** }
 1190              		.loc 1 817 0
 1191 003e C046     		nop
 1192 0040 BD46     		mov	sp, r7
 1193 0042 05B0     		add	sp, sp, #20
 1194              		@ sp needed
 1195 0044 90BD     		pop	{r4, r7, pc}
 1196              	.L70:
 1197 0046 C046     		.align	2
 1198              	.L69:
 1199 0048 40012040 		.word	1075839296
 1200              		.cfi_endproc
 1201              	.LFE22:
 1202              		.size	PWM_Red_SetPeriodSwap, .-PWM_Red_SetPeriodSwap
 1203              		.section	.text.PWM_Red_WriteCompare,"ax",%progbits
 1204              		.align	2
 1205              		.global	PWM_Red_WriteCompare
 1206              		.code	16
 1207              		.thumb_func
 1208              		.type	PWM_Red_WriteCompare, %function
 1209              	PWM_Red_WriteCompare:
 1210              	.LFB23:
 818:Generated_Source\PSoC4/PWM_Red.c **** 
 819:Generated_Source\PSoC4/PWM_Red.c **** 
 820:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
 821:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_WriteCompare
 822:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
 823:Generated_Source\PSoC4/PWM_Red.c **** *
 824:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
 825:Generated_Source\PSoC4/PWM_Red.c **** *  Writes the 16 bit compare register with the new compare value. Not
 826:Generated_Source\PSoC4/PWM_Red.c **** *  applicable for Timer/Counter with Capture or in Quadrature Decoder modes.
 827:Generated_Source\PSoC4/PWM_Red.c **** *
 828:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
 829:Generated_Source\PSoC4/PWM_Red.c **** *  compare: Compare value
 830:Generated_Source\PSoC4/PWM_Red.c **** *
 831:Generated_Source\PSoC4/PWM_Red.c **** * Return:
 832:Generated_Source\PSoC4/PWM_Red.c **** *  None
 833:Generated_Source\PSoC4/PWM_Red.c **** *
 834:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
 835:Generated_Source\PSoC4/PWM_Red.c **** void PWM_Red_WriteCompare(uint32 compare)
 836:Generated_Source\PSoC4/PWM_Red.c **** {
 1211              		.loc 1 836 0
 1212              		.cfi_startproc
 1213              		@ args = 0, pretend = 0, frame = 8
 1214              		@ frame_needed = 1, uses_anonymous_args = 0
 1215 0000 80B5     		push	{r7, lr}
 1216              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 37


 1217              		.cfi_offset 7, -8
 1218              		.cfi_offset 14, -4
 1219 0002 82B0     		sub	sp, sp, #8
 1220              		.cfi_def_cfa_offset 16
 1221 0004 00AF     		add	r7, sp, #0
 1222              		.cfi_def_cfa_register 7
 1223 0006 7860     		str	r0, [r7, #4]
 837:Generated_Source\PSoC4/PWM_Red.c ****     #if (PWM_Red_CY_TCPWM_4000)
 838:Generated_Source\PSoC4/PWM_Red.c ****         uint32 currentMode;
 839:Generated_Source\PSoC4/PWM_Red.c ****     #endif /* (PWM_Red_CY_TCPWM_4000) */
 840:Generated_Source\PSoC4/PWM_Red.c **** 
 841:Generated_Source\PSoC4/PWM_Red.c ****     #if (PWM_Red_CY_TCPWM_4000)
 842:Generated_Source\PSoC4/PWM_Red.c ****         currentMode = ((PWM_Red_CONTROL_REG & PWM_Red_UPDOWN_MASK) >> PWM_Red_UPDOWN_SHIFT);
 843:Generated_Source\PSoC4/PWM_Red.c **** 
 844:Generated_Source\PSoC4/PWM_Red.c ****         if (((uint32)PWM_Red__COUNT_DOWN == currentMode) && (0xFFFFu != compare))
 845:Generated_Source\PSoC4/PWM_Red.c ****         {
 846:Generated_Source\PSoC4/PWM_Red.c ****             compare++;
 847:Generated_Source\PSoC4/PWM_Red.c ****         }
 848:Generated_Source\PSoC4/PWM_Red.c ****         else if (((uint32)PWM_Red__COUNT_UP == currentMode) && (0u != compare))
 849:Generated_Source\PSoC4/PWM_Red.c ****         {
 850:Generated_Source\PSoC4/PWM_Red.c ****             compare--;
 851:Generated_Source\PSoC4/PWM_Red.c ****         }
 852:Generated_Source\PSoC4/PWM_Red.c ****         else
 853:Generated_Source\PSoC4/PWM_Red.c ****         {
 854:Generated_Source\PSoC4/PWM_Red.c ****         }
 855:Generated_Source\PSoC4/PWM_Red.c ****         
 856:Generated_Source\PSoC4/PWM_Red.c ****     
 857:Generated_Source\PSoC4/PWM_Red.c ****     #endif /* (PWM_Red_CY_TCPWM_4000) */
 858:Generated_Source\PSoC4/PWM_Red.c ****     
 859:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_COMP_CAP_REG = (compare & PWM_Red_16BIT_MASK);
 1224              		.loc 1 859 0
 1225 0008 044B     		ldr	r3, .L72
 1226 000a 7A68     		ldr	r2, [r7, #4]
 1227 000c 1204     		lsls	r2, r2, #16
 1228 000e 120C     		lsrs	r2, r2, #16
 1229 0010 1A60     		str	r2, [r3]
 860:Generated_Source\PSoC4/PWM_Red.c **** }
 1230              		.loc 1 860 0
 1231 0012 C046     		nop
 1232 0014 BD46     		mov	sp, r7
 1233 0016 02B0     		add	sp, sp, #8
 1234              		@ sp needed
 1235 0018 80BD     		pop	{r7, pc}
 1236              	.L73:
 1237 001a C046     		.align	2
 1238              	.L72:
 1239 001c 4C012040 		.word	1075839308
 1240              		.cfi_endproc
 1241              	.LFE23:
 1242              		.size	PWM_Red_WriteCompare, .-PWM_Red_WriteCompare
 1243              		.section	.text.PWM_Red_ReadCompare,"ax",%progbits
 1244              		.align	2
 1245              		.global	PWM_Red_ReadCompare
 1246              		.code	16
 1247              		.thumb_func
 1248              		.type	PWM_Red_ReadCompare, %function
 1249              	PWM_Red_ReadCompare:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 38


 1250              	.LFB24:
 861:Generated_Source\PSoC4/PWM_Red.c **** 
 862:Generated_Source\PSoC4/PWM_Red.c **** 
 863:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
 864:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_ReadCompare
 865:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
 866:Generated_Source\PSoC4/PWM_Red.c **** *
 867:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
 868:Generated_Source\PSoC4/PWM_Red.c **** *  Reads the compare register. Not applicable for Timer/Counter with Capture
 869:Generated_Source\PSoC4/PWM_Red.c **** *  or in Quadrature Decoder modes.
 870:Generated_Source\PSoC4/PWM_Red.c **** *
 871:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
 872:Generated_Source\PSoC4/PWM_Red.c **** *  None
 873:Generated_Source\PSoC4/PWM_Red.c **** *
 874:Generated_Source\PSoC4/PWM_Red.c **** * Return:
 875:Generated_Source\PSoC4/PWM_Red.c **** *  Compare value
 876:Generated_Source\PSoC4/PWM_Red.c **** *
 877:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
 878:Generated_Source\PSoC4/PWM_Red.c **** uint32 PWM_Red_ReadCompare(void)
 879:Generated_Source\PSoC4/PWM_Red.c **** {
 1251              		.loc 1 879 0
 1252              		.cfi_startproc
 1253              		@ args = 0, pretend = 0, frame = 0
 1254              		@ frame_needed = 1, uses_anonymous_args = 0
 1255 0000 80B5     		push	{r7, lr}
 1256              		.cfi_def_cfa_offset 8
 1257              		.cfi_offset 7, -8
 1258              		.cfi_offset 14, -4
 1259 0002 00AF     		add	r7, sp, #0
 1260              		.cfi_def_cfa_register 7
 880:Generated_Source\PSoC4/PWM_Red.c ****     #if (PWM_Red_CY_TCPWM_4000)
 881:Generated_Source\PSoC4/PWM_Red.c ****         uint32 currentMode;
 882:Generated_Source\PSoC4/PWM_Red.c ****         uint32 regVal;
 883:Generated_Source\PSoC4/PWM_Red.c ****     #endif /* (PWM_Red_CY_TCPWM_4000) */
 884:Generated_Source\PSoC4/PWM_Red.c **** 
 885:Generated_Source\PSoC4/PWM_Red.c ****     #if (PWM_Red_CY_TCPWM_4000)
 886:Generated_Source\PSoC4/PWM_Red.c ****         currentMode = ((PWM_Red_CONTROL_REG & PWM_Red_UPDOWN_MASK) >> PWM_Red_UPDOWN_SHIFT);
 887:Generated_Source\PSoC4/PWM_Red.c ****         
 888:Generated_Source\PSoC4/PWM_Red.c ****         regVal = PWM_Red_COMP_CAP_REG;
 889:Generated_Source\PSoC4/PWM_Red.c ****         
 890:Generated_Source\PSoC4/PWM_Red.c ****         if (((uint32)PWM_Red__COUNT_DOWN == currentMode) && (0u != regVal))
 891:Generated_Source\PSoC4/PWM_Red.c ****         {
 892:Generated_Source\PSoC4/PWM_Red.c ****             regVal--;
 893:Generated_Source\PSoC4/PWM_Red.c ****         }
 894:Generated_Source\PSoC4/PWM_Red.c ****         else if (((uint32)PWM_Red__COUNT_UP == currentMode) && (0xFFFFu != regVal))
 895:Generated_Source\PSoC4/PWM_Red.c ****         {
 896:Generated_Source\PSoC4/PWM_Red.c ****             regVal++;
 897:Generated_Source\PSoC4/PWM_Red.c ****         }
 898:Generated_Source\PSoC4/PWM_Red.c ****         else
 899:Generated_Source\PSoC4/PWM_Red.c ****         {
 900:Generated_Source\PSoC4/PWM_Red.c ****         }
 901:Generated_Source\PSoC4/PWM_Red.c **** 
 902:Generated_Source\PSoC4/PWM_Red.c ****         return (regVal & PWM_Red_16BIT_MASK);
 903:Generated_Source\PSoC4/PWM_Red.c ****     #else
 904:Generated_Source\PSoC4/PWM_Red.c ****         return (PWM_Red_COMP_CAP_REG & PWM_Red_16BIT_MASK);
 1261              		.loc 1 904 0
 1262 0004 034B     		ldr	r3, .L76
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 39


 1263 0006 1B68     		ldr	r3, [r3]
 1264 0008 1B04     		lsls	r3, r3, #16
 1265 000a 1B0C     		lsrs	r3, r3, #16
 905:Generated_Source\PSoC4/PWM_Red.c ****     #endif /* (PWM_Red_CY_TCPWM_4000) */
 906:Generated_Source\PSoC4/PWM_Red.c **** }
 1266              		.loc 1 906 0
 1267 000c 1800     		movs	r0, r3
 1268 000e BD46     		mov	sp, r7
 1269              		@ sp needed
 1270 0010 80BD     		pop	{r7, pc}
 1271              	.L77:
 1272 0012 C046     		.align	2
 1273              	.L76:
 1274 0014 4C012040 		.word	1075839308
 1275              		.cfi_endproc
 1276              	.LFE24:
 1277              		.size	PWM_Red_ReadCompare, .-PWM_Red_ReadCompare
 1278              		.section	.text.PWM_Red_WriteCompareBuf,"ax",%progbits
 1279              		.align	2
 1280              		.global	PWM_Red_WriteCompareBuf
 1281              		.code	16
 1282              		.thumb_func
 1283              		.type	PWM_Red_WriteCompareBuf, %function
 1284              	PWM_Red_WriteCompareBuf:
 1285              	.LFB25:
 907:Generated_Source\PSoC4/PWM_Red.c **** 
 908:Generated_Source\PSoC4/PWM_Red.c **** 
 909:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
 910:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_WriteCompareBuf
 911:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
 912:Generated_Source\PSoC4/PWM_Red.c **** *
 913:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
 914:Generated_Source\PSoC4/PWM_Red.c **** *  Writes the 16 bit compare buffer register with the new compare value. Not
 915:Generated_Source\PSoC4/PWM_Red.c **** *  applicable for Timer/Counter with Capture or in Quadrature Decoder modes.
 916:Generated_Source\PSoC4/PWM_Red.c **** *
 917:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
 918:Generated_Source\PSoC4/PWM_Red.c **** *  compareBuf: Compare value
 919:Generated_Source\PSoC4/PWM_Red.c **** *
 920:Generated_Source\PSoC4/PWM_Red.c **** * Return:
 921:Generated_Source\PSoC4/PWM_Red.c **** *  None
 922:Generated_Source\PSoC4/PWM_Red.c **** *
 923:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
 924:Generated_Source\PSoC4/PWM_Red.c **** void PWM_Red_WriteCompareBuf(uint32 compareBuf)
 925:Generated_Source\PSoC4/PWM_Red.c **** {
 1286              		.loc 1 925 0
 1287              		.cfi_startproc
 1288              		@ args = 0, pretend = 0, frame = 8
 1289              		@ frame_needed = 1, uses_anonymous_args = 0
 1290 0000 80B5     		push	{r7, lr}
 1291              		.cfi_def_cfa_offset 8
 1292              		.cfi_offset 7, -8
 1293              		.cfi_offset 14, -4
 1294 0002 82B0     		sub	sp, sp, #8
 1295              		.cfi_def_cfa_offset 16
 1296 0004 00AF     		add	r7, sp, #0
 1297              		.cfi_def_cfa_register 7
 1298 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 40


 926:Generated_Source\PSoC4/PWM_Red.c ****     #if (PWM_Red_CY_TCPWM_4000)
 927:Generated_Source\PSoC4/PWM_Red.c ****         uint32 currentMode;
 928:Generated_Source\PSoC4/PWM_Red.c ****     #endif /* (PWM_Red_CY_TCPWM_4000) */
 929:Generated_Source\PSoC4/PWM_Red.c **** 
 930:Generated_Source\PSoC4/PWM_Red.c ****     #if (PWM_Red_CY_TCPWM_4000)
 931:Generated_Source\PSoC4/PWM_Red.c ****         currentMode = ((PWM_Red_CONTROL_REG & PWM_Red_UPDOWN_MASK) >> PWM_Red_UPDOWN_SHIFT);
 932:Generated_Source\PSoC4/PWM_Red.c **** 
 933:Generated_Source\PSoC4/PWM_Red.c ****         if (((uint32)PWM_Red__COUNT_DOWN == currentMode) && (0xFFFFu != compareBuf))
 934:Generated_Source\PSoC4/PWM_Red.c ****         {
 935:Generated_Source\PSoC4/PWM_Red.c ****             compareBuf++;
 936:Generated_Source\PSoC4/PWM_Red.c ****         }
 937:Generated_Source\PSoC4/PWM_Red.c ****         else if (((uint32)PWM_Red__COUNT_UP == currentMode) && (0u != compareBuf))
 938:Generated_Source\PSoC4/PWM_Red.c ****         {
 939:Generated_Source\PSoC4/PWM_Red.c ****             compareBuf --;
 940:Generated_Source\PSoC4/PWM_Red.c ****         }
 941:Generated_Source\PSoC4/PWM_Red.c ****         else
 942:Generated_Source\PSoC4/PWM_Red.c ****         {
 943:Generated_Source\PSoC4/PWM_Red.c ****         }
 944:Generated_Source\PSoC4/PWM_Red.c ****     #endif /* (PWM_Red_CY_TCPWM_4000) */
 945:Generated_Source\PSoC4/PWM_Red.c ****     
 946:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_COMP_CAP_BUF_REG = (compareBuf & PWM_Red_16BIT_MASK);
 1299              		.loc 1 946 0
 1300 0008 044B     		ldr	r3, .L79
 1301 000a 7A68     		ldr	r2, [r7, #4]
 1302 000c 1204     		lsls	r2, r2, #16
 1303 000e 120C     		lsrs	r2, r2, #16
 1304 0010 1A60     		str	r2, [r3]
 947:Generated_Source\PSoC4/PWM_Red.c **** }
 1305              		.loc 1 947 0
 1306 0012 C046     		nop
 1307 0014 BD46     		mov	sp, r7
 1308 0016 02B0     		add	sp, sp, #8
 1309              		@ sp needed
 1310 0018 80BD     		pop	{r7, pc}
 1311              	.L80:
 1312 001a C046     		.align	2
 1313              	.L79:
 1314 001c 50012040 		.word	1075839312
 1315              		.cfi_endproc
 1316              	.LFE25:
 1317              		.size	PWM_Red_WriteCompareBuf, .-PWM_Red_WriteCompareBuf
 1318              		.section	.text.PWM_Red_ReadCompareBuf,"ax",%progbits
 1319              		.align	2
 1320              		.global	PWM_Red_ReadCompareBuf
 1321              		.code	16
 1322              		.thumb_func
 1323              		.type	PWM_Red_ReadCompareBuf, %function
 1324              	PWM_Red_ReadCompareBuf:
 1325              	.LFB26:
 948:Generated_Source\PSoC4/PWM_Red.c **** 
 949:Generated_Source\PSoC4/PWM_Red.c **** 
 950:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
 951:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_ReadCompareBuf
 952:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
 953:Generated_Source\PSoC4/PWM_Red.c **** *
 954:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
 955:Generated_Source\PSoC4/PWM_Red.c **** *  Reads the compare buffer register. Not applicable for Timer/Counter with
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 41


 956:Generated_Source\PSoC4/PWM_Red.c **** *  Capture or in Quadrature Decoder modes.
 957:Generated_Source\PSoC4/PWM_Red.c **** *
 958:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
 959:Generated_Source\PSoC4/PWM_Red.c **** *  None
 960:Generated_Source\PSoC4/PWM_Red.c **** *
 961:Generated_Source\PSoC4/PWM_Red.c **** * Return:
 962:Generated_Source\PSoC4/PWM_Red.c **** *  Compare buffer value
 963:Generated_Source\PSoC4/PWM_Red.c **** *
 964:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
 965:Generated_Source\PSoC4/PWM_Red.c **** uint32 PWM_Red_ReadCompareBuf(void)
 966:Generated_Source\PSoC4/PWM_Red.c **** {
 1326              		.loc 1 966 0
 1327              		.cfi_startproc
 1328              		@ args = 0, pretend = 0, frame = 0
 1329              		@ frame_needed = 1, uses_anonymous_args = 0
 1330 0000 80B5     		push	{r7, lr}
 1331              		.cfi_def_cfa_offset 8
 1332              		.cfi_offset 7, -8
 1333              		.cfi_offset 14, -4
 1334 0002 00AF     		add	r7, sp, #0
 1335              		.cfi_def_cfa_register 7
 967:Generated_Source\PSoC4/PWM_Red.c ****     #if (PWM_Red_CY_TCPWM_4000)
 968:Generated_Source\PSoC4/PWM_Red.c ****         uint32 currentMode;
 969:Generated_Source\PSoC4/PWM_Red.c ****         uint32 regVal;
 970:Generated_Source\PSoC4/PWM_Red.c ****     #endif /* (PWM_Red_CY_TCPWM_4000) */
 971:Generated_Source\PSoC4/PWM_Red.c **** 
 972:Generated_Source\PSoC4/PWM_Red.c ****     #if (PWM_Red_CY_TCPWM_4000)
 973:Generated_Source\PSoC4/PWM_Red.c ****         currentMode = ((PWM_Red_CONTROL_REG & PWM_Red_UPDOWN_MASK) >> PWM_Red_UPDOWN_SHIFT);
 974:Generated_Source\PSoC4/PWM_Red.c **** 
 975:Generated_Source\PSoC4/PWM_Red.c ****         regVal = PWM_Red_COMP_CAP_BUF_REG;
 976:Generated_Source\PSoC4/PWM_Red.c ****         
 977:Generated_Source\PSoC4/PWM_Red.c ****         if (((uint32)PWM_Red__COUNT_DOWN == currentMode) && (0u != regVal))
 978:Generated_Source\PSoC4/PWM_Red.c ****         {
 979:Generated_Source\PSoC4/PWM_Red.c ****             regVal--;
 980:Generated_Source\PSoC4/PWM_Red.c ****         }
 981:Generated_Source\PSoC4/PWM_Red.c ****         else if (((uint32)PWM_Red__COUNT_UP == currentMode) && (0xFFFFu != regVal))
 982:Generated_Source\PSoC4/PWM_Red.c ****         {
 983:Generated_Source\PSoC4/PWM_Red.c ****             regVal++;
 984:Generated_Source\PSoC4/PWM_Red.c ****         }
 985:Generated_Source\PSoC4/PWM_Red.c ****         else
 986:Generated_Source\PSoC4/PWM_Red.c ****         {
 987:Generated_Source\PSoC4/PWM_Red.c ****         }
 988:Generated_Source\PSoC4/PWM_Red.c **** 
 989:Generated_Source\PSoC4/PWM_Red.c ****         return (regVal & PWM_Red_16BIT_MASK);
 990:Generated_Source\PSoC4/PWM_Red.c ****     #else
 991:Generated_Source\PSoC4/PWM_Red.c ****         return (PWM_Red_COMP_CAP_BUF_REG & PWM_Red_16BIT_MASK);
 1336              		.loc 1 991 0
 1337 0004 034B     		ldr	r3, .L83
 1338 0006 1B68     		ldr	r3, [r3]
 1339 0008 1B04     		lsls	r3, r3, #16
 1340 000a 1B0C     		lsrs	r3, r3, #16
 992:Generated_Source\PSoC4/PWM_Red.c ****     #endif /* (PWM_Red_CY_TCPWM_4000) */
 993:Generated_Source\PSoC4/PWM_Red.c **** }
 1341              		.loc 1 993 0
 1342 000c 1800     		movs	r0, r3
 1343 000e BD46     		mov	sp, r7
 1344              		@ sp needed
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 42


 1345 0010 80BD     		pop	{r7, pc}
 1346              	.L84:
 1347 0012 C046     		.align	2
 1348              	.L83:
 1349 0014 50012040 		.word	1075839312
 1350              		.cfi_endproc
 1351              	.LFE26:
 1352              		.size	PWM_Red_ReadCompareBuf, .-PWM_Red_ReadCompareBuf
 1353              		.section	.text.PWM_Red_ReadCapture,"ax",%progbits
 1354              		.align	2
 1355              		.global	PWM_Red_ReadCapture
 1356              		.code	16
 1357              		.thumb_func
 1358              		.type	PWM_Red_ReadCapture, %function
 1359              	PWM_Red_ReadCapture:
 1360              	.LFB27:
 994:Generated_Source\PSoC4/PWM_Red.c **** 
 995:Generated_Source\PSoC4/PWM_Red.c **** 
 996:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
 997:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_ReadCapture
 998:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
 999:Generated_Source\PSoC4/PWM_Red.c **** *
1000:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
1001:Generated_Source\PSoC4/PWM_Red.c **** *  Reads the captured counter value. This API is applicable only for
1002:Generated_Source\PSoC4/PWM_Red.c **** *  Timer/Counter with the capture mode and Quadrature Decoder modes.
1003:Generated_Source\PSoC4/PWM_Red.c **** *
1004:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
1005:Generated_Source\PSoC4/PWM_Red.c **** *  None
1006:Generated_Source\PSoC4/PWM_Red.c **** *
1007:Generated_Source\PSoC4/PWM_Red.c **** * Return:
1008:Generated_Source\PSoC4/PWM_Red.c **** *  Capture value
1009:Generated_Source\PSoC4/PWM_Red.c **** *
1010:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
1011:Generated_Source\PSoC4/PWM_Red.c **** uint32 PWM_Red_ReadCapture(void)
1012:Generated_Source\PSoC4/PWM_Red.c **** {
 1361              		.loc 1 1012 0
 1362              		.cfi_startproc
 1363              		@ args = 0, pretend = 0, frame = 0
 1364              		@ frame_needed = 1, uses_anonymous_args = 0
 1365 0000 80B5     		push	{r7, lr}
 1366              		.cfi_def_cfa_offset 8
 1367              		.cfi_offset 7, -8
 1368              		.cfi_offset 14, -4
 1369 0002 00AF     		add	r7, sp, #0
 1370              		.cfi_def_cfa_register 7
1013:Generated_Source\PSoC4/PWM_Red.c ****     return (PWM_Red_COMP_CAP_REG & PWM_Red_16BIT_MASK);
 1371              		.loc 1 1013 0
 1372 0004 034B     		ldr	r3, .L87
 1373 0006 1B68     		ldr	r3, [r3]
 1374 0008 1B04     		lsls	r3, r3, #16
 1375 000a 1B0C     		lsrs	r3, r3, #16
1014:Generated_Source\PSoC4/PWM_Red.c **** }
 1376              		.loc 1 1014 0
 1377 000c 1800     		movs	r0, r3
 1378 000e BD46     		mov	sp, r7
 1379              		@ sp needed
 1380 0010 80BD     		pop	{r7, pc}
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 43


 1381              	.L88:
 1382 0012 C046     		.align	2
 1383              	.L87:
 1384 0014 4C012040 		.word	1075839308
 1385              		.cfi_endproc
 1386              	.LFE27:
 1387              		.size	PWM_Red_ReadCapture, .-PWM_Red_ReadCapture
 1388              		.section	.text.PWM_Red_ReadCaptureBuf,"ax",%progbits
 1389              		.align	2
 1390              		.global	PWM_Red_ReadCaptureBuf
 1391              		.code	16
 1392              		.thumb_func
 1393              		.type	PWM_Red_ReadCaptureBuf, %function
 1394              	PWM_Red_ReadCaptureBuf:
 1395              	.LFB28:
1015:Generated_Source\PSoC4/PWM_Red.c **** 
1016:Generated_Source\PSoC4/PWM_Red.c **** 
1017:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
1018:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_ReadCaptureBuf
1019:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
1020:Generated_Source\PSoC4/PWM_Red.c **** *
1021:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
1022:Generated_Source\PSoC4/PWM_Red.c **** *  Reads the capture buffer register. This API is applicable only for
1023:Generated_Source\PSoC4/PWM_Red.c **** *  Timer/Counter with the capture mode and Quadrature Decoder modes.
1024:Generated_Source\PSoC4/PWM_Red.c **** *
1025:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
1026:Generated_Source\PSoC4/PWM_Red.c **** *  None
1027:Generated_Source\PSoC4/PWM_Red.c **** *
1028:Generated_Source\PSoC4/PWM_Red.c **** * Return:
1029:Generated_Source\PSoC4/PWM_Red.c **** *  Capture buffer value
1030:Generated_Source\PSoC4/PWM_Red.c **** *
1031:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
1032:Generated_Source\PSoC4/PWM_Red.c **** uint32 PWM_Red_ReadCaptureBuf(void)
1033:Generated_Source\PSoC4/PWM_Red.c **** {
 1396              		.loc 1 1033 0
 1397              		.cfi_startproc
 1398              		@ args = 0, pretend = 0, frame = 0
 1399              		@ frame_needed = 1, uses_anonymous_args = 0
 1400 0000 80B5     		push	{r7, lr}
 1401              		.cfi_def_cfa_offset 8
 1402              		.cfi_offset 7, -8
 1403              		.cfi_offset 14, -4
 1404 0002 00AF     		add	r7, sp, #0
 1405              		.cfi_def_cfa_register 7
1034:Generated_Source\PSoC4/PWM_Red.c ****     return (PWM_Red_COMP_CAP_BUF_REG & PWM_Red_16BIT_MASK);
 1406              		.loc 1 1034 0
 1407 0004 034B     		ldr	r3, .L91
 1408 0006 1B68     		ldr	r3, [r3]
 1409 0008 1B04     		lsls	r3, r3, #16
 1410 000a 1B0C     		lsrs	r3, r3, #16
1035:Generated_Source\PSoC4/PWM_Red.c **** }
 1411              		.loc 1 1035 0
 1412 000c 1800     		movs	r0, r3
 1413 000e BD46     		mov	sp, r7
 1414              		@ sp needed
 1415 0010 80BD     		pop	{r7, pc}
 1416              	.L92:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 44


 1417 0012 C046     		.align	2
 1418              	.L91:
 1419 0014 50012040 		.word	1075839312
 1420              		.cfi_endproc
 1421              	.LFE28:
 1422              		.size	PWM_Red_ReadCaptureBuf, .-PWM_Red_ReadCaptureBuf
 1423              		.section	.text.PWM_Red_SetCaptureMode,"ax",%progbits
 1424              		.align	2
 1425              		.global	PWM_Red_SetCaptureMode
 1426              		.code	16
 1427              		.thumb_func
 1428              		.type	PWM_Red_SetCaptureMode, %function
 1429              	PWM_Red_SetCaptureMode:
 1430              	.LFB29:
1036:Generated_Source\PSoC4/PWM_Red.c **** 
1037:Generated_Source\PSoC4/PWM_Red.c **** 
1038:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
1039:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_SetCaptureMode
1040:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
1041:Generated_Source\PSoC4/PWM_Red.c **** *
1042:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
1043:Generated_Source\PSoC4/PWM_Red.c **** *  Sets the capture trigger mode. For PWM mode this is the switch input.
1044:Generated_Source\PSoC4/PWM_Red.c **** *  This input is not applicable to the Timer/Counter without Capture and
1045:Generated_Source\PSoC4/PWM_Red.c **** *  Quadrature Decoder modes.
1046:Generated_Source\PSoC4/PWM_Red.c **** *
1047:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
1048:Generated_Source\PSoC4/PWM_Red.c **** *  triggerMode: Enumerated trigger mode value
1049:Generated_Source\PSoC4/PWM_Red.c **** *   Values:
1050:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_TRIG_LEVEL     - Level
1051:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_TRIG_RISING    - Rising edge
1052:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_TRIG_FALLING   - Falling edge
1053:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_TRIG_BOTH      - Both rising and falling edge
1054:Generated_Source\PSoC4/PWM_Red.c **** *
1055:Generated_Source\PSoC4/PWM_Red.c **** * Return:
1056:Generated_Source\PSoC4/PWM_Red.c **** *  None
1057:Generated_Source\PSoC4/PWM_Red.c **** *
1058:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
1059:Generated_Source\PSoC4/PWM_Red.c **** void PWM_Red_SetCaptureMode(uint32 triggerMode)
1060:Generated_Source\PSoC4/PWM_Red.c **** {
 1431              		.loc 1 1060 0
 1432              		.cfi_startproc
 1433              		@ args = 0, pretend = 0, frame = 16
 1434              		@ frame_needed = 1, uses_anonymous_args = 0
 1435 0000 90B5     		push	{r4, r7, lr}
 1436              		.cfi_def_cfa_offset 12
 1437              		.cfi_offset 4, -12
 1438              		.cfi_offset 7, -8
 1439              		.cfi_offset 14, -4
 1440 0002 85B0     		sub	sp, sp, #20
 1441              		.cfi_def_cfa_offset 32
 1442 0004 00AF     		add	r7, sp, #0
 1443              		.cfi_def_cfa_register 7
 1444 0006 7860     		str	r0, [r7, #4]
1061:Generated_Source\PSoC4/PWM_Red.c ****     uint8 enableInterrupts;
1062:Generated_Source\PSoC4/PWM_Red.c **** 
1063:Generated_Source\PSoC4/PWM_Red.c ****     enableInterrupts = CyEnterCriticalSection();
 1445              		.loc 1 1063 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 45


 1446 0008 0F23     		movs	r3, #15
 1447 000a FC18     		adds	r4, r7, r3
 1448 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1449 0010 0300     		movs	r3, r0
 1450 0012 2370     		strb	r3, [r4]
1064:Generated_Source\PSoC4/PWM_Red.c **** 
1065:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_TRIG_CONTROL1_REG &= (uint32)~PWM_Red_CAPTURE_MASK;
 1451              		.loc 1 1065 0
 1452 0014 0A4B     		ldr	r3, .L94
 1453 0016 0A4A     		ldr	r2, .L94
 1454 0018 1268     		ldr	r2, [r2]
 1455 001a 0321     		movs	r1, #3
 1456 001c 8A43     		bics	r2, r1
 1457 001e 1A60     		str	r2, [r3]
1066:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_TRIG_CONTROL1_REG |= triggerMode;
 1458              		.loc 1 1066 0
 1459 0020 074B     		ldr	r3, .L94
 1460 0022 074A     		ldr	r2, .L94
 1461 0024 1168     		ldr	r1, [r2]
 1462 0026 7A68     		ldr	r2, [r7, #4]
 1463 0028 0A43     		orrs	r2, r1
 1464 002a 1A60     		str	r2, [r3]
1067:Generated_Source\PSoC4/PWM_Red.c **** 
1068:Generated_Source\PSoC4/PWM_Red.c ****     CyExitCriticalSection(enableInterrupts);
 1465              		.loc 1 1068 0
 1466 002c 0F23     		movs	r3, #15
 1467 002e FB18     		adds	r3, r7, r3
 1468 0030 1B78     		ldrb	r3, [r3]
 1469 0032 1800     		movs	r0, r3
 1470 0034 FFF7FEFF 		bl	CyExitCriticalSection
1069:Generated_Source\PSoC4/PWM_Red.c **** }
 1471              		.loc 1 1069 0
 1472 0038 C046     		nop
 1473 003a BD46     		mov	sp, r7
 1474 003c 05B0     		add	sp, sp, #20
 1475              		@ sp needed
 1476 003e 90BD     		pop	{r4, r7, pc}
 1477              	.L95:
 1478              		.align	2
 1479              	.L94:
 1480 0040 64012040 		.word	1075839332
 1481              		.cfi_endproc
 1482              	.LFE29:
 1483              		.size	PWM_Red_SetCaptureMode, .-PWM_Red_SetCaptureMode
 1484              		.section	.text.PWM_Red_SetReloadMode,"ax",%progbits
 1485              		.align	2
 1486              		.global	PWM_Red_SetReloadMode
 1487              		.code	16
 1488              		.thumb_func
 1489              		.type	PWM_Red_SetReloadMode, %function
 1490              	PWM_Red_SetReloadMode:
 1491              	.LFB30:
1070:Generated_Source\PSoC4/PWM_Red.c **** 
1071:Generated_Source\PSoC4/PWM_Red.c **** 
1072:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
1073:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_SetReloadMode
1074:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 46


1075:Generated_Source\PSoC4/PWM_Red.c **** *
1076:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
1077:Generated_Source\PSoC4/PWM_Red.c **** *  Sets the reload trigger mode. For Quadrature Decoder mode this is the index
1078:Generated_Source\PSoC4/PWM_Red.c **** *  input.
1079:Generated_Source\PSoC4/PWM_Red.c **** *
1080:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
1081:Generated_Source\PSoC4/PWM_Red.c **** *  triggerMode: Enumerated trigger mode value
1082:Generated_Source\PSoC4/PWM_Red.c **** *   Values:
1083:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_TRIG_LEVEL     - Level
1084:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_TRIG_RISING    - Rising edge
1085:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_TRIG_FALLING   - Falling edge
1086:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_TRIG_BOTH      - Both rising and falling edge
1087:Generated_Source\PSoC4/PWM_Red.c **** *
1088:Generated_Source\PSoC4/PWM_Red.c **** * Return:
1089:Generated_Source\PSoC4/PWM_Red.c **** *  None
1090:Generated_Source\PSoC4/PWM_Red.c **** *
1091:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
1092:Generated_Source\PSoC4/PWM_Red.c **** void PWM_Red_SetReloadMode(uint32 triggerMode)
1093:Generated_Source\PSoC4/PWM_Red.c **** {
 1492              		.loc 1 1093 0
 1493              		.cfi_startproc
 1494              		@ args = 0, pretend = 0, frame = 16
 1495              		@ frame_needed = 1, uses_anonymous_args = 0
 1496 0000 90B5     		push	{r4, r7, lr}
 1497              		.cfi_def_cfa_offset 12
 1498              		.cfi_offset 4, -12
 1499              		.cfi_offset 7, -8
 1500              		.cfi_offset 14, -4
 1501 0002 85B0     		sub	sp, sp, #20
 1502              		.cfi_def_cfa_offset 32
 1503 0004 00AF     		add	r7, sp, #0
 1504              		.cfi_def_cfa_register 7
 1505 0006 7860     		str	r0, [r7, #4]
1094:Generated_Source\PSoC4/PWM_Red.c ****     uint8 enableInterrupts;
1095:Generated_Source\PSoC4/PWM_Red.c **** 
1096:Generated_Source\PSoC4/PWM_Red.c ****     enableInterrupts = CyEnterCriticalSection();
 1506              		.loc 1 1096 0
 1507 0008 0F23     		movs	r3, #15
 1508 000a FC18     		adds	r4, r7, r3
 1509 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1510 0010 0300     		movs	r3, r0
 1511 0012 2370     		strb	r3, [r4]
1097:Generated_Source\PSoC4/PWM_Red.c **** 
1098:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_TRIG_CONTROL1_REG &= (uint32)~PWM_Red_RELOAD_MASK;
 1512              		.loc 1 1098 0
 1513 0014 0B4B     		ldr	r3, .L97
 1514 0016 0B4A     		ldr	r2, .L97
 1515 0018 1268     		ldr	r2, [r2]
 1516 001a 3021     		movs	r1, #48
 1517 001c 8A43     		bics	r2, r1
 1518 001e 1A60     		str	r2, [r3]
1099:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_TRIG_CONTROL1_REG |= ((uint32)(triggerMode << PWM_Red_RELOAD_SHIFT));
 1519              		.loc 1 1099 0
 1520 0020 084B     		ldr	r3, .L97
 1521 0022 084A     		ldr	r2, .L97
 1522 0024 1168     		ldr	r1, [r2]
 1523 0026 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 47


 1524 0028 1201     		lsls	r2, r2, #4
 1525 002a 0A43     		orrs	r2, r1
 1526 002c 1A60     		str	r2, [r3]
1100:Generated_Source\PSoC4/PWM_Red.c **** 
1101:Generated_Source\PSoC4/PWM_Red.c ****     CyExitCriticalSection(enableInterrupts);
 1527              		.loc 1 1101 0
 1528 002e 0F23     		movs	r3, #15
 1529 0030 FB18     		adds	r3, r7, r3
 1530 0032 1B78     		ldrb	r3, [r3]
 1531 0034 1800     		movs	r0, r3
 1532 0036 FFF7FEFF 		bl	CyExitCriticalSection
1102:Generated_Source\PSoC4/PWM_Red.c **** }
 1533              		.loc 1 1102 0
 1534 003a C046     		nop
 1535 003c BD46     		mov	sp, r7
 1536 003e 05B0     		add	sp, sp, #20
 1537              		@ sp needed
 1538 0040 90BD     		pop	{r4, r7, pc}
 1539              	.L98:
 1540 0042 C046     		.align	2
 1541              	.L97:
 1542 0044 64012040 		.word	1075839332
 1543              		.cfi_endproc
 1544              	.LFE30:
 1545              		.size	PWM_Red_SetReloadMode, .-PWM_Red_SetReloadMode
 1546              		.section	.text.PWM_Red_SetStartMode,"ax",%progbits
 1547              		.align	2
 1548              		.global	PWM_Red_SetStartMode
 1549              		.code	16
 1550              		.thumb_func
 1551              		.type	PWM_Red_SetStartMode, %function
 1552              	PWM_Red_SetStartMode:
 1553              	.LFB31:
1103:Generated_Source\PSoC4/PWM_Red.c **** 
1104:Generated_Source\PSoC4/PWM_Red.c **** 
1105:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
1106:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_SetStartMode
1107:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
1108:Generated_Source\PSoC4/PWM_Red.c **** *
1109:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
1110:Generated_Source\PSoC4/PWM_Red.c **** *  Sets the start trigger mode. For Quadrature Decoder mode this is the
1111:Generated_Source\PSoC4/PWM_Red.c **** *  phiB input.
1112:Generated_Source\PSoC4/PWM_Red.c **** *
1113:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
1114:Generated_Source\PSoC4/PWM_Red.c **** *  triggerMode: Enumerated trigger mode value
1115:Generated_Source\PSoC4/PWM_Red.c **** *   Values:
1116:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_TRIG_LEVEL     - Level
1117:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_TRIG_RISING    - Rising edge
1118:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_TRIG_FALLING   - Falling edge
1119:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_TRIG_BOTH      - Both rising and falling edge
1120:Generated_Source\PSoC4/PWM_Red.c **** *
1121:Generated_Source\PSoC4/PWM_Red.c **** * Return:
1122:Generated_Source\PSoC4/PWM_Red.c **** *  None
1123:Generated_Source\PSoC4/PWM_Red.c **** *
1124:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
1125:Generated_Source\PSoC4/PWM_Red.c **** void PWM_Red_SetStartMode(uint32 triggerMode)
1126:Generated_Source\PSoC4/PWM_Red.c **** {
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 48


 1554              		.loc 1 1126 0
 1555              		.cfi_startproc
 1556              		@ args = 0, pretend = 0, frame = 16
 1557              		@ frame_needed = 1, uses_anonymous_args = 0
 1558 0000 90B5     		push	{r4, r7, lr}
 1559              		.cfi_def_cfa_offset 12
 1560              		.cfi_offset 4, -12
 1561              		.cfi_offset 7, -8
 1562              		.cfi_offset 14, -4
 1563 0002 85B0     		sub	sp, sp, #20
 1564              		.cfi_def_cfa_offset 32
 1565 0004 00AF     		add	r7, sp, #0
 1566              		.cfi_def_cfa_register 7
 1567 0006 7860     		str	r0, [r7, #4]
1127:Generated_Source\PSoC4/PWM_Red.c ****     uint8 enableInterrupts;
1128:Generated_Source\PSoC4/PWM_Red.c **** 
1129:Generated_Source\PSoC4/PWM_Red.c ****     enableInterrupts = CyEnterCriticalSection();
 1568              		.loc 1 1129 0
 1569 0008 0F23     		movs	r3, #15
 1570 000a FC18     		adds	r4, r7, r3
 1571 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1572 0010 0300     		movs	r3, r0
 1573 0012 2370     		strb	r3, [r4]
1130:Generated_Source\PSoC4/PWM_Red.c **** 
1131:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_TRIG_CONTROL1_REG &= (uint32)~PWM_Red_START_MASK;
 1574              		.loc 1 1131 0
 1575 0014 0B4B     		ldr	r3, .L100
 1576 0016 0B4A     		ldr	r2, .L100
 1577 0018 1268     		ldr	r2, [r2]
 1578 001a 0B49     		ldr	r1, .L100+4
 1579 001c 0A40     		ands	r2, r1
 1580 001e 1A60     		str	r2, [r3]
1132:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_TRIG_CONTROL1_REG |= ((uint32)(triggerMode << PWM_Red_START_SHIFT));
 1581              		.loc 1 1132 0
 1582 0020 084B     		ldr	r3, .L100
 1583 0022 084A     		ldr	r2, .L100
 1584 0024 1168     		ldr	r1, [r2]
 1585 0026 7A68     		ldr	r2, [r7, #4]
 1586 0028 1202     		lsls	r2, r2, #8
 1587 002a 0A43     		orrs	r2, r1
 1588 002c 1A60     		str	r2, [r3]
1133:Generated_Source\PSoC4/PWM_Red.c **** 
1134:Generated_Source\PSoC4/PWM_Red.c ****     CyExitCriticalSection(enableInterrupts);
 1589              		.loc 1 1134 0
 1590 002e 0F23     		movs	r3, #15
 1591 0030 FB18     		adds	r3, r7, r3
 1592 0032 1B78     		ldrb	r3, [r3]
 1593 0034 1800     		movs	r0, r3
 1594 0036 FFF7FEFF 		bl	CyExitCriticalSection
1135:Generated_Source\PSoC4/PWM_Red.c **** }
 1595              		.loc 1 1135 0
 1596 003a C046     		nop
 1597 003c BD46     		mov	sp, r7
 1598 003e 05B0     		add	sp, sp, #20
 1599              		@ sp needed
 1600 0040 90BD     		pop	{r4, r7, pc}
 1601              	.L101:
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 49


 1602 0042 C046     		.align	2
 1603              	.L100:
 1604 0044 64012040 		.word	1075839332
 1605 0048 FFFCFFFF 		.word	-769
 1606              		.cfi_endproc
 1607              	.LFE31:
 1608              		.size	PWM_Red_SetStartMode, .-PWM_Red_SetStartMode
 1609              		.section	.text.PWM_Red_SetStopMode,"ax",%progbits
 1610              		.align	2
 1611              		.global	PWM_Red_SetStopMode
 1612              		.code	16
 1613              		.thumb_func
 1614              		.type	PWM_Red_SetStopMode, %function
 1615              	PWM_Red_SetStopMode:
 1616              	.LFB32:
1136:Generated_Source\PSoC4/PWM_Red.c **** 
1137:Generated_Source\PSoC4/PWM_Red.c **** 
1138:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
1139:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_SetStopMode
1140:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
1141:Generated_Source\PSoC4/PWM_Red.c **** *
1142:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
1143:Generated_Source\PSoC4/PWM_Red.c **** *  Sets the stop trigger mode. For PWM mode this is the kill input.
1144:Generated_Source\PSoC4/PWM_Red.c **** *
1145:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
1146:Generated_Source\PSoC4/PWM_Red.c **** *  triggerMode: Enumerated trigger mode value
1147:Generated_Source\PSoC4/PWM_Red.c **** *   Values:
1148:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_TRIG_LEVEL     - Level
1149:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_TRIG_RISING    - Rising edge
1150:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_TRIG_FALLING   - Falling edge
1151:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_TRIG_BOTH      - Both rising and falling edge
1152:Generated_Source\PSoC4/PWM_Red.c **** *
1153:Generated_Source\PSoC4/PWM_Red.c **** * Return:
1154:Generated_Source\PSoC4/PWM_Red.c **** *  None
1155:Generated_Source\PSoC4/PWM_Red.c **** *
1156:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
1157:Generated_Source\PSoC4/PWM_Red.c **** void PWM_Red_SetStopMode(uint32 triggerMode)
1158:Generated_Source\PSoC4/PWM_Red.c **** {
 1617              		.loc 1 1158 0
 1618              		.cfi_startproc
 1619              		@ args = 0, pretend = 0, frame = 16
 1620              		@ frame_needed = 1, uses_anonymous_args = 0
 1621 0000 90B5     		push	{r4, r7, lr}
 1622              		.cfi_def_cfa_offset 12
 1623              		.cfi_offset 4, -12
 1624              		.cfi_offset 7, -8
 1625              		.cfi_offset 14, -4
 1626 0002 85B0     		sub	sp, sp, #20
 1627              		.cfi_def_cfa_offset 32
 1628 0004 00AF     		add	r7, sp, #0
 1629              		.cfi_def_cfa_register 7
 1630 0006 7860     		str	r0, [r7, #4]
1159:Generated_Source\PSoC4/PWM_Red.c ****     uint8 enableInterrupts;
1160:Generated_Source\PSoC4/PWM_Red.c **** 
1161:Generated_Source\PSoC4/PWM_Red.c ****     enableInterrupts = CyEnterCriticalSection();
 1631              		.loc 1 1161 0
 1632 0008 0F23     		movs	r3, #15
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 50


 1633 000a FC18     		adds	r4, r7, r3
 1634 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1635 0010 0300     		movs	r3, r0
 1636 0012 2370     		strb	r3, [r4]
1162:Generated_Source\PSoC4/PWM_Red.c **** 
1163:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_TRIG_CONTROL1_REG &= (uint32)~PWM_Red_STOP_MASK;
 1637              		.loc 1 1163 0
 1638 0014 0B4B     		ldr	r3, .L103
 1639 0016 0B4A     		ldr	r2, .L103
 1640 0018 1268     		ldr	r2, [r2]
 1641 001a C021     		movs	r1, #192
 1642 001c 8A43     		bics	r2, r1
 1643 001e 1A60     		str	r2, [r3]
1164:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_TRIG_CONTROL1_REG |= ((uint32)(triggerMode << PWM_Red_STOP_SHIFT));
 1644              		.loc 1 1164 0
 1645 0020 084B     		ldr	r3, .L103
 1646 0022 084A     		ldr	r2, .L103
 1647 0024 1168     		ldr	r1, [r2]
 1648 0026 7A68     		ldr	r2, [r7, #4]
 1649 0028 9201     		lsls	r2, r2, #6
 1650 002a 0A43     		orrs	r2, r1
 1651 002c 1A60     		str	r2, [r3]
1165:Generated_Source\PSoC4/PWM_Red.c **** 
1166:Generated_Source\PSoC4/PWM_Red.c ****     CyExitCriticalSection(enableInterrupts);
 1652              		.loc 1 1166 0
 1653 002e 0F23     		movs	r3, #15
 1654 0030 FB18     		adds	r3, r7, r3
 1655 0032 1B78     		ldrb	r3, [r3]
 1656 0034 1800     		movs	r0, r3
 1657 0036 FFF7FEFF 		bl	CyExitCriticalSection
1167:Generated_Source\PSoC4/PWM_Red.c **** }
 1658              		.loc 1 1167 0
 1659 003a C046     		nop
 1660 003c BD46     		mov	sp, r7
 1661 003e 05B0     		add	sp, sp, #20
 1662              		@ sp needed
 1663 0040 90BD     		pop	{r4, r7, pc}
 1664              	.L104:
 1665 0042 C046     		.align	2
 1666              	.L103:
 1667 0044 64012040 		.word	1075839332
 1668              		.cfi_endproc
 1669              	.LFE32:
 1670              		.size	PWM_Red_SetStopMode, .-PWM_Red_SetStopMode
 1671              		.section	.text.PWM_Red_SetCountMode,"ax",%progbits
 1672              		.align	2
 1673              		.global	PWM_Red_SetCountMode
 1674              		.code	16
 1675              		.thumb_func
 1676              		.type	PWM_Red_SetCountMode, %function
 1677              	PWM_Red_SetCountMode:
 1678              	.LFB33:
1168:Generated_Source\PSoC4/PWM_Red.c **** 
1169:Generated_Source\PSoC4/PWM_Red.c **** 
1170:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
1171:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_SetCountMode
1172:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 51


1173:Generated_Source\PSoC4/PWM_Red.c **** *
1174:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
1175:Generated_Source\PSoC4/PWM_Red.c **** *  Sets the count trigger mode. For Quadrature Decoder mode this is the phiA
1176:Generated_Source\PSoC4/PWM_Red.c **** *  input.
1177:Generated_Source\PSoC4/PWM_Red.c **** *
1178:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
1179:Generated_Source\PSoC4/PWM_Red.c **** *  triggerMode: Enumerated trigger mode value
1180:Generated_Source\PSoC4/PWM_Red.c **** *   Values:
1181:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_TRIG_LEVEL     - Level
1182:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_TRIG_RISING    - Rising edge
1183:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_TRIG_FALLING   - Falling edge
1184:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_TRIG_BOTH      - Both rising and falling edge
1185:Generated_Source\PSoC4/PWM_Red.c **** *
1186:Generated_Source\PSoC4/PWM_Red.c **** * Return:
1187:Generated_Source\PSoC4/PWM_Red.c **** *  None
1188:Generated_Source\PSoC4/PWM_Red.c **** *
1189:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
1190:Generated_Source\PSoC4/PWM_Red.c **** void PWM_Red_SetCountMode(uint32 triggerMode)
1191:Generated_Source\PSoC4/PWM_Red.c **** {
 1679              		.loc 1 1191 0
 1680              		.cfi_startproc
 1681              		@ args = 0, pretend = 0, frame = 16
 1682              		@ frame_needed = 1, uses_anonymous_args = 0
 1683 0000 90B5     		push	{r4, r7, lr}
 1684              		.cfi_def_cfa_offset 12
 1685              		.cfi_offset 4, -12
 1686              		.cfi_offset 7, -8
 1687              		.cfi_offset 14, -4
 1688 0002 85B0     		sub	sp, sp, #20
 1689              		.cfi_def_cfa_offset 32
 1690 0004 00AF     		add	r7, sp, #0
 1691              		.cfi_def_cfa_register 7
 1692 0006 7860     		str	r0, [r7, #4]
1192:Generated_Source\PSoC4/PWM_Red.c ****     uint8 enableInterrupts;
1193:Generated_Source\PSoC4/PWM_Red.c **** 
1194:Generated_Source\PSoC4/PWM_Red.c ****     enableInterrupts = CyEnterCriticalSection();
 1693              		.loc 1 1194 0
 1694 0008 0F23     		movs	r3, #15
 1695 000a FC18     		adds	r4, r7, r3
 1696 000c FFF7FEFF 		bl	CyEnterCriticalSection
 1697 0010 0300     		movs	r3, r0
 1698 0012 2370     		strb	r3, [r4]
1195:Generated_Source\PSoC4/PWM_Red.c **** 
1196:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_TRIG_CONTROL1_REG &= (uint32)~PWM_Red_COUNT_MASK;
 1699              		.loc 1 1196 0
 1700 0014 0B4B     		ldr	r3, .L106
 1701 0016 0B4A     		ldr	r2, .L106
 1702 0018 1268     		ldr	r2, [r2]
 1703 001a 0C21     		movs	r1, #12
 1704 001c 8A43     		bics	r2, r1
 1705 001e 1A60     		str	r2, [r3]
1197:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_TRIG_CONTROL1_REG |= ((uint32)(triggerMode << PWM_Red_COUNT_SHIFT));
 1706              		.loc 1 1197 0
 1707 0020 084B     		ldr	r3, .L106
 1708 0022 084A     		ldr	r2, .L106
 1709 0024 1168     		ldr	r1, [r2]
 1710 0026 7A68     		ldr	r2, [r7, #4]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 52


 1711 0028 9200     		lsls	r2, r2, #2
 1712 002a 0A43     		orrs	r2, r1
 1713 002c 1A60     		str	r2, [r3]
1198:Generated_Source\PSoC4/PWM_Red.c **** 
1199:Generated_Source\PSoC4/PWM_Red.c ****     CyExitCriticalSection(enableInterrupts);
 1714              		.loc 1 1199 0
 1715 002e 0F23     		movs	r3, #15
 1716 0030 FB18     		adds	r3, r7, r3
 1717 0032 1B78     		ldrb	r3, [r3]
 1718 0034 1800     		movs	r0, r3
 1719 0036 FFF7FEFF 		bl	CyExitCriticalSection
1200:Generated_Source\PSoC4/PWM_Red.c **** }
 1720              		.loc 1 1200 0
 1721 003a C046     		nop
 1722 003c BD46     		mov	sp, r7
 1723 003e 05B0     		add	sp, sp, #20
 1724              		@ sp needed
 1725 0040 90BD     		pop	{r4, r7, pc}
 1726              	.L107:
 1727 0042 C046     		.align	2
 1728              	.L106:
 1729 0044 64012040 		.word	1075839332
 1730              		.cfi_endproc
 1731              	.LFE33:
 1732              		.size	PWM_Red_SetCountMode, .-PWM_Red_SetCountMode
 1733              		.section	.text.PWM_Red_TriggerCommand,"ax",%progbits
 1734              		.align	2
 1735              		.global	PWM_Red_TriggerCommand
 1736              		.code	16
 1737              		.thumb_func
 1738              		.type	PWM_Red_TriggerCommand, %function
 1739              	PWM_Red_TriggerCommand:
 1740              	.LFB34:
1201:Generated_Source\PSoC4/PWM_Red.c **** 
1202:Generated_Source\PSoC4/PWM_Red.c **** 
1203:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
1204:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_TriggerCommand
1205:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
1206:Generated_Source\PSoC4/PWM_Red.c **** *
1207:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
1208:Generated_Source\PSoC4/PWM_Red.c **** *  Triggers the designated command to occur on the designated TCPWM instances.
1209:Generated_Source\PSoC4/PWM_Red.c **** *  The mask can be used to apply this command simultaneously to more than one
1210:Generated_Source\PSoC4/PWM_Red.c **** *  instance.  This allows multiple TCPWM instances to be synchronized.
1211:Generated_Source\PSoC4/PWM_Red.c **** *
1212:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
1213:Generated_Source\PSoC4/PWM_Red.c **** *  mask: A combination of mask bits for each instance of the TCPWM that the
1214:Generated_Source\PSoC4/PWM_Red.c **** *        command should apply to.  This function from one instance can be used
1215:Generated_Source\PSoC4/PWM_Red.c **** *        to apply the command to any of the instances in the design.
1216:Generated_Source\PSoC4/PWM_Red.c **** *        The mask value for a specific instance is available with the MASK
1217:Generated_Source\PSoC4/PWM_Red.c **** *        define.
1218:Generated_Source\PSoC4/PWM_Red.c **** *  command: Enumerated command values. Capture command only applicable for
1219:Generated_Source\PSoC4/PWM_Red.c **** *           Timer/Counter with Capture and PWM modes.
1220:Generated_Source\PSoC4/PWM_Red.c **** *   Values:
1221:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_CMD_CAPTURE    - Trigger Capture command
1222:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_CMD_RELOAD     - Trigger Reload command
1223:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_CMD_STOP       - Trigger Stop command
1224:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_CMD_START      - Trigger Start command
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 53


1225:Generated_Source\PSoC4/PWM_Red.c **** *
1226:Generated_Source\PSoC4/PWM_Red.c **** * Return:
1227:Generated_Source\PSoC4/PWM_Red.c **** *  None
1228:Generated_Source\PSoC4/PWM_Red.c **** *
1229:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
1230:Generated_Source\PSoC4/PWM_Red.c **** void PWM_Red_TriggerCommand(uint32 mask, uint32 command)
1231:Generated_Source\PSoC4/PWM_Red.c **** {
 1741              		.loc 1 1231 0
 1742              		.cfi_startproc
 1743              		@ args = 0, pretend = 0, frame = 16
 1744              		@ frame_needed = 1, uses_anonymous_args = 0
 1745 0000 90B5     		push	{r4, r7, lr}
 1746              		.cfi_def_cfa_offset 12
 1747              		.cfi_offset 4, -12
 1748              		.cfi_offset 7, -8
 1749              		.cfi_offset 14, -4
 1750 0002 85B0     		sub	sp, sp, #20
 1751              		.cfi_def_cfa_offset 32
 1752 0004 00AF     		add	r7, sp, #0
 1753              		.cfi_def_cfa_register 7
 1754 0006 7860     		str	r0, [r7, #4]
 1755 0008 3960     		str	r1, [r7]
1232:Generated_Source\PSoC4/PWM_Red.c ****     uint8 enableInterrupts;
1233:Generated_Source\PSoC4/PWM_Red.c **** 
1234:Generated_Source\PSoC4/PWM_Red.c ****     enableInterrupts = CyEnterCriticalSection();
 1756              		.loc 1 1234 0
 1757 000a 0F23     		movs	r3, #15
 1758 000c FC18     		adds	r4, r7, r3
 1759 000e FFF7FEFF 		bl	CyEnterCriticalSection
 1760 0012 0300     		movs	r3, r0
 1761 0014 2370     		strb	r3, [r4]
1235:Generated_Source\PSoC4/PWM_Red.c **** 
1236:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_COMMAND_REG = ((uint32)(mask << command));
 1762              		.loc 1 1236 0
 1763 0016 084B     		ldr	r3, .L109
 1764 0018 7968     		ldr	r1, [r7, #4]
 1765 001a 3A68     		ldr	r2, [r7]
 1766 001c 9140     		lsls	r1, r1, r2
 1767 001e 0A00     		movs	r2, r1
 1768 0020 1A60     		str	r2, [r3]
1237:Generated_Source\PSoC4/PWM_Red.c **** 
1238:Generated_Source\PSoC4/PWM_Red.c ****     CyExitCriticalSection(enableInterrupts);
 1769              		.loc 1 1238 0
 1770 0022 0F23     		movs	r3, #15
 1771 0024 FB18     		adds	r3, r7, r3
 1772 0026 1B78     		ldrb	r3, [r3]
 1773 0028 1800     		movs	r0, r3
 1774 002a FFF7FEFF 		bl	CyExitCriticalSection
1239:Generated_Source\PSoC4/PWM_Red.c **** }
 1775              		.loc 1 1239 0
 1776 002e C046     		nop
 1777 0030 BD46     		mov	sp, r7
 1778 0032 05B0     		add	sp, sp, #20
 1779              		@ sp needed
 1780 0034 90BD     		pop	{r4, r7, pc}
 1781              	.L110:
 1782 0036 C046     		.align	2
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 54


 1783              	.L109:
 1784 0038 08002040 		.word	1075838984
 1785              		.cfi_endproc
 1786              	.LFE34:
 1787              		.size	PWM_Red_TriggerCommand, .-PWM_Red_TriggerCommand
 1788              		.section	.text.PWM_Red_ReadStatus,"ax",%progbits
 1789              		.align	2
 1790              		.global	PWM_Red_ReadStatus
 1791              		.code	16
 1792              		.thumb_func
 1793              		.type	PWM_Red_ReadStatus, %function
 1794              	PWM_Red_ReadStatus:
 1795              	.LFB35:
1240:Generated_Source\PSoC4/PWM_Red.c **** 
1241:Generated_Source\PSoC4/PWM_Red.c **** 
1242:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
1243:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_ReadStatus
1244:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
1245:Generated_Source\PSoC4/PWM_Red.c **** *
1246:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
1247:Generated_Source\PSoC4/PWM_Red.c **** *  Reads the status of the PWM_Red.
1248:Generated_Source\PSoC4/PWM_Red.c **** *
1249:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
1250:Generated_Source\PSoC4/PWM_Red.c **** *  None
1251:Generated_Source\PSoC4/PWM_Red.c **** *
1252:Generated_Source\PSoC4/PWM_Red.c **** * Return:
1253:Generated_Source\PSoC4/PWM_Red.c **** *  Status
1254:Generated_Source\PSoC4/PWM_Red.c **** *   Values:
1255:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_STATUS_DOWN    - Set if counting down
1256:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_STATUS_RUNNING - Set if counter is running
1257:Generated_Source\PSoC4/PWM_Red.c **** *
1258:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
1259:Generated_Source\PSoC4/PWM_Red.c **** uint32 PWM_Red_ReadStatus(void)
1260:Generated_Source\PSoC4/PWM_Red.c **** {
 1796              		.loc 1 1260 0
 1797              		.cfi_startproc
 1798              		@ args = 0, pretend = 0, frame = 0
 1799              		@ frame_needed = 1, uses_anonymous_args = 0
 1800 0000 80B5     		push	{r7, lr}
 1801              		.cfi_def_cfa_offset 8
 1802              		.cfi_offset 7, -8
 1803              		.cfi_offset 14, -4
 1804 0002 00AF     		add	r7, sp, #0
 1805              		.cfi_def_cfa_register 7
1261:Generated_Source\PSoC4/PWM_Red.c ****     return ((PWM_Red_STATUS_REG >> PWM_Red_RUNNING_STATUS_SHIFT) |
 1806              		.loc 1 1261 0
 1807 0004 054B     		ldr	r3, .L113
 1808 0006 1B68     		ldr	r3, [r3]
 1809 0008 9A0F     		lsrs	r2, r3, #30
1262:Generated_Source\PSoC4/PWM_Red.c ****             (PWM_Red_STATUS_REG & PWM_Red_STATUS_DOWN));
 1810              		.loc 1 1262 0
 1811 000a 044B     		ldr	r3, .L113
 1812 000c 1B68     		ldr	r3, [r3]
 1813 000e 0121     		movs	r1, #1
 1814 0010 0B40     		ands	r3, r1
1261:Generated_Source\PSoC4/PWM_Red.c ****     return ((PWM_Red_STATUS_REG >> PWM_Red_RUNNING_STATUS_SHIFT) |
 1815              		.loc 1 1261 0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 55


 1816 0012 1343     		orrs	r3, r2
1263:Generated_Source\PSoC4/PWM_Red.c **** }
 1817              		.loc 1 1263 0
 1818 0014 1800     		movs	r0, r3
 1819 0016 BD46     		mov	sp, r7
 1820              		@ sp needed
 1821 0018 80BD     		pop	{r7, pc}
 1822              	.L114:
 1823 001a C046     		.align	2
 1824              	.L113:
 1825 001c 44012040 		.word	1075839300
 1826              		.cfi_endproc
 1827              	.LFE35:
 1828              		.size	PWM_Red_ReadStatus, .-PWM_Red_ReadStatus
 1829              		.section	.text.PWM_Red_SetInterruptMode,"ax",%progbits
 1830              		.align	2
 1831              		.global	PWM_Red_SetInterruptMode
 1832              		.code	16
 1833              		.thumb_func
 1834              		.type	PWM_Red_SetInterruptMode, %function
 1835              	PWM_Red_SetInterruptMode:
 1836              	.LFB36:
1264:Generated_Source\PSoC4/PWM_Red.c **** 
1265:Generated_Source\PSoC4/PWM_Red.c **** 
1266:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
1267:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_SetInterruptMode
1268:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
1269:Generated_Source\PSoC4/PWM_Red.c **** *
1270:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
1271:Generated_Source\PSoC4/PWM_Red.c **** *  Sets the interrupt mask to control which interrupt
1272:Generated_Source\PSoC4/PWM_Red.c **** *  requests generate the interrupt signal.
1273:Generated_Source\PSoC4/PWM_Red.c **** *
1274:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
1275:Generated_Source\PSoC4/PWM_Red.c **** *   interruptMask: Mask of bits to be enabled
1276:Generated_Source\PSoC4/PWM_Red.c **** *   Values:
1277:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_INTR_MASK_TC       - Terminal count mask
1278:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_INTR_MASK_CC_MATCH - Compare count / capture mask
1279:Generated_Source\PSoC4/PWM_Red.c **** *
1280:Generated_Source\PSoC4/PWM_Red.c **** * Return:
1281:Generated_Source\PSoC4/PWM_Red.c **** *  None
1282:Generated_Source\PSoC4/PWM_Red.c **** *
1283:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
1284:Generated_Source\PSoC4/PWM_Red.c **** void PWM_Red_SetInterruptMode(uint32 interruptMask)
1285:Generated_Source\PSoC4/PWM_Red.c **** {
 1837              		.loc 1 1285 0
 1838              		.cfi_startproc
 1839              		@ args = 0, pretend = 0, frame = 8
 1840              		@ frame_needed = 1, uses_anonymous_args = 0
 1841 0000 80B5     		push	{r7, lr}
 1842              		.cfi_def_cfa_offset 8
 1843              		.cfi_offset 7, -8
 1844              		.cfi_offset 14, -4
 1845 0002 82B0     		sub	sp, sp, #8
 1846              		.cfi_def_cfa_offset 16
 1847 0004 00AF     		add	r7, sp, #0
 1848              		.cfi_def_cfa_register 7
 1849 0006 7860     		str	r0, [r7, #4]
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 56


1286:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_INTERRUPT_MASK_REG =  interruptMask;
 1850              		.loc 1 1286 0
 1851 0008 034B     		ldr	r3, .L116
 1852 000a 7A68     		ldr	r2, [r7, #4]
 1853 000c 1A60     		str	r2, [r3]
1287:Generated_Source\PSoC4/PWM_Red.c **** }
 1854              		.loc 1 1287 0
 1855 000e C046     		nop
 1856 0010 BD46     		mov	sp, r7
 1857 0012 02B0     		add	sp, sp, #8
 1858              		@ sp needed
 1859 0014 80BD     		pop	{r7, pc}
 1860              	.L117:
 1861 0016 C046     		.align	2
 1862              	.L116:
 1863 0018 78012040 		.word	1075839352
 1864              		.cfi_endproc
 1865              	.LFE36:
 1866              		.size	PWM_Red_SetInterruptMode, .-PWM_Red_SetInterruptMode
 1867              		.section	.text.PWM_Red_GetInterruptSourceMasked,"ax",%progbits
 1868              		.align	2
 1869              		.global	PWM_Red_GetInterruptSourceMasked
 1870              		.code	16
 1871              		.thumb_func
 1872              		.type	PWM_Red_GetInterruptSourceMasked, %function
 1873              	PWM_Red_GetInterruptSourceMasked:
 1874              	.LFB37:
1288:Generated_Source\PSoC4/PWM_Red.c **** 
1289:Generated_Source\PSoC4/PWM_Red.c **** 
1290:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
1291:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_GetInterruptSourceMasked
1292:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
1293:Generated_Source\PSoC4/PWM_Red.c **** *
1294:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
1295:Generated_Source\PSoC4/PWM_Red.c **** *  Gets the interrupt requests masked by the interrupt mask.
1296:Generated_Source\PSoC4/PWM_Red.c **** *
1297:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
1298:Generated_Source\PSoC4/PWM_Red.c **** *   None
1299:Generated_Source\PSoC4/PWM_Red.c **** *
1300:Generated_Source\PSoC4/PWM_Red.c **** * Return:
1301:Generated_Source\PSoC4/PWM_Red.c **** *  Masked interrupt source
1302:Generated_Source\PSoC4/PWM_Red.c **** *   Values:
1303:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_INTR_MASK_TC       - Terminal count mask
1304:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_INTR_MASK_CC_MATCH - Compare count / capture mask
1305:Generated_Source\PSoC4/PWM_Red.c **** *
1306:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
1307:Generated_Source\PSoC4/PWM_Red.c **** uint32 PWM_Red_GetInterruptSourceMasked(void)
1308:Generated_Source\PSoC4/PWM_Red.c **** {
 1875              		.loc 1 1308 0
 1876              		.cfi_startproc
 1877              		@ args = 0, pretend = 0, frame = 0
 1878              		@ frame_needed = 1, uses_anonymous_args = 0
 1879 0000 80B5     		push	{r7, lr}
 1880              		.cfi_def_cfa_offset 8
 1881              		.cfi_offset 7, -8
 1882              		.cfi_offset 14, -4
 1883 0002 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 57


 1884              		.cfi_def_cfa_register 7
1309:Generated_Source\PSoC4/PWM_Red.c ****     return (PWM_Red_INTERRUPT_MASKED_REG);
 1885              		.loc 1 1309 0
 1886 0004 024B     		ldr	r3, .L120
 1887 0006 1B68     		ldr	r3, [r3]
1310:Generated_Source\PSoC4/PWM_Red.c **** }
 1888              		.loc 1 1310 0
 1889 0008 1800     		movs	r0, r3
 1890 000a BD46     		mov	sp, r7
 1891              		@ sp needed
 1892 000c 80BD     		pop	{r7, pc}
 1893              	.L121:
 1894 000e C046     		.align	2
 1895              	.L120:
 1896 0010 7C012040 		.word	1075839356
 1897              		.cfi_endproc
 1898              	.LFE37:
 1899              		.size	PWM_Red_GetInterruptSourceMasked, .-PWM_Red_GetInterruptSourceMasked
 1900              		.section	.text.PWM_Red_GetInterruptSource,"ax",%progbits
 1901              		.align	2
 1902              		.global	PWM_Red_GetInterruptSource
 1903              		.code	16
 1904              		.thumb_func
 1905              		.type	PWM_Red_GetInterruptSource, %function
 1906              	PWM_Red_GetInterruptSource:
 1907              	.LFB38:
1311:Generated_Source\PSoC4/PWM_Red.c **** 
1312:Generated_Source\PSoC4/PWM_Red.c **** 
1313:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
1314:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_GetInterruptSource
1315:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
1316:Generated_Source\PSoC4/PWM_Red.c **** *
1317:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
1318:Generated_Source\PSoC4/PWM_Red.c **** *  Gets the interrupt requests (without masking).
1319:Generated_Source\PSoC4/PWM_Red.c **** *
1320:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
1321:Generated_Source\PSoC4/PWM_Red.c **** *  None
1322:Generated_Source\PSoC4/PWM_Red.c **** *
1323:Generated_Source\PSoC4/PWM_Red.c **** * Return:
1324:Generated_Source\PSoC4/PWM_Red.c **** *  Interrupt request value
1325:Generated_Source\PSoC4/PWM_Red.c **** *   Values:
1326:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_INTR_MASK_TC       - Terminal count mask
1327:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_INTR_MASK_CC_MATCH - Compare count / capture mask
1328:Generated_Source\PSoC4/PWM_Red.c **** *
1329:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
1330:Generated_Source\PSoC4/PWM_Red.c **** uint32 PWM_Red_GetInterruptSource(void)
1331:Generated_Source\PSoC4/PWM_Red.c **** {
 1908              		.loc 1 1331 0
 1909              		.cfi_startproc
 1910              		@ args = 0, pretend = 0, frame = 0
 1911              		@ frame_needed = 1, uses_anonymous_args = 0
 1912 0000 80B5     		push	{r7, lr}
 1913              		.cfi_def_cfa_offset 8
 1914              		.cfi_offset 7, -8
 1915              		.cfi_offset 14, -4
 1916 0002 00AF     		add	r7, sp, #0
 1917              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 58


1332:Generated_Source\PSoC4/PWM_Red.c ****     return (PWM_Red_INTERRUPT_REQ_REG);
 1918              		.loc 1 1332 0
 1919 0004 024B     		ldr	r3, .L124
 1920 0006 1B68     		ldr	r3, [r3]
1333:Generated_Source\PSoC4/PWM_Red.c **** }
 1921              		.loc 1 1333 0
 1922 0008 1800     		movs	r0, r3
 1923 000a BD46     		mov	sp, r7
 1924              		@ sp needed
 1925 000c 80BD     		pop	{r7, pc}
 1926              	.L125:
 1927 000e C046     		.align	2
 1928              	.L124:
 1929 0010 70012040 		.word	1075839344
 1930              		.cfi_endproc
 1931              	.LFE38:
 1932              		.size	PWM_Red_GetInterruptSource, .-PWM_Red_GetInterruptSource
 1933              		.section	.text.PWM_Red_ClearInterrupt,"ax",%progbits
 1934              		.align	2
 1935              		.global	PWM_Red_ClearInterrupt
 1936              		.code	16
 1937              		.thumb_func
 1938              		.type	PWM_Red_ClearInterrupt, %function
 1939              	PWM_Red_ClearInterrupt:
 1940              	.LFB39:
1334:Generated_Source\PSoC4/PWM_Red.c **** 
1335:Generated_Source\PSoC4/PWM_Red.c **** 
1336:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
1337:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_ClearInterrupt
1338:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
1339:Generated_Source\PSoC4/PWM_Red.c **** *
1340:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
1341:Generated_Source\PSoC4/PWM_Red.c **** *  Clears the interrupt request.
1342:Generated_Source\PSoC4/PWM_Red.c **** *
1343:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
1344:Generated_Source\PSoC4/PWM_Red.c **** *   interruptMask: Mask of interrupts to clear
1345:Generated_Source\PSoC4/PWM_Red.c **** *   Values:
1346:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_INTR_MASK_TC       - Terminal count mask
1347:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_INTR_MASK_CC_MATCH - Compare count / capture mask
1348:Generated_Source\PSoC4/PWM_Red.c **** *
1349:Generated_Source\PSoC4/PWM_Red.c **** * Return:
1350:Generated_Source\PSoC4/PWM_Red.c **** *  None
1351:Generated_Source\PSoC4/PWM_Red.c **** *
1352:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
1353:Generated_Source\PSoC4/PWM_Red.c **** void PWM_Red_ClearInterrupt(uint32 interruptMask)
1354:Generated_Source\PSoC4/PWM_Red.c **** {
 1941              		.loc 1 1354 0
 1942              		.cfi_startproc
 1943              		@ args = 0, pretend = 0, frame = 8
 1944              		@ frame_needed = 1, uses_anonymous_args = 0
 1945 0000 80B5     		push	{r7, lr}
 1946              		.cfi_def_cfa_offset 8
 1947              		.cfi_offset 7, -8
 1948              		.cfi_offset 14, -4
 1949 0002 82B0     		sub	sp, sp, #8
 1950              		.cfi_def_cfa_offset 16
 1951 0004 00AF     		add	r7, sp, #0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 59


 1952              		.cfi_def_cfa_register 7
 1953 0006 7860     		str	r0, [r7, #4]
1355:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_INTERRUPT_REQ_REG = interruptMask;
 1954              		.loc 1 1355 0
 1955 0008 034B     		ldr	r3, .L127
 1956 000a 7A68     		ldr	r2, [r7, #4]
 1957 000c 1A60     		str	r2, [r3]
1356:Generated_Source\PSoC4/PWM_Red.c **** }
 1958              		.loc 1 1356 0
 1959 000e C046     		nop
 1960 0010 BD46     		mov	sp, r7
 1961 0012 02B0     		add	sp, sp, #8
 1962              		@ sp needed
 1963 0014 80BD     		pop	{r7, pc}
 1964              	.L128:
 1965 0016 C046     		.align	2
 1966              	.L127:
 1967 0018 70012040 		.word	1075839344
 1968              		.cfi_endproc
 1969              	.LFE39:
 1970              		.size	PWM_Red_ClearInterrupt, .-PWM_Red_ClearInterrupt
 1971              		.section	.text.PWM_Red_SetInterrupt,"ax",%progbits
 1972              		.align	2
 1973              		.global	PWM_Red_SetInterrupt
 1974              		.code	16
 1975              		.thumb_func
 1976              		.type	PWM_Red_SetInterrupt, %function
 1977              	PWM_Red_SetInterrupt:
 1978              	.LFB40:
1357:Generated_Source\PSoC4/PWM_Red.c **** 
1358:Generated_Source\PSoC4/PWM_Red.c **** 
1359:Generated_Source\PSoC4/PWM_Red.c **** /*******************************************************************************
1360:Generated_Source\PSoC4/PWM_Red.c **** * Function Name: PWM_Red_SetInterrupt
1361:Generated_Source\PSoC4/PWM_Red.c **** ********************************************************************************
1362:Generated_Source\PSoC4/PWM_Red.c **** *
1363:Generated_Source\PSoC4/PWM_Red.c **** * Summary:
1364:Generated_Source\PSoC4/PWM_Red.c **** *  Sets a software interrupt request.
1365:Generated_Source\PSoC4/PWM_Red.c **** *
1366:Generated_Source\PSoC4/PWM_Red.c **** * Parameters:
1367:Generated_Source\PSoC4/PWM_Red.c **** *   interruptMask: Mask of interrupts to set
1368:Generated_Source\PSoC4/PWM_Red.c **** *   Values:
1369:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_INTR_MASK_TC       - Terminal count mask
1370:Generated_Source\PSoC4/PWM_Red.c **** *     - PWM_Red_INTR_MASK_CC_MATCH - Compare count / capture mask
1371:Generated_Source\PSoC4/PWM_Red.c **** *
1372:Generated_Source\PSoC4/PWM_Red.c **** * Return:
1373:Generated_Source\PSoC4/PWM_Red.c **** *  None
1374:Generated_Source\PSoC4/PWM_Red.c **** *
1375:Generated_Source\PSoC4/PWM_Red.c **** *******************************************************************************/
1376:Generated_Source\PSoC4/PWM_Red.c **** void PWM_Red_SetInterrupt(uint32 interruptMask)
1377:Generated_Source\PSoC4/PWM_Red.c **** {
 1979              		.loc 1 1377 0
 1980              		.cfi_startproc
 1981              		@ args = 0, pretend = 0, frame = 8
 1982              		@ frame_needed = 1, uses_anonymous_args = 0
 1983 0000 80B5     		push	{r7, lr}
 1984              		.cfi_def_cfa_offset 8
 1985              		.cfi_offset 7, -8
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 60


 1986              		.cfi_offset 14, -4
 1987 0002 82B0     		sub	sp, sp, #8
 1988              		.cfi_def_cfa_offset 16
 1989 0004 00AF     		add	r7, sp, #0
 1990              		.cfi_def_cfa_register 7
 1991 0006 7860     		str	r0, [r7, #4]
1378:Generated_Source\PSoC4/PWM_Red.c ****     PWM_Red_INTERRUPT_SET_REG = interruptMask;
 1992              		.loc 1 1378 0
 1993 0008 034B     		ldr	r3, .L130
 1994 000a 7A68     		ldr	r2, [r7, #4]
 1995 000c 1A60     		str	r2, [r3]
1379:Generated_Source\PSoC4/PWM_Red.c **** }
 1996              		.loc 1 1379 0
 1997 000e C046     		nop
 1998 0010 BD46     		mov	sp, r7
 1999 0012 02B0     		add	sp, sp, #8
 2000              		@ sp needed
 2001 0014 80BD     		pop	{r7, pc}
 2002              	.L131:
 2003 0016 C046     		.align	2
 2004              	.L130:
 2005 0018 74012040 		.word	1075839348
 2006              		.cfi_endproc
 2007              	.LFE40:
 2008              		.size	PWM_Red_SetInterrupt, .-PWM_Red_SetInterrupt
 2009              		.text
 2010              	.Letext0:
 2011              		.file 2 "Generated_Source\\PSoC4\\cytypes.h"
 2012              		.section	.debug_info,"",%progbits
 2013              	.Ldebug_info0:
 2014 0000 F3060000 		.4byte	0x6f3
 2015 0004 0400     		.2byte	0x4
 2016 0006 00000000 		.4byte	.Ldebug_abbrev0
 2017 000a 04       		.byte	0x4
 2018 000b 01       		.uleb128 0x1
 2019 000c 27020000 		.4byte	.LASF77
 2020 0010 0C       		.byte	0xc
 2021 0011 D3000000 		.4byte	.LASF78
 2022 0015 9A040000 		.4byte	.LASF79
 2023 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2024 001d 00000000 		.4byte	0
 2025 0021 00000000 		.4byte	.Ldebug_line0
 2026 0025 02       		.uleb128 0x2
 2027 0026 01       		.byte	0x1
 2028 0027 06       		.byte	0x6
 2029 0028 B8000000 		.4byte	.LASF0
 2030 002c 02       		.uleb128 0x2
 2031 002d 01       		.byte	0x1
 2032 002e 08       		.byte	0x8
 2033 002f 57030000 		.4byte	.LASF1
 2034 0033 02       		.uleb128 0x2
 2035 0034 02       		.byte	0x2
 2036 0035 05       		.byte	0x5
 2037 0036 76030000 		.4byte	.LASF2
 2038 003a 02       		.uleb128 0x2
 2039 003b 02       		.byte	0x2
 2040 003c 07       		.byte	0x7
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 61


 2041 003d C5010000 		.4byte	.LASF3
 2042 0041 02       		.uleb128 0x2
 2043 0042 04       		.byte	0x4
 2044 0043 05       		.byte	0x5
 2045 0044 F4000000 		.4byte	.LASF4
 2046 0048 02       		.uleb128 0x2
 2047 0049 04       		.byte	0x4
 2048 004a 07       		.byte	0x7
 2049 004b 93010000 		.4byte	.LASF5
 2050 004f 02       		.uleb128 0x2
 2051 0050 08       		.byte	0x8
 2052 0051 05       		.byte	0x5
 2053 0052 AA000000 		.4byte	.LASF6
 2054 0056 02       		.uleb128 0x2
 2055 0057 08       		.byte	0x8
 2056 0058 07       		.byte	0x7
 2057 0059 61000000 		.4byte	.LASF7
 2058 005d 03       		.uleb128 0x3
 2059 005e 04       		.byte	0x4
 2060 005f 05       		.byte	0x5
 2061 0060 696E7400 		.ascii	"int\000"
 2062 0064 02       		.uleb128 0x2
 2063 0065 04       		.byte	0x4
 2064 0066 07       		.byte	0x7
 2065 0067 7E010000 		.4byte	.LASF8
 2066 006b 04       		.uleb128 0x4
 2067 006c FD000000 		.4byte	.LASF9
 2068 0070 02       		.byte	0x2
 2069 0071 C2       		.byte	0xc2
 2070 0072 2C000000 		.4byte	0x2c
 2071 0076 04       		.uleb128 0x4
 2072 0077 35010000 		.4byte	.LASF10
 2073 007b 02       		.byte	0x2
 2074 007c C4       		.byte	0xc4
 2075 007d 48000000 		.4byte	0x48
 2076 0081 02       		.uleb128 0x2
 2077 0082 04       		.byte	0x4
 2078 0083 04       		.byte	0x4
 2079 0084 30030000 		.4byte	.LASF11
 2080 0088 02       		.uleb128 0x2
 2081 0089 08       		.byte	0x8
 2082 008a 04       		.byte	0x4
 2083 008b 03010000 		.4byte	.LASF12
 2084 008f 02       		.uleb128 0x2
 2085 0090 01       		.byte	0x1
 2086 0091 08       		.byte	0x8
 2087 0092 3B040000 		.4byte	.LASF13
 2088 0096 05       		.uleb128 0x5
 2089 0097 B5020000 		.4byte	.LASF14
 2090 009b 02       		.byte	0x2
 2091 009c 6E01     		.2byte	0x16e
 2092 009e A2000000 		.4byte	0xa2
 2093 00a2 06       		.uleb128 0x6
 2094 00a3 76000000 		.4byte	0x76
 2095 00a7 02       		.uleb128 0x2
 2096 00a8 08       		.byte	0x8
 2097 00a9 04       		.byte	0x4
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 62


 2098 00aa DB020000 		.4byte	.LASF15
 2099 00ae 02       		.uleb128 0x2
 2100 00af 04       		.byte	0x4
 2101 00b0 07       		.byte	0x7
 2102 00b1 D2020000 		.4byte	.LASF16
 2103 00b5 07       		.uleb128 0x7
 2104 00b6 23030000 		.4byte	.LASF17
 2105 00ba 01       		.byte	0x1
 2106 00bb 26       		.byte	0x26
 2107 00bc 00000000 		.4byte	.LFB1
 2108 00c0 58000000 		.4byte	.LFE1-.LFB1
 2109 00c4 01       		.uleb128 0x1
 2110 00c5 9C       		.byte	0x9c
 2111 00c6 08       		.uleb128 0x8
 2112 00c7 C4000000 		.4byte	.LASF19
 2113 00cb 01       		.byte	0x1
 2114 00cc B1       		.byte	0xb1
 2115 00cd 00000000 		.4byte	.LFB2
 2116 00d1 3C000000 		.4byte	.LFE2-.LFB2
 2117 00d5 01       		.uleb128 0x1
 2118 00d6 9C       		.byte	0x9c
 2119 00d7 EA000000 		.4byte	0xea
 2120 00db 09       		.uleb128 0x9
 2121 00dc 0B050000 		.4byte	.LASF21
 2122 00e0 01       		.byte	0x1
 2123 00e1 B3       		.byte	0xb3
 2124 00e2 6B000000 		.4byte	0x6b
 2125 00e6 02       		.uleb128 0x2
 2126 00e7 91       		.byte	0x91
 2127 00e8 6F       		.sleb128 -17
 2128 00e9 00       		.byte	0
 2129 00ea 07       		.uleb128 0x7
 2130 00eb 0D030000 		.4byte	.LASF18
 2131 00ef 01       		.byte	0x1
 2132 00f0 E0       		.byte	0xe0
 2133 00f1 00000000 		.4byte	.LFB3
 2134 00f5 24000000 		.4byte	.LFE3-.LFB3
 2135 00f9 01       		.uleb128 0x1
 2136 00fa 9C       		.byte	0x9c
 2137 00fb 08       		.uleb128 0x8
 2138 00fc 07020000 		.4byte	.LASF20
 2139 0100 01       		.byte	0x1
 2140 0101 FA       		.byte	0xfa
 2141 0102 00000000 		.4byte	.LFB4
 2142 0106 34000000 		.4byte	.LFE4-.LFB4
 2143 010a 01       		.uleb128 0x1
 2144 010b 9C       		.byte	0x9c
 2145 010c 1F010000 		.4byte	0x11f
 2146 0110 09       		.uleb128 0x9
 2147 0111 0B050000 		.4byte	.LASF21
 2148 0115 01       		.byte	0x1
 2149 0116 FC       		.byte	0xfc
 2150 0117 6B000000 		.4byte	0x6b
 2151 011b 02       		.uleb128 0x2
 2152 011c 91       		.byte	0x91
 2153 011d 6F       		.sleb128 -17
 2154 011e 00       		.byte	0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 63


 2155 011f 0A       		.uleb128 0xa
 2156 0120 94050000 		.4byte	.LASF22
 2157 0124 01       		.byte	0x1
 2158 0125 1F01     		.2byte	0x11f
 2159 0127 00000000 		.4byte	.LFB5
 2160 012b 48000000 		.4byte	.LFE5-.LFB5
 2161 012f 01       		.uleb128 0x1
 2162 0130 9C       		.byte	0x9c
 2163 0131 54010000 		.4byte	0x154
 2164 0135 0B       		.uleb128 0xb
 2165 0136 40040000 		.4byte	.LASF24
 2166 013a 01       		.byte	0x1
 2167 013b 1F01     		.2byte	0x11f
 2168 013d 76000000 		.4byte	0x76
 2169 0141 02       		.uleb128 0x2
 2170 0142 91       		.byte	0x91
 2171 0143 64       		.sleb128 -28
 2172 0144 0C       		.uleb128 0xc
 2173 0145 0B050000 		.4byte	.LASF21
 2174 0149 01       		.byte	0x1
 2175 014a 2101     		.2byte	0x121
 2176 014c 6B000000 		.4byte	0x6b
 2177 0150 02       		.uleb128 0x2
 2178 0151 91       		.byte	0x91
 2179 0152 6F       		.sleb128 -17
 2180 0153 00       		.byte	0
 2181 0154 0A       		.uleb128 0xa
 2182 0155 E5030000 		.4byte	.LASF23
 2183 0159 01       		.byte	0x1
 2184 015a 4001     		.2byte	0x140
 2185 015c 00000000 		.4byte	.LFB6
 2186 0160 48000000 		.4byte	.LFE6-.LFB6
 2187 0164 01       		.uleb128 0x1
 2188 0165 9C       		.byte	0x9c
 2189 0166 89010000 		.4byte	0x189
 2190 016a 0B       		.uleb128 0xb
 2191 016b 78000000 		.4byte	.LASF25
 2192 016f 01       		.byte	0x1
 2193 0170 4001     		.2byte	0x140
 2194 0172 76000000 		.4byte	0x76
 2195 0176 02       		.uleb128 0x2
 2196 0177 91       		.byte	0x91
 2197 0178 64       		.sleb128 -28
 2198 0179 0C       		.uleb128 0xc
 2199 017a 0B050000 		.4byte	.LASF21
 2200 017e 01       		.byte	0x1
 2201 017f 4201     		.2byte	0x142
 2202 0181 6B000000 		.4byte	0x6b
 2203 0185 02       		.uleb128 0x2
 2204 0186 91       		.byte	0x91
 2205 0187 6F       		.sleb128 -17
 2206 0188 00       		.byte	0
 2207 0189 0A       		.uleb128 0xa
 2208 018a 6A050000 		.4byte	.LASF26
 2209 018e 01       		.byte	0x1
 2210 018f 6501     		.2byte	0x165
 2211 0191 00000000 		.4byte	.LFB7
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 64


 2212 0195 48000000 		.4byte	.LFE7-.LFB7
 2213 0199 01       		.uleb128 0x1
 2214 019a 9C       		.byte	0x9c
 2215 019b BE010000 		.4byte	0x1be
 2216 019f 0B       		.uleb128 0xb
 2217 01a0 36030000 		.4byte	.LASF27
 2218 01a4 01       		.byte	0x1
 2219 01a5 6501     		.2byte	0x165
 2220 01a7 76000000 		.4byte	0x76
 2221 01ab 02       		.uleb128 0x2
 2222 01ac 91       		.byte	0x91
 2223 01ad 64       		.sleb128 -28
 2224 01ae 0C       		.uleb128 0xc
 2225 01af 0B050000 		.4byte	.LASF21
 2226 01b3 01       		.byte	0x1
 2227 01b4 6701     		.2byte	0x167
 2228 01b6 6B000000 		.4byte	0x6b
 2229 01ba 02       		.uleb128 0x2
 2230 01bb 91       		.byte	0x91
 2231 01bc 6F       		.sleb128 -17
 2232 01bd 00       		.byte	0
 2233 01be 0A       		.uleb128 0xa
 2234 01bf 1F000000 		.4byte	.LASF28
 2235 01c3 01       		.byte	0x1
 2236 01c4 8501     		.2byte	0x185
 2237 01c6 00000000 		.4byte	.LFB8
 2238 01ca 50000000 		.4byte	.LFE8-.LFB8
 2239 01ce 01       		.uleb128 0x1
 2240 01cf 9C       		.byte	0x9c
 2241 01d0 F3010000 		.4byte	0x1f3
 2242 01d4 0B       		.uleb128 0xb
 2243 01d5 D8010000 		.4byte	.LASF29
 2244 01d9 01       		.byte	0x1
 2245 01da 8501     		.2byte	0x185
 2246 01dc 76000000 		.4byte	0x76
 2247 01e0 02       		.uleb128 0x2
 2248 01e1 91       		.byte	0x91
 2249 01e2 64       		.sleb128 -28
 2250 01e3 0C       		.uleb128 0xc
 2251 01e4 0B050000 		.4byte	.LASF21
 2252 01e8 01       		.byte	0x1
 2253 01e9 8701     		.2byte	0x187
 2254 01eb 6B000000 		.4byte	0x6b
 2255 01ef 02       		.uleb128 0x2
 2256 01f0 91       		.byte	0x91
 2257 01f1 6F       		.sleb128 -17
 2258 01f2 00       		.byte	0
 2259 01f3 0D       		.uleb128 0xd
 2260 01f4 14020000 		.4byte	.LASF30
 2261 01f8 01       		.byte	0x1
 2262 01f9 BB01     		.2byte	0x1bb
 2263 01fb 00000000 		.4byte	.LFB9
 2264 01ff 20000000 		.4byte	.LFE9-.LFB9
 2265 0203 01       		.uleb128 0x1
 2266 0204 9C       		.byte	0x9c
 2267 0205 19020000 		.4byte	0x219
 2268 0209 0B       		.uleb128 0xb
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 65


 2269 020a A5010000 		.4byte	.LASF31
 2270 020e 01       		.byte	0x1
 2271 020f BB01     		.2byte	0x1bb
 2272 0211 76000000 		.4byte	0x76
 2273 0215 02       		.uleb128 0x2
 2274 0216 91       		.byte	0x91
 2275 0217 74       		.sleb128 -12
 2276 0218 00       		.byte	0
 2277 0219 0A       		.uleb128 0xa
 2278 021a F4040000 		.4byte	.LASF32
 2279 021e 01       		.byte	0x1
 2280 021f DF01     		.2byte	0x1df
 2281 0221 00000000 		.4byte	.LFB10
 2282 0225 4C000000 		.4byte	.LFE10-.LFB10
 2283 0229 01       		.uleb128 0x1
 2284 022a 9C       		.byte	0x9c
 2285 022b 4E020000 		.4byte	0x24e
 2286 022f 0B       		.uleb128 0xb
 2287 0230 50050000 		.4byte	.LASF33
 2288 0234 01       		.byte	0x1
 2289 0235 DF01     		.2byte	0x1df
 2290 0237 76000000 		.4byte	0x76
 2291 023b 02       		.uleb128 0x2
 2292 023c 91       		.byte	0x91
 2293 023d 64       		.sleb128 -28
 2294 023e 0C       		.uleb128 0xc
 2295 023f 0B050000 		.4byte	.LASF21
 2296 0243 01       		.byte	0x1
 2297 0244 E101     		.2byte	0x1e1
 2298 0246 6B000000 		.4byte	0x6b
 2299 024a 02       		.uleb128 0x2
 2300 024b 91       		.byte	0x91
 2301 024c 6F       		.sleb128 -17
 2302 024d 00       		.byte	0
 2303 024e 0A       		.uleb128 0xa
 2304 024f 1C050000 		.4byte	.LASF34
 2305 0253 01       		.byte	0x1
 2306 0254 0102     		.2byte	0x201
 2307 0256 00000000 		.4byte	.LFB11
 2308 025a 4C000000 		.4byte	.LFE11-.LFB11
 2309 025e 01       		.uleb128 0x1
 2310 025f 9C       		.byte	0x9c
 2311 0260 83020000 		.4byte	0x283
 2312 0264 0B       		.uleb128 0xb
 2313 0265 65030000 		.4byte	.LASF35
 2314 0269 01       		.byte	0x1
 2315 026a 0102     		.2byte	0x201
 2316 026c 76000000 		.4byte	0x76
 2317 0270 02       		.uleb128 0x2
 2318 0271 91       		.byte	0x91
 2319 0272 64       		.sleb128 -28
 2320 0273 0C       		.uleb128 0xc
 2321 0274 0B050000 		.4byte	.LASF21
 2322 0278 01       		.byte	0x1
 2323 0279 0302     		.2byte	0x203
 2324 027b 6B000000 		.4byte	0x6b
 2325 027f 02       		.uleb128 0x2
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 66


 2326 0280 91       		.byte	0x91
 2327 0281 6F       		.sleb128 -17
 2328 0282 00       		.byte	0
 2329 0283 0A       		.uleb128 0xa
 2330 0284 93000000 		.4byte	.LASF36
 2331 0288 01       		.byte	0x1
 2332 0289 2202     		.2byte	0x222
 2333 028b 00000000 		.4byte	.LFB12
 2334 028f 50000000 		.4byte	.LFE12-.LFB12
 2335 0293 01       		.uleb128 0x1
 2336 0294 9C       		.byte	0x9c
 2337 0295 B8020000 		.4byte	0x2b8
 2338 0299 0B       		.uleb128 0xb
 2339 029a 75010000 		.4byte	.LASF37
 2340 029e 01       		.byte	0x1
 2341 029f 2202     		.2byte	0x222
 2342 02a1 76000000 		.4byte	0x76
 2343 02a5 02       		.uleb128 0x2
 2344 02a6 91       		.byte	0x91
 2345 02a7 64       		.sleb128 -28
 2346 02a8 0C       		.uleb128 0xc
 2347 02a9 0B050000 		.4byte	.LASF21
 2348 02ad 01       		.byte	0x1
 2349 02ae 2402     		.2byte	0x224
 2350 02b0 6B000000 		.4byte	0x6b
 2351 02b4 02       		.uleb128 0x2
 2352 02b5 91       		.byte	0x91
 2353 02b6 6F       		.sleb128 -17
 2354 02b7 00       		.byte	0
 2355 02b8 0A       		.uleb128 0xa
 2356 02b9 4C000000 		.4byte	.LASF38
 2357 02bd 01       		.byte	0x1
 2358 02be 4302     		.2byte	0x243
 2359 02c0 00000000 		.4byte	.LFB13
 2360 02c4 48000000 		.4byte	.LFE13-.LFB13
 2361 02c8 01       		.uleb128 0x1
 2362 02c9 9C       		.byte	0x9c
 2363 02ca ED020000 		.4byte	0x2ed
 2364 02ce 0B       		.uleb128 0xb
 2365 02cf 5B010000 		.4byte	.LASF39
 2366 02d3 01       		.byte	0x1
 2367 02d4 4302     		.2byte	0x243
 2368 02d6 76000000 		.4byte	0x76
 2369 02da 02       		.uleb128 0x2
 2370 02db 91       		.byte	0x91
 2371 02dc 64       		.sleb128 -28
 2372 02dd 0C       		.uleb128 0xc
 2373 02de 0B050000 		.4byte	.LASF21
 2374 02e2 01       		.byte	0x1
 2375 02e3 4502     		.2byte	0x245
 2376 02e5 6B000000 		.4byte	0x6b
 2377 02e9 02       		.uleb128 0x2
 2378 02ea 91       		.byte	0x91
 2379 02eb 6F       		.sleb128 -17
 2380 02ec 00       		.byte	0
 2381 02ed 0D       		.uleb128 0xd
 2382 02ee 7F050000 		.4byte	.LASF40
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 67


 2383 02f2 01       		.byte	0x1
 2384 02f3 6102     		.2byte	0x261
 2385 02f5 00000000 		.4byte	.LFB14
 2386 02f9 20000000 		.4byte	.LFE14-.LFB14
 2387 02fd 01       		.uleb128 0x1
 2388 02fe 9C       		.byte	0x9c
 2389 02ff 13030000 		.4byte	0x313
 2390 0303 0B       		.uleb128 0xb
 2391 0304 19000000 		.4byte	.LASF41
 2392 0308 01       		.byte	0x1
 2393 0309 6102     		.2byte	0x261
 2394 030b 76000000 		.4byte	0x76
 2395 030f 02       		.uleb128 0x2
 2396 0310 91       		.byte	0x91
 2397 0311 74       		.sleb128 -12
 2398 0312 00       		.byte	0
 2399 0313 0E       		.uleb128 0xe
 2400 0314 66040000 		.4byte	.LASF46
 2401 0318 01       		.byte	0x1
 2402 0319 7502     		.2byte	0x275
 2403 031b 76000000 		.4byte	0x76
 2404 031f 00000000 		.4byte	.LFB15
 2405 0323 18000000 		.4byte	.LFE15-.LFB15
 2406 0327 01       		.uleb128 0x1
 2407 0328 9C       		.byte	0x9c
 2408 0329 0A       		.uleb128 0xa
 2409 032a BB020000 		.4byte	.LASF42
 2410 032e 01       		.byte	0x1
 2411 032f 9202     		.2byte	0x292
 2412 0331 00000000 		.4byte	.LFB16
 2413 0335 48000000 		.4byte	.LFE16-.LFB16
 2414 0339 01       		.uleb128 0x1
 2415 033a 9C       		.byte	0x9c
 2416 033b 5E030000 		.4byte	0x35e
 2417 033f 0B       		.uleb128 0xb
 2418 0340 5A040000 		.4byte	.LASF43
 2419 0344 01       		.byte	0x1
 2420 0345 9202     		.2byte	0x292
 2421 0347 76000000 		.4byte	0x76
 2422 034b 02       		.uleb128 0x2
 2423 034c 91       		.byte	0x91
 2424 034d 64       		.sleb128 -28
 2425 034e 0C       		.uleb128 0xc
 2426 034f 0B050000 		.4byte	.LASF21
 2427 0353 01       		.byte	0x1
 2428 0354 9402     		.2byte	0x294
 2429 0356 6B000000 		.4byte	0x6b
 2430 035a 02       		.uleb128 0x2
 2431 035b 91       		.byte	0x91
 2432 035c 6F       		.sleb128 -17
 2433 035d 00       		.byte	0
 2434 035e 0D       		.uleb128 0xd
 2435 035f 7F000000 		.4byte	.LASF44
 2436 0363 01       		.byte	0x1
 2437 0364 AF02     		.2byte	0x2af
 2438 0366 00000000 		.4byte	.LFB17
 2439 036a 20000000 		.4byte	.LFE17-.LFB17
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 68


 2440 036e 01       		.uleb128 0x1
 2441 036f 9C       		.byte	0x9c
 2442 0370 84030000 		.4byte	0x384
 2443 0374 0B       		.uleb128 0xb
 2444 0375 45000000 		.4byte	.LASF45
 2445 0379 01       		.byte	0x1
 2446 037a AF02     		.2byte	0x2af
 2447 037c 76000000 		.4byte	0x76
 2448 0380 02       		.uleb128 0x2
 2449 0381 91       		.byte	0x91
 2450 0382 74       		.sleb128 -12
 2451 0383 00       		.byte	0
 2452 0384 0E       		.uleb128 0xe
 2453 0385 3C010000 		.4byte	.LASF47
 2454 0389 01       		.byte	0x1
 2455 038a C302     		.2byte	0x2c3
 2456 038c 76000000 		.4byte	0x76
 2457 0390 00000000 		.4byte	.LFB18
 2458 0394 18000000 		.4byte	.LFE18-.LFB18
 2459 0398 01       		.uleb128 0x1
 2460 0399 9C       		.byte	0x9c
 2461 039a 0A       		.uleb128 0xa
 2462 039b 0E040000 		.4byte	.LASF48
 2463 039f 01       		.byte	0x1
 2464 03a0 DD02     		.2byte	0x2dd
 2465 03a2 00000000 		.4byte	.LFB19
 2466 03a6 48000000 		.4byte	.LFE19-.LFB19
 2467 03aa 01       		.uleb128 0x1
 2468 03ab 9C       		.byte	0x9c
 2469 03ac CF030000 		.4byte	0x3cf
 2470 03b0 0B       		.uleb128 0xb
 2471 03b1 5F050000 		.4byte	.LASF49
 2472 03b5 01       		.byte	0x1
 2473 03b6 DD02     		.2byte	0x2dd
 2474 03b8 76000000 		.4byte	0x76
 2475 03bc 02       		.uleb128 0x2
 2476 03bd 91       		.byte	0x91
 2477 03be 64       		.sleb128 -28
 2478 03bf 0C       		.uleb128 0xc
 2479 03c0 0B050000 		.4byte	.LASF21
 2480 03c4 01       		.byte	0x1
 2481 03c5 DF02     		.2byte	0x2df
 2482 03c7 6B000000 		.4byte	0x6b
 2483 03cb 02       		.uleb128 0x2
 2484 03cc 91       		.byte	0x91
 2485 03cd 6F       		.sleb128 -17
 2486 03ce 00       		.byte	0
 2487 03cf 0D       		.uleb128 0xd
 2488 03d0 1E010000 		.4byte	.LASF50
 2489 03d4 01       		.byte	0x1
 2490 03d5 F802     		.2byte	0x2f8
 2491 03d7 00000000 		.4byte	.LFB20
 2492 03db 20000000 		.4byte	.LFE20-.LFB20
 2493 03df 01       		.uleb128 0x1
 2494 03e0 9C       		.byte	0x9c
 2495 03e1 F5030000 		.4byte	0x3f5
 2496 03e5 0B       		.uleb128 0xb
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 69


 2497 03e6 D2050000 		.4byte	.LASF51
 2498 03ea 01       		.byte	0x1
 2499 03eb F802     		.2byte	0x2f8
 2500 03ed 76000000 		.4byte	0x76
 2501 03f1 02       		.uleb128 0x2
 2502 03f2 91       		.byte	0x91
 2503 03f3 74       		.sleb128 -12
 2504 03f4 00       		.byte	0
 2505 03f5 0E       		.uleb128 0xe
 2506 03f6 25040000 		.4byte	.LASF52
 2507 03fa 01       		.byte	0x1
 2508 03fb 0C03     		.2byte	0x30c
 2509 03fd 76000000 		.4byte	0x76
 2510 0401 00000000 		.4byte	.LFB21
 2511 0405 18000000 		.4byte	.LFE21-.LFB21
 2512 0409 01       		.uleb128 0x1
 2513 040a 9C       		.byte	0x9c
 2514 040b 0A       		.uleb128 0xa
 2515 040c F7020000 		.4byte	.LASF53
 2516 0410 01       		.byte	0x1
 2517 0411 2603     		.2byte	0x326
 2518 0413 00000000 		.4byte	.LFB22
 2519 0417 4C000000 		.4byte	.LFE22-.LFB22
 2520 041b 01       		.uleb128 0x1
 2521 041c 9C       		.byte	0x9c
 2522 041d 40040000 		.4byte	0x440
 2523 0421 0B       		.uleb128 0xb
 2524 0422 5F050000 		.4byte	.LASF49
 2525 0426 01       		.byte	0x1
 2526 0427 2603     		.2byte	0x326
 2527 0429 76000000 		.4byte	0x76
 2528 042d 02       		.uleb128 0x2
 2529 042e 91       		.byte	0x91
 2530 042f 64       		.sleb128 -28
 2531 0430 0C       		.uleb128 0xc
 2532 0431 0B050000 		.4byte	.LASF21
 2533 0435 01       		.byte	0x1
 2534 0436 2803     		.2byte	0x328
 2535 0438 6B000000 		.4byte	0x6b
 2536 043c 02       		.uleb128 0x2
 2537 043d 91       		.byte	0x91
 2538 043e 6F       		.sleb128 -17
 2539 043f 00       		.byte	0
 2540 0440 0D       		.uleb128 0xd
 2541 0441 7A040000 		.4byte	.LASF54
 2542 0445 01       		.byte	0x1
 2543 0446 4303     		.2byte	0x343
 2544 0448 00000000 		.4byte	.LFB23
 2545 044c 20000000 		.4byte	.LFE23-.LFB23
 2546 0450 01       		.uleb128 0x1
 2547 0451 9C       		.byte	0x9c
 2548 0452 66040000 		.4byte	0x466
 2549 0456 0B       		.uleb128 0xb
 2550 0457 1B030000 		.4byte	.LASF55
 2551 045b 01       		.byte	0x1
 2552 045c 4303     		.2byte	0x343
 2553 045e 76000000 		.4byte	0x76
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 70


 2554 0462 02       		.uleb128 0x2
 2555 0463 91       		.byte	0x91
 2556 0464 74       		.sleb128 -12
 2557 0465 00       		.byte	0
 2558 0466 0E       		.uleb128 0xe
 2559 0467 80030000 		.4byte	.LASF56
 2560 046b 01       		.byte	0x1
 2561 046c 6E03     		.2byte	0x36e
 2562 046e 76000000 		.4byte	0x76
 2563 0472 00000000 		.4byte	.LFB24
 2564 0476 18000000 		.4byte	.LFE24-.LFB24
 2565 047a 01       		.uleb128 0x1
 2566 047b 9C       		.byte	0x9c
 2567 047c 0D       		.uleb128 0xd
 2568 047d B8030000 		.4byte	.LASF57
 2569 0481 01       		.byte	0x1
 2570 0482 9C03     		.2byte	0x39c
 2571 0484 00000000 		.4byte	.LFB25
 2572 0488 20000000 		.4byte	.LFE25-.LFB25
 2573 048c 01       		.uleb128 0x1
 2574 048d 9C       		.byte	0x9c
 2575 048e A2040000 		.4byte	0x4a2
 2576 0492 0B       		.uleb128 0xb
 2577 0493 8F040000 		.4byte	.LASF58
 2578 0497 01       		.byte	0x1
 2579 0498 9C03     		.2byte	0x39c
 2580 049a 76000000 		.4byte	0x76
 2581 049e 02       		.uleb128 0x2
 2582 049f 91       		.byte	0x91
 2583 04a0 74       		.sleb128 -12
 2584 04a1 00       		.byte	0
 2585 04a2 0E       		.uleb128 0xe
 2586 04a3 F7030000 		.4byte	.LASF59
 2587 04a7 01       		.byte	0x1
 2588 04a8 C503     		.2byte	0x3c5
 2589 04aa 76000000 		.4byte	0x76
 2590 04ae 00000000 		.4byte	.LFB26
 2591 04b2 18000000 		.4byte	.LFE26-.LFB26
 2592 04b6 01       		.uleb128 0x1
 2593 04b7 9C       		.byte	0x9c
 2594 04b8 0E       		.uleb128 0xe
 2595 04b9 0A010000 		.4byte	.LASF60
 2596 04bd 01       		.byte	0x1
 2597 04be F303     		.2byte	0x3f3
 2598 04c0 76000000 		.4byte	0x76
 2599 04c4 00000000 		.4byte	.LFB27
 2600 04c8 18000000 		.4byte	.LFE27-.LFB27
 2601 04cc 01       		.uleb128 0x1
 2602 04cd 9C       		.byte	0x9c
 2603 04ce 0E       		.uleb128 0xe
 2604 04cf AE010000 		.4byte	.LASF61
 2605 04d3 01       		.byte	0x1
 2606 04d4 0804     		.2byte	0x408
 2607 04d6 76000000 		.4byte	0x76
 2608 04da 00000000 		.4byte	.LFB28
 2609 04de 18000000 		.4byte	.LFE28-.LFB28
 2610 04e2 01       		.uleb128 0x1
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 71


 2611 04e3 9C       		.byte	0x9c
 2612 04e4 0A       		.uleb128 0xa
 2613 04e5 40030000 		.4byte	.LASF62
 2614 04e9 01       		.byte	0x1
 2615 04ea 2304     		.2byte	0x423
 2616 04ec 00000000 		.4byte	.LFB29
 2617 04f0 44000000 		.4byte	.LFE29-.LFB29
 2618 04f4 01       		.uleb128 0x1
 2619 04f5 9C       		.byte	0x9c
 2620 04f6 19050000 		.4byte	0x519
 2621 04fa 0B       		.uleb128 0xb
 2622 04fb 4F010000 		.4byte	.LASF63
 2623 04ff 01       		.byte	0x1
 2624 0500 2304     		.2byte	0x423
 2625 0502 76000000 		.4byte	0x76
 2626 0506 02       		.uleb128 0x2
 2627 0507 91       		.byte	0x91
 2628 0508 64       		.sleb128 -28
 2629 0509 0C       		.uleb128 0xc
 2630 050a 0B050000 		.4byte	.LASF21
 2631 050e 01       		.byte	0x1
 2632 050f 2504     		.2byte	0x425
 2633 0511 6B000000 		.4byte	0x6b
 2634 0515 02       		.uleb128 0x2
 2635 0516 91       		.byte	0x91
 2636 0517 6F       		.sleb128 -17
 2637 0518 00       		.byte	0
 2638 0519 0A       		.uleb128 0xa
 2639 051a A2030000 		.4byte	.LASF64
 2640 051e 01       		.byte	0x1
 2641 051f 4404     		.2byte	0x444
 2642 0521 00000000 		.4byte	.LFB30
 2643 0525 48000000 		.4byte	.LFE30-.LFB30
 2644 0529 01       		.uleb128 0x1
 2645 052a 9C       		.byte	0x9c
 2646 052b 4E050000 		.4byte	0x54e
 2647 052f 0B       		.uleb128 0xb
 2648 0530 4F010000 		.4byte	.LASF63
 2649 0534 01       		.byte	0x1
 2650 0535 4404     		.2byte	0x444
 2651 0537 76000000 		.4byte	0x76
 2652 053b 02       		.uleb128 0x2
 2653 053c 91       		.byte	0x91
 2654 053d 64       		.sleb128 -28
 2655 053e 0C       		.uleb128 0xc
 2656 053f 0B050000 		.4byte	.LASF21
 2657 0543 01       		.byte	0x1
 2658 0544 4604     		.2byte	0x446
 2659 0546 6B000000 		.4byte	0x6b
 2660 054a 02       		.uleb128 0x2
 2661 054b 91       		.byte	0x91
 2662 054c 6F       		.sleb128 -17
 2663 054d 00       		.byte	0
 2664 054e 0A       		.uleb128 0xa
 2665 054f 45040000 		.4byte	.LASF65
 2666 0553 01       		.byte	0x1
 2667 0554 6504     		.2byte	0x465
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 72


 2668 0556 00000000 		.4byte	.LFB31
 2669 055a 4C000000 		.4byte	.LFE31-.LFB31
 2670 055e 01       		.uleb128 0x1
 2671 055f 9C       		.byte	0x9c
 2672 0560 83050000 		.4byte	0x583
 2673 0564 0B       		.uleb128 0xb
 2674 0565 4F010000 		.4byte	.LASF63
 2675 0569 01       		.byte	0x1
 2676 056a 6504     		.2byte	0x465
 2677 056c 76000000 		.4byte	0x76
 2678 0570 02       		.uleb128 0x2
 2679 0571 91       		.byte	0x91
 2680 0572 64       		.sleb128 -28
 2681 0573 0C       		.uleb128 0xc
 2682 0574 0B050000 		.4byte	.LASF21
 2683 0578 01       		.byte	0x1
 2684 0579 6704     		.2byte	0x467
 2685 057b 6B000000 		.4byte	0x6b
 2686 057f 02       		.uleb128 0x2
 2687 0580 91       		.byte	0x91
 2688 0581 6F       		.sleb128 -17
 2689 0582 00       		.byte	0
 2690 0583 0A       		.uleb128 0xa
 2691 0584 DC050000 		.4byte	.LASF66
 2692 0588 01       		.byte	0x1
 2693 0589 8504     		.2byte	0x485
 2694 058b 00000000 		.4byte	.LFB32
 2695 058f 48000000 		.4byte	.LFE32-.LFB32
 2696 0593 01       		.uleb128 0x1
 2697 0594 9C       		.byte	0x9c
 2698 0595 B8050000 		.4byte	0x5b8
 2699 0599 0B       		.uleb128 0xb
 2700 059a 4F010000 		.4byte	.LASF63
 2701 059e 01       		.byte	0x1
 2702 059f 8504     		.2byte	0x485
 2703 05a1 76000000 		.4byte	0x76
 2704 05a5 02       		.uleb128 0x2
 2705 05a6 91       		.byte	0x91
 2706 05a7 64       		.sleb128 -28
 2707 05a8 0C       		.uleb128 0xc
 2708 05a9 0B050000 		.4byte	.LASF21
 2709 05ad 01       		.byte	0x1
 2710 05ae 8704     		.2byte	0x487
 2711 05b0 6B000000 		.4byte	0x6b
 2712 05b4 02       		.uleb128 0x2
 2713 05b5 91       		.byte	0x91
 2714 05b6 6F       		.sleb128 -17
 2715 05b7 00       		.byte	0
 2716 05b8 0A       		.uleb128 0xa
 2717 05b9 D0030000 		.4byte	.LASF67
 2718 05bd 01       		.byte	0x1
 2719 05be A604     		.2byte	0x4a6
 2720 05c0 00000000 		.4byte	.LFB33
 2721 05c4 48000000 		.4byte	.LFE33-.LFB33
 2722 05c8 01       		.uleb128 0x1
 2723 05c9 9C       		.byte	0x9c
 2724 05ca ED050000 		.4byte	0x5ed
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 73


 2725 05ce 0B       		.uleb128 0xb
 2726 05cf 4F010000 		.4byte	.LASF63
 2727 05d3 01       		.byte	0x1
 2728 05d4 A604     		.2byte	0x4a6
 2729 05d6 76000000 		.4byte	0x76
 2730 05da 02       		.uleb128 0x2
 2731 05db 91       		.byte	0x91
 2732 05dc 64       		.sleb128 -28
 2733 05dd 0C       		.uleb128 0xc
 2734 05de 0B050000 		.4byte	.LASF21
 2735 05e2 01       		.byte	0x1
 2736 05e3 A804     		.2byte	0x4a8
 2737 05e5 6B000000 		.4byte	0x6b
 2738 05e9 02       		.uleb128 0x2
 2739 05ea 91       		.byte	0x91
 2740 05eb 6F       		.sleb128 -17
 2741 05ec 00       		.byte	0
 2742 05ed 0A       		.uleb128 0xa
 2743 05ee A4050000 		.4byte	.LASF68
 2744 05f2 01       		.byte	0x1
 2745 05f3 CE04     		.2byte	0x4ce
 2746 05f5 00000000 		.4byte	.LFB34
 2747 05f9 3C000000 		.4byte	.LFE34-.LFB34
 2748 05fd 01       		.uleb128 0x1
 2749 05fe 9C       		.byte	0x9c
 2750 05ff 31060000 		.4byte	0x631
 2751 0603 0B       		.uleb128 0xb
 2752 0604 5B010000 		.4byte	.LASF39
 2753 0608 01       		.byte	0x1
 2754 0609 CE04     		.2byte	0x4ce
 2755 060b 76000000 		.4byte	0x76
 2756 060f 02       		.uleb128 0x2
 2757 0610 91       		.byte	0x91
 2758 0611 64       		.sleb128 -28
 2759 0612 0B       		.uleb128 0xb
 2760 0613 8B010000 		.4byte	.LASF69
 2761 0617 01       		.byte	0x1
 2762 0618 CE04     		.2byte	0x4ce
 2763 061a 76000000 		.4byte	0x76
 2764 061e 02       		.uleb128 0x2
 2765 061f 91       		.byte	0x91
 2766 0620 60       		.sleb128 -32
 2767 0621 0C       		.uleb128 0xc
 2768 0622 0B050000 		.4byte	.LASF21
 2769 0626 01       		.byte	0x1
 2770 0627 D004     		.2byte	0x4d0
 2771 0629 6B000000 		.4byte	0x6b
 2772 062d 02       		.uleb128 0x2
 2773 062e 91       		.byte	0x91
 2774 062f 6F       		.sleb128 -17
 2775 0630 00       		.byte	0
 2776 0631 0E       		.uleb128 0xe
 2777 0632 32000000 		.4byte	.LASF70
 2778 0636 01       		.byte	0x1
 2779 0637 EB04     		.2byte	0x4eb
 2780 0639 76000000 		.4byte	0x76
 2781 063d 00000000 		.4byte	.LFB35
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 74


 2782 0641 20000000 		.4byte	.LFE35-.LFB35
 2783 0645 01       		.uleb128 0x1
 2784 0646 9C       		.byte	0x9c
 2785 0647 0D       		.uleb128 0xd
 2786 0648 00000000 		.4byte	.LASF71
 2787 064c 01       		.byte	0x1
 2788 064d 0405     		.2byte	0x504
 2789 064f 00000000 		.4byte	.LFB36
 2790 0653 1C000000 		.4byte	.LFE36-.LFB36
 2791 0657 01       		.uleb128 0x1
 2792 0658 9C       		.byte	0x9c
 2793 0659 6D060000 		.4byte	0x66d
 2794 065d 0B       		.uleb128 0xb
 2795 065e 94030000 		.4byte	.LASF72
 2796 0662 01       		.byte	0x1
 2797 0663 0405     		.2byte	0x504
 2798 0665 76000000 		.4byte	0x76
 2799 0669 02       		.uleb128 0x2
 2800 066a 91       		.byte	0x91
 2801 066b 74       		.sleb128 -12
 2802 066c 00       		.byte	0
 2803 066d 0E       		.uleb128 0xe
 2804 066e E6010000 		.4byte	.LASF73
 2805 0672 01       		.byte	0x1
 2806 0673 1B05     		.2byte	0x51b
 2807 0675 76000000 		.4byte	0x76
 2808 0679 00000000 		.4byte	.LFB37
 2809 067d 14000000 		.4byte	.LFE37-.LFB37
 2810 0681 01       		.uleb128 0x1
 2811 0682 9C       		.byte	0x9c
 2812 0683 0E       		.uleb128 0xe
 2813 0684 35050000 		.4byte	.LASF74
 2814 0688 01       		.byte	0x1
 2815 0689 3205     		.2byte	0x532
 2816 068b 76000000 		.4byte	0x76
 2817 068f 00000000 		.4byte	.LFB38
 2818 0693 14000000 		.4byte	.LFE38-.LFB38
 2819 0697 01       		.uleb128 0x1
 2820 0698 9C       		.byte	0x9c
 2821 0699 0D       		.uleb128 0xd
 2822 069a BB050000 		.4byte	.LASF75
 2823 069e 01       		.byte	0x1
 2824 069f 4905     		.2byte	0x549
 2825 06a1 00000000 		.4byte	.LFB39
 2826 06a5 1C000000 		.4byte	.LFE39-.LFB39
 2827 06a9 01       		.uleb128 0x1
 2828 06aa 9C       		.byte	0x9c
 2829 06ab BF060000 		.4byte	0x6bf
 2830 06af 0B       		.uleb128 0xb
 2831 06b0 94030000 		.4byte	.LASF72
 2832 06b4 01       		.byte	0x1
 2833 06b5 4905     		.2byte	0x549
 2834 06b7 76000000 		.4byte	0x76
 2835 06bb 02       		.uleb128 0x2
 2836 06bc 91       		.byte	0x91
 2837 06bd 74       		.sleb128 -12
 2838 06be 00       		.byte	0
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 75


 2839 06bf 0D       		.uleb128 0xd
 2840 06c0 60010000 		.4byte	.LASF76
 2841 06c4 01       		.byte	0x1
 2842 06c5 6005     		.2byte	0x560
 2843 06c7 00000000 		.4byte	.LFB40
 2844 06cb 1C000000 		.4byte	.LFE40-.LFB40
 2845 06cf 01       		.uleb128 0x1
 2846 06d0 9C       		.byte	0x9c
 2847 06d1 E5060000 		.4byte	0x6e5
 2848 06d5 0B       		.uleb128 0xb
 2849 06d6 94030000 		.4byte	.LASF72
 2850 06da 01       		.byte	0x1
 2851 06db 6005     		.2byte	0x560
 2852 06dd 76000000 		.4byte	0x76
 2853 06e1 02       		.uleb128 0x2
 2854 06e2 91       		.byte	0x91
 2855 06e3 74       		.sleb128 -12
 2856 06e4 00       		.byte	0
 2857 06e5 0F       		.uleb128 0xf
 2858 06e6 E7020000 		.4byte	.LASF80
 2859 06ea 01       		.byte	0x1
 2860 06eb 15       		.byte	0x15
 2861 06ec 6B000000 		.4byte	0x6b
 2862 06f0 05       		.uleb128 0x5
 2863 06f1 03       		.byte	0x3
 2864 06f2 00000000 		.4byte	PWM_Red_initVar
 2865 06f6 00       		.byte	0
 2866              		.section	.debug_abbrev,"",%progbits
 2867              	.Ldebug_abbrev0:
 2868 0000 01       		.uleb128 0x1
 2869 0001 11       		.uleb128 0x11
 2870 0002 01       		.byte	0x1
 2871 0003 25       		.uleb128 0x25
 2872 0004 0E       		.uleb128 0xe
 2873 0005 13       		.uleb128 0x13
 2874 0006 0B       		.uleb128 0xb
 2875 0007 03       		.uleb128 0x3
 2876 0008 0E       		.uleb128 0xe
 2877 0009 1B       		.uleb128 0x1b
 2878 000a 0E       		.uleb128 0xe
 2879 000b 55       		.uleb128 0x55
 2880 000c 17       		.uleb128 0x17
 2881 000d 11       		.uleb128 0x11
 2882 000e 01       		.uleb128 0x1
 2883 000f 10       		.uleb128 0x10
 2884 0010 17       		.uleb128 0x17
 2885 0011 00       		.byte	0
 2886 0012 00       		.byte	0
 2887 0013 02       		.uleb128 0x2
 2888 0014 24       		.uleb128 0x24
 2889 0015 00       		.byte	0
 2890 0016 0B       		.uleb128 0xb
 2891 0017 0B       		.uleb128 0xb
 2892 0018 3E       		.uleb128 0x3e
 2893 0019 0B       		.uleb128 0xb
 2894 001a 03       		.uleb128 0x3
 2895 001b 0E       		.uleb128 0xe
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 76


 2896 001c 00       		.byte	0
 2897 001d 00       		.byte	0
 2898 001e 03       		.uleb128 0x3
 2899 001f 24       		.uleb128 0x24
 2900 0020 00       		.byte	0
 2901 0021 0B       		.uleb128 0xb
 2902 0022 0B       		.uleb128 0xb
 2903 0023 3E       		.uleb128 0x3e
 2904 0024 0B       		.uleb128 0xb
 2905 0025 03       		.uleb128 0x3
 2906 0026 08       		.uleb128 0x8
 2907 0027 00       		.byte	0
 2908 0028 00       		.byte	0
 2909 0029 04       		.uleb128 0x4
 2910 002a 16       		.uleb128 0x16
 2911 002b 00       		.byte	0
 2912 002c 03       		.uleb128 0x3
 2913 002d 0E       		.uleb128 0xe
 2914 002e 3A       		.uleb128 0x3a
 2915 002f 0B       		.uleb128 0xb
 2916 0030 3B       		.uleb128 0x3b
 2917 0031 0B       		.uleb128 0xb
 2918 0032 49       		.uleb128 0x49
 2919 0033 13       		.uleb128 0x13
 2920 0034 00       		.byte	0
 2921 0035 00       		.byte	0
 2922 0036 05       		.uleb128 0x5
 2923 0037 16       		.uleb128 0x16
 2924 0038 00       		.byte	0
 2925 0039 03       		.uleb128 0x3
 2926 003a 0E       		.uleb128 0xe
 2927 003b 3A       		.uleb128 0x3a
 2928 003c 0B       		.uleb128 0xb
 2929 003d 3B       		.uleb128 0x3b
 2930 003e 05       		.uleb128 0x5
 2931 003f 49       		.uleb128 0x49
 2932 0040 13       		.uleb128 0x13
 2933 0041 00       		.byte	0
 2934 0042 00       		.byte	0
 2935 0043 06       		.uleb128 0x6
 2936 0044 35       		.uleb128 0x35
 2937 0045 00       		.byte	0
 2938 0046 49       		.uleb128 0x49
 2939 0047 13       		.uleb128 0x13
 2940 0048 00       		.byte	0
 2941 0049 00       		.byte	0
 2942 004a 07       		.uleb128 0x7
 2943 004b 2E       		.uleb128 0x2e
 2944 004c 00       		.byte	0
 2945 004d 3F       		.uleb128 0x3f
 2946 004e 19       		.uleb128 0x19
 2947 004f 03       		.uleb128 0x3
 2948 0050 0E       		.uleb128 0xe
 2949 0051 3A       		.uleb128 0x3a
 2950 0052 0B       		.uleb128 0xb
 2951 0053 3B       		.uleb128 0x3b
 2952 0054 0B       		.uleb128 0xb
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 77


 2953 0055 27       		.uleb128 0x27
 2954 0056 19       		.uleb128 0x19
 2955 0057 11       		.uleb128 0x11
 2956 0058 01       		.uleb128 0x1
 2957 0059 12       		.uleb128 0x12
 2958 005a 06       		.uleb128 0x6
 2959 005b 40       		.uleb128 0x40
 2960 005c 18       		.uleb128 0x18
 2961 005d 9642     		.uleb128 0x2116
 2962 005f 19       		.uleb128 0x19
 2963 0060 00       		.byte	0
 2964 0061 00       		.byte	0
 2965 0062 08       		.uleb128 0x8
 2966 0063 2E       		.uleb128 0x2e
 2967 0064 01       		.byte	0x1
 2968 0065 3F       		.uleb128 0x3f
 2969 0066 19       		.uleb128 0x19
 2970 0067 03       		.uleb128 0x3
 2971 0068 0E       		.uleb128 0xe
 2972 0069 3A       		.uleb128 0x3a
 2973 006a 0B       		.uleb128 0xb
 2974 006b 3B       		.uleb128 0x3b
 2975 006c 0B       		.uleb128 0xb
 2976 006d 27       		.uleb128 0x27
 2977 006e 19       		.uleb128 0x19
 2978 006f 11       		.uleb128 0x11
 2979 0070 01       		.uleb128 0x1
 2980 0071 12       		.uleb128 0x12
 2981 0072 06       		.uleb128 0x6
 2982 0073 40       		.uleb128 0x40
 2983 0074 18       		.uleb128 0x18
 2984 0075 9642     		.uleb128 0x2116
 2985 0077 19       		.uleb128 0x19
 2986 0078 01       		.uleb128 0x1
 2987 0079 13       		.uleb128 0x13
 2988 007a 00       		.byte	0
 2989 007b 00       		.byte	0
 2990 007c 09       		.uleb128 0x9
 2991 007d 34       		.uleb128 0x34
 2992 007e 00       		.byte	0
 2993 007f 03       		.uleb128 0x3
 2994 0080 0E       		.uleb128 0xe
 2995 0081 3A       		.uleb128 0x3a
 2996 0082 0B       		.uleb128 0xb
 2997 0083 3B       		.uleb128 0x3b
 2998 0084 0B       		.uleb128 0xb
 2999 0085 49       		.uleb128 0x49
 3000 0086 13       		.uleb128 0x13
 3001 0087 02       		.uleb128 0x2
 3002 0088 18       		.uleb128 0x18
 3003 0089 00       		.byte	0
 3004 008a 00       		.byte	0
 3005 008b 0A       		.uleb128 0xa
 3006 008c 2E       		.uleb128 0x2e
 3007 008d 01       		.byte	0x1
 3008 008e 3F       		.uleb128 0x3f
 3009 008f 19       		.uleb128 0x19
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 78


 3010 0090 03       		.uleb128 0x3
 3011 0091 0E       		.uleb128 0xe
 3012 0092 3A       		.uleb128 0x3a
 3013 0093 0B       		.uleb128 0xb
 3014 0094 3B       		.uleb128 0x3b
 3015 0095 05       		.uleb128 0x5
 3016 0096 27       		.uleb128 0x27
 3017 0097 19       		.uleb128 0x19
 3018 0098 11       		.uleb128 0x11
 3019 0099 01       		.uleb128 0x1
 3020 009a 12       		.uleb128 0x12
 3021 009b 06       		.uleb128 0x6
 3022 009c 40       		.uleb128 0x40
 3023 009d 18       		.uleb128 0x18
 3024 009e 9642     		.uleb128 0x2116
 3025 00a0 19       		.uleb128 0x19
 3026 00a1 01       		.uleb128 0x1
 3027 00a2 13       		.uleb128 0x13
 3028 00a3 00       		.byte	0
 3029 00a4 00       		.byte	0
 3030 00a5 0B       		.uleb128 0xb
 3031 00a6 05       		.uleb128 0x5
 3032 00a7 00       		.byte	0
 3033 00a8 03       		.uleb128 0x3
 3034 00a9 0E       		.uleb128 0xe
 3035 00aa 3A       		.uleb128 0x3a
 3036 00ab 0B       		.uleb128 0xb
 3037 00ac 3B       		.uleb128 0x3b
 3038 00ad 05       		.uleb128 0x5
 3039 00ae 49       		.uleb128 0x49
 3040 00af 13       		.uleb128 0x13
 3041 00b0 02       		.uleb128 0x2
 3042 00b1 18       		.uleb128 0x18
 3043 00b2 00       		.byte	0
 3044 00b3 00       		.byte	0
 3045 00b4 0C       		.uleb128 0xc
 3046 00b5 34       		.uleb128 0x34
 3047 00b6 00       		.byte	0
 3048 00b7 03       		.uleb128 0x3
 3049 00b8 0E       		.uleb128 0xe
 3050 00b9 3A       		.uleb128 0x3a
 3051 00ba 0B       		.uleb128 0xb
 3052 00bb 3B       		.uleb128 0x3b
 3053 00bc 05       		.uleb128 0x5
 3054 00bd 49       		.uleb128 0x49
 3055 00be 13       		.uleb128 0x13
 3056 00bf 02       		.uleb128 0x2
 3057 00c0 18       		.uleb128 0x18
 3058 00c1 00       		.byte	0
 3059 00c2 00       		.byte	0
 3060 00c3 0D       		.uleb128 0xd
 3061 00c4 2E       		.uleb128 0x2e
 3062 00c5 01       		.byte	0x1
 3063 00c6 3F       		.uleb128 0x3f
 3064 00c7 19       		.uleb128 0x19
 3065 00c8 03       		.uleb128 0x3
 3066 00c9 0E       		.uleb128 0xe
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 79


 3067 00ca 3A       		.uleb128 0x3a
 3068 00cb 0B       		.uleb128 0xb
 3069 00cc 3B       		.uleb128 0x3b
 3070 00cd 05       		.uleb128 0x5
 3071 00ce 27       		.uleb128 0x27
 3072 00cf 19       		.uleb128 0x19
 3073 00d0 11       		.uleb128 0x11
 3074 00d1 01       		.uleb128 0x1
 3075 00d2 12       		.uleb128 0x12
 3076 00d3 06       		.uleb128 0x6
 3077 00d4 40       		.uleb128 0x40
 3078 00d5 18       		.uleb128 0x18
 3079 00d6 9742     		.uleb128 0x2117
 3080 00d8 19       		.uleb128 0x19
 3081 00d9 01       		.uleb128 0x1
 3082 00da 13       		.uleb128 0x13
 3083 00db 00       		.byte	0
 3084 00dc 00       		.byte	0
 3085 00dd 0E       		.uleb128 0xe
 3086 00de 2E       		.uleb128 0x2e
 3087 00df 00       		.byte	0
 3088 00e0 3F       		.uleb128 0x3f
 3089 00e1 19       		.uleb128 0x19
 3090 00e2 03       		.uleb128 0x3
 3091 00e3 0E       		.uleb128 0xe
 3092 00e4 3A       		.uleb128 0x3a
 3093 00e5 0B       		.uleb128 0xb
 3094 00e6 3B       		.uleb128 0x3b
 3095 00e7 05       		.uleb128 0x5
 3096 00e8 27       		.uleb128 0x27
 3097 00e9 19       		.uleb128 0x19
 3098 00ea 49       		.uleb128 0x49
 3099 00eb 13       		.uleb128 0x13
 3100 00ec 11       		.uleb128 0x11
 3101 00ed 01       		.uleb128 0x1
 3102 00ee 12       		.uleb128 0x12
 3103 00ef 06       		.uleb128 0x6
 3104 00f0 40       		.uleb128 0x40
 3105 00f1 18       		.uleb128 0x18
 3106 00f2 9742     		.uleb128 0x2117
 3107 00f4 19       		.uleb128 0x19
 3108 00f5 00       		.byte	0
 3109 00f6 00       		.byte	0
 3110 00f7 0F       		.uleb128 0xf
 3111 00f8 34       		.uleb128 0x34
 3112 00f9 00       		.byte	0
 3113 00fa 03       		.uleb128 0x3
 3114 00fb 0E       		.uleb128 0xe
 3115 00fc 3A       		.uleb128 0x3a
 3116 00fd 0B       		.uleb128 0xb
 3117 00fe 3B       		.uleb128 0x3b
 3118 00ff 0B       		.uleb128 0xb
 3119 0100 49       		.uleb128 0x49
 3120 0101 13       		.uleb128 0x13
 3121 0102 3F       		.uleb128 0x3f
 3122 0103 19       		.uleb128 0x19
 3123 0104 02       		.uleb128 0x2
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 80


 3124 0105 18       		.uleb128 0x18
 3125 0106 00       		.byte	0
 3126 0107 00       		.byte	0
 3127 0108 00       		.byte	0
 3128              		.section	.debug_aranges,"",%progbits
 3129 0000 54010000 		.4byte	0x154
 3130 0004 0200     		.2byte	0x2
 3131 0006 00000000 		.4byte	.Ldebug_info0
 3132 000a 04       		.byte	0x4
 3133 000b 00       		.byte	0
 3134 000c 0000     		.2byte	0
 3135 000e 0000     		.2byte	0
 3136 0010 00000000 		.4byte	.LFB1
 3137 0014 58000000 		.4byte	.LFE1-.LFB1
 3138 0018 00000000 		.4byte	.LFB2
 3139 001c 3C000000 		.4byte	.LFE2-.LFB2
 3140 0020 00000000 		.4byte	.LFB3
 3141 0024 24000000 		.4byte	.LFE3-.LFB3
 3142 0028 00000000 		.4byte	.LFB4
 3143 002c 34000000 		.4byte	.LFE4-.LFB4
 3144 0030 00000000 		.4byte	.LFB5
 3145 0034 48000000 		.4byte	.LFE5-.LFB5
 3146 0038 00000000 		.4byte	.LFB6
 3147 003c 48000000 		.4byte	.LFE6-.LFB6
 3148 0040 00000000 		.4byte	.LFB7
 3149 0044 48000000 		.4byte	.LFE7-.LFB7
 3150 0048 00000000 		.4byte	.LFB8
 3151 004c 50000000 		.4byte	.LFE8-.LFB8
 3152 0050 00000000 		.4byte	.LFB9
 3153 0054 20000000 		.4byte	.LFE9-.LFB9
 3154 0058 00000000 		.4byte	.LFB10
 3155 005c 4C000000 		.4byte	.LFE10-.LFB10
 3156 0060 00000000 		.4byte	.LFB11
 3157 0064 4C000000 		.4byte	.LFE11-.LFB11
 3158 0068 00000000 		.4byte	.LFB12
 3159 006c 50000000 		.4byte	.LFE12-.LFB12
 3160 0070 00000000 		.4byte	.LFB13
 3161 0074 48000000 		.4byte	.LFE13-.LFB13
 3162 0078 00000000 		.4byte	.LFB14
 3163 007c 20000000 		.4byte	.LFE14-.LFB14
 3164 0080 00000000 		.4byte	.LFB15
 3165 0084 18000000 		.4byte	.LFE15-.LFB15
 3166 0088 00000000 		.4byte	.LFB16
 3167 008c 48000000 		.4byte	.LFE16-.LFB16
 3168 0090 00000000 		.4byte	.LFB17
 3169 0094 20000000 		.4byte	.LFE17-.LFB17
 3170 0098 00000000 		.4byte	.LFB18
 3171 009c 18000000 		.4byte	.LFE18-.LFB18
 3172 00a0 00000000 		.4byte	.LFB19
 3173 00a4 48000000 		.4byte	.LFE19-.LFB19
 3174 00a8 00000000 		.4byte	.LFB20
 3175 00ac 20000000 		.4byte	.LFE20-.LFB20
 3176 00b0 00000000 		.4byte	.LFB21
 3177 00b4 18000000 		.4byte	.LFE21-.LFB21
 3178 00b8 00000000 		.4byte	.LFB22
 3179 00bc 4C000000 		.4byte	.LFE22-.LFB22
 3180 00c0 00000000 		.4byte	.LFB23
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 81


 3181 00c4 20000000 		.4byte	.LFE23-.LFB23
 3182 00c8 00000000 		.4byte	.LFB24
 3183 00cc 18000000 		.4byte	.LFE24-.LFB24
 3184 00d0 00000000 		.4byte	.LFB25
 3185 00d4 20000000 		.4byte	.LFE25-.LFB25
 3186 00d8 00000000 		.4byte	.LFB26
 3187 00dc 18000000 		.4byte	.LFE26-.LFB26
 3188 00e0 00000000 		.4byte	.LFB27
 3189 00e4 18000000 		.4byte	.LFE27-.LFB27
 3190 00e8 00000000 		.4byte	.LFB28
 3191 00ec 18000000 		.4byte	.LFE28-.LFB28
 3192 00f0 00000000 		.4byte	.LFB29
 3193 00f4 44000000 		.4byte	.LFE29-.LFB29
 3194 00f8 00000000 		.4byte	.LFB30
 3195 00fc 48000000 		.4byte	.LFE30-.LFB30
 3196 0100 00000000 		.4byte	.LFB31
 3197 0104 4C000000 		.4byte	.LFE31-.LFB31
 3198 0108 00000000 		.4byte	.LFB32
 3199 010c 48000000 		.4byte	.LFE32-.LFB32
 3200 0110 00000000 		.4byte	.LFB33
 3201 0114 48000000 		.4byte	.LFE33-.LFB33
 3202 0118 00000000 		.4byte	.LFB34
 3203 011c 3C000000 		.4byte	.LFE34-.LFB34
 3204 0120 00000000 		.4byte	.LFB35
 3205 0124 20000000 		.4byte	.LFE35-.LFB35
 3206 0128 00000000 		.4byte	.LFB36
 3207 012c 1C000000 		.4byte	.LFE36-.LFB36
 3208 0130 00000000 		.4byte	.LFB37
 3209 0134 14000000 		.4byte	.LFE37-.LFB37
 3210 0138 00000000 		.4byte	.LFB38
 3211 013c 14000000 		.4byte	.LFE38-.LFB38
 3212 0140 00000000 		.4byte	.LFB39
 3213 0144 1C000000 		.4byte	.LFE39-.LFB39
 3214 0148 00000000 		.4byte	.LFB40
 3215 014c 1C000000 		.4byte	.LFE40-.LFB40
 3216 0150 00000000 		.4byte	0
 3217 0154 00000000 		.4byte	0
 3218              		.section	.debug_ranges,"",%progbits
 3219              	.Ldebug_ranges0:
 3220 0000 00000000 		.4byte	.LFB1
 3221 0004 58000000 		.4byte	.LFE1
 3222 0008 00000000 		.4byte	.LFB2
 3223 000c 3C000000 		.4byte	.LFE2
 3224 0010 00000000 		.4byte	.LFB3
 3225 0014 24000000 		.4byte	.LFE3
 3226 0018 00000000 		.4byte	.LFB4
 3227 001c 34000000 		.4byte	.LFE4
 3228 0020 00000000 		.4byte	.LFB5
 3229 0024 48000000 		.4byte	.LFE5
 3230 0028 00000000 		.4byte	.LFB6
 3231 002c 48000000 		.4byte	.LFE6
 3232 0030 00000000 		.4byte	.LFB7
 3233 0034 48000000 		.4byte	.LFE7
 3234 0038 00000000 		.4byte	.LFB8
 3235 003c 50000000 		.4byte	.LFE8
 3236 0040 00000000 		.4byte	.LFB9
 3237 0044 20000000 		.4byte	.LFE9
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 82


 3238 0048 00000000 		.4byte	.LFB10
 3239 004c 4C000000 		.4byte	.LFE10
 3240 0050 00000000 		.4byte	.LFB11
 3241 0054 4C000000 		.4byte	.LFE11
 3242 0058 00000000 		.4byte	.LFB12
 3243 005c 50000000 		.4byte	.LFE12
 3244 0060 00000000 		.4byte	.LFB13
 3245 0064 48000000 		.4byte	.LFE13
 3246 0068 00000000 		.4byte	.LFB14
 3247 006c 20000000 		.4byte	.LFE14
 3248 0070 00000000 		.4byte	.LFB15
 3249 0074 18000000 		.4byte	.LFE15
 3250 0078 00000000 		.4byte	.LFB16
 3251 007c 48000000 		.4byte	.LFE16
 3252 0080 00000000 		.4byte	.LFB17
 3253 0084 20000000 		.4byte	.LFE17
 3254 0088 00000000 		.4byte	.LFB18
 3255 008c 18000000 		.4byte	.LFE18
 3256 0090 00000000 		.4byte	.LFB19
 3257 0094 48000000 		.4byte	.LFE19
 3258 0098 00000000 		.4byte	.LFB20
 3259 009c 20000000 		.4byte	.LFE20
 3260 00a0 00000000 		.4byte	.LFB21
 3261 00a4 18000000 		.4byte	.LFE21
 3262 00a8 00000000 		.4byte	.LFB22
 3263 00ac 4C000000 		.4byte	.LFE22
 3264 00b0 00000000 		.4byte	.LFB23
 3265 00b4 20000000 		.4byte	.LFE23
 3266 00b8 00000000 		.4byte	.LFB24
 3267 00bc 18000000 		.4byte	.LFE24
 3268 00c0 00000000 		.4byte	.LFB25
 3269 00c4 20000000 		.4byte	.LFE25
 3270 00c8 00000000 		.4byte	.LFB26
 3271 00cc 18000000 		.4byte	.LFE26
 3272 00d0 00000000 		.4byte	.LFB27
 3273 00d4 18000000 		.4byte	.LFE27
 3274 00d8 00000000 		.4byte	.LFB28
 3275 00dc 18000000 		.4byte	.LFE28
 3276 00e0 00000000 		.4byte	.LFB29
 3277 00e4 44000000 		.4byte	.LFE29
 3278 00e8 00000000 		.4byte	.LFB30
 3279 00ec 48000000 		.4byte	.LFE30
 3280 00f0 00000000 		.4byte	.LFB31
 3281 00f4 4C000000 		.4byte	.LFE31
 3282 00f8 00000000 		.4byte	.LFB32
 3283 00fc 48000000 		.4byte	.LFE32
 3284 0100 00000000 		.4byte	.LFB33
 3285 0104 48000000 		.4byte	.LFE33
 3286 0108 00000000 		.4byte	.LFB34
 3287 010c 3C000000 		.4byte	.LFE34
 3288 0110 00000000 		.4byte	.LFB35
 3289 0114 20000000 		.4byte	.LFE35
 3290 0118 00000000 		.4byte	.LFB36
 3291 011c 1C000000 		.4byte	.LFE36
 3292 0120 00000000 		.4byte	.LFB37
 3293 0124 14000000 		.4byte	.LFE37
 3294 0128 00000000 		.4byte	.LFB38
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 83


 3295 012c 14000000 		.4byte	.LFE38
 3296 0130 00000000 		.4byte	.LFB39
 3297 0134 1C000000 		.4byte	.LFE39
 3298 0138 00000000 		.4byte	.LFB40
 3299 013c 1C000000 		.4byte	.LFE40
 3300 0140 00000000 		.4byte	0
 3301 0144 00000000 		.4byte	0
 3302              		.section	.debug_line,"",%progbits
 3303              	.Ldebug_line0:
 3304 0000 6E030000 		.section	.debug_str,"MS",%progbits,1
 3304      02004400 
 3304      00000201 
 3304      FB0E0D00 
 3304      01010101 
 3305              	.LASF71:
 3306 0000 50574D5F 		.ascii	"PWM_Red_SetInterruptMode\000"
 3306      5265645F 
 3306      53657449 
 3306      6E746572 
 3306      72757074 
 3307              	.LASF41:
 3308 0019 636F756E 		.ascii	"count\000"
 3308      7400
 3309              	.LASF28:
 3310 001f 50574D5F 		.ascii	"PWM_Red_SetOneShot\000"
 3310      5265645F 
 3310      5365744F 
 3310      6E655368 
 3310      6F7400
 3311              	.LASF70:
 3312 0032 50574D5F 		.ascii	"PWM_Red_ReadStatus\000"
 3312      5265645F 
 3312      52656164 
 3312      53746174 
 3312      757300
 3313              	.LASF45:
 3314 0045 70657269 		.ascii	"period\000"
 3314      6F6400
 3315              	.LASF38:
 3316 004c 50574D5F 		.ascii	"PWM_Red_SetPWMInvert\000"
 3316      5265645F 
 3316      53657450 
 3316      574D496E 
 3316      76657274 
 3317              	.LASF7:
 3318 0061 6C6F6E67 		.ascii	"long long unsigned int\000"
 3318      206C6F6E 
 3318      6720756E 
 3318      7369676E 
 3318      65642069 
 3319              	.LASF25:
 3320 0078 71644D6F 		.ascii	"qdMode\000"
 3320      646500
 3321              	.LASF44:
 3322 007f 50574D5F 		.ascii	"PWM_Red_WritePeriod\000"
 3322      5265645F 
 3322      57726974 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 84


 3322      65506572 
 3322      696F6400 
 3323              	.LASF36:
 3324 0093 50574D5F 		.ascii	"PWM_Red_SetPWMDeadTime\000"
 3324      5265645F 
 3324      53657450 
 3324      574D4465 
 3324      61645469 
 3325              	.LASF6:
 3326 00aa 6C6F6E67 		.ascii	"long long int\000"
 3326      206C6F6E 
 3326      6720696E 
 3326      7400
 3327              	.LASF0:
 3328 00b8 7369676E 		.ascii	"signed char\000"
 3328      65642063 
 3328      68617200 
 3329              	.LASF19:
 3330 00c4 50574D5F 		.ascii	"PWM_Red_Enable\000"
 3330      5265645F 
 3330      456E6162 
 3330      6C6500
 3331              	.LASF78:
 3332 00d3 47656E65 		.ascii	"Generated_Source\\PSoC4\\PWM_Red.c\000"
 3332      72617465 
 3332      645F536F 
 3332      75726365 
 3332      5C50536F 
 3333              	.LASF4:
 3334 00f4 6C6F6E67 		.ascii	"long int\000"
 3334      20696E74 
 3334      00
 3335              	.LASF9:
 3336 00fd 75696E74 		.ascii	"uint8\000"
 3336      3800
 3337              	.LASF12:
 3338 0103 646F7562 		.ascii	"double\000"
 3338      6C6500
 3339              	.LASF60:
 3340 010a 50574D5F 		.ascii	"PWM_Red_ReadCapture\000"
 3340      5265645F 
 3340      52656164 
 3340      43617074 
 3340      75726500 
 3341              	.LASF50:
 3342 011e 50574D5F 		.ascii	"PWM_Red_WritePeriodBuf\000"
 3342      5265645F 
 3342      57726974 
 3342      65506572 
 3342      696F6442 
 3343              	.LASF10:
 3344 0135 75696E74 		.ascii	"uint32\000"
 3344      333200
 3345              	.LASF47:
 3346 013c 50574D5F 		.ascii	"PWM_Red_ReadPeriod\000"
 3346      5265645F 
 3346      52656164 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 85


 3346      50657269 
 3346      6F6400
 3347              	.LASF63:
 3348 014f 74726967 		.ascii	"triggerMode\000"
 3348      6765724D 
 3348      6F646500 
 3349              	.LASF39:
 3350 015b 6D61736B 		.ascii	"mask\000"
 3350      00
 3351              	.LASF76:
 3352 0160 50574D5F 		.ascii	"PWM_Red_SetInterrupt\000"
 3352      5265645F 
 3352      53657449 
 3352      6E746572 
 3352      72757074 
 3353              	.LASF37:
 3354 0175 64656164 		.ascii	"deadTime\000"
 3354      54696D65 
 3354      00
 3355              	.LASF8:
 3356 017e 756E7369 		.ascii	"unsigned int\000"
 3356      676E6564 
 3356      20696E74 
 3356      00
 3357              	.LASF69:
 3358 018b 636F6D6D 		.ascii	"command\000"
 3358      616E6400 
 3359              	.LASF5:
 3360 0193 6C6F6E67 		.ascii	"long unsigned int\000"
 3360      20756E73 
 3360      69676E65 
 3360      6420696E 
 3360      7400
 3361              	.LASF31:
 3362 01a5 6D6F6465 		.ascii	"modeMask\000"
 3362      4D61736B 
 3362      00
 3363              	.LASF61:
 3364 01ae 50574D5F 		.ascii	"PWM_Red_ReadCaptureBuf\000"
 3364      5265645F 
 3364      52656164 
 3364      43617074 
 3364      75726542 
 3365              	.LASF3:
 3366 01c5 73686F72 		.ascii	"short unsigned int\000"
 3366      7420756E 
 3366      7369676E 
 3366      65642069 
 3366      6E7400
 3367              	.LASF29:
 3368 01d8 6F6E6553 		.ascii	"oneShotEnable\000"
 3368      686F7445 
 3368      6E61626C 
 3368      6500
 3369              	.LASF73:
 3370 01e6 50574D5F 		.ascii	"PWM_Red_GetInterruptSourceMasked\000"
 3370      5265645F 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 86


 3370      47657449 
 3370      6E746572 
 3370      72757074 
 3371              	.LASF20:
 3372 0207 50574D5F 		.ascii	"PWM_Red_Stop\000"
 3372      5265645F 
 3372      53746F70 
 3372      00
 3373              	.LASF30:
 3374 0214 50574D5F 		.ascii	"PWM_Red_SetPWMMode\000"
 3374      5265645F 
 3374      53657450 
 3374      574D4D6F 
 3374      646500
 3375              	.LASF77:
 3376 0227 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 3376      43313120 
 3376      352E342E 
 3376      31203230 
 3376      31363036 
 3377 025a 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m0 -mthumb -g -O"
 3377      20726576 
 3377      6973696F 
 3377      6E203233 
 3377      37373135 
 3378 028d 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3378      66756E63 
 3378      74696F6E 
 3378      2D736563 
 3378      74696F6E 
 3379              	.LASF14:
 3380 02b5 72656733 		.ascii	"reg32\000"
 3380      3200
 3381              	.LASF42:
 3382 02bb 50574D5F 		.ascii	"PWM_Red_SetCounterMode\000"
 3382      5265645F 
 3382      53657443 
 3382      6F756E74 
 3382      65724D6F 
 3383              	.LASF16:
 3384 02d2 73697A65 		.ascii	"sizetype\000"
 3384      74797065 
 3384      00
 3385              	.LASF15:
 3386 02db 6C6F6E67 		.ascii	"long double\000"
 3386      20646F75 
 3386      626C6500 
 3387              	.LASF80:
 3388 02e7 50574D5F 		.ascii	"PWM_Red_initVar\000"
 3388      5265645F 
 3388      696E6974 
 3388      56617200 
 3389              	.LASF53:
 3390 02f7 50574D5F 		.ascii	"PWM_Red_SetPeriodSwap\000"
 3390      5265645F 
 3390      53657450 
 3390      6572696F 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 87


 3390      64537761 
 3391              	.LASF18:
 3392 030d 50574D5F 		.ascii	"PWM_Red_Start\000"
 3392      5265645F 
 3392      53746172 
 3392      7400
 3393              	.LASF55:
 3394 031b 636F6D70 		.ascii	"compare\000"
 3394      61726500 
 3395              	.LASF17:
 3396 0323 50574D5F 		.ascii	"PWM_Red_Init\000"
 3396      5265645F 
 3396      496E6974 
 3396      00
 3397              	.LASF11:
 3398 0330 666C6F61 		.ascii	"float\000"
 3398      7400
 3399              	.LASF27:
 3400 0336 70726573 		.ascii	"prescaler\000"
 3400      63616C65 
 3400      7200
 3401              	.LASF62:
 3402 0340 50574D5F 		.ascii	"PWM_Red_SetCaptureMode\000"
 3402      5265645F 
 3402      53657443 
 3402      61707475 
 3402      72654D6F 
 3403              	.LASF1:
 3404 0357 756E7369 		.ascii	"unsigned char\000"
 3404      676E6564 
 3404      20636861 
 3404      7200
 3405              	.LASF35:
 3406 0365 73746F70 		.ascii	"stopOnKillEnable\000"
 3406      4F6E4B69 
 3406      6C6C456E 
 3406      61626C65 
 3406      00
 3407              	.LASF2:
 3408 0376 73686F72 		.ascii	"short int\000"
 3408      7420696E 
 3408      7400
 3409              	.LASF56:
 3410 0380 50574D5F 		.ascii	"PWM_Red_ReadCompare\000"
 3410      5265645F 
 3410      52656164 
 3410      436F6D70 
 3410      61726500 
 3411              	.LASF72:
 3412 0394 696E7465 		.ascii	"interruptMask\000"
 3412      72727570 
 3412      744D6173 
 3412      6B00
 3413              	.LASF64:
 3414 03a2 50574D5F 		.ascii	"PWM_Red_SetReloadMode\000"
 3414      5265645F 
 3414      53657452 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 88


 3414      656C6F61 
 3414      644D6F64 
 3415              	.LASF57:
 3416 03b8 50574D5F 		.ascii	"PWM_Red_WriteCompareBuf\000"
 3416      5265645F 
 3416      57726974 
 3416      65436F6D 
 3416      70617265 
 3417              	.LASF67:
 3418 03d0 50574D5F 		.ascii	"PWM_Red_SetCountMode\000"
 3418      5265645F 
 3418      53657443 
 3418      6F756E74 
 3418      4D6F6465 
 3419              	.LASF23:
 3420 03e5 50574D5F 		.ascii	"PWM_Red_SetQDMode\000"
 3420      5265645F 
 3420      53657451 
 3420      444D6F64 
 3420      6500
 3421              	.LASF59:
 3422 03f7 50574D5F 		.ascii	"PWM_Red_ReadCompareBuf\000"
 3422      5265645F 
 3422      52656164 
 3422      436F6D70 
 3422      61726542 
 3423              	.LASF48:
 3424 040e 50574D5F 		.ascii	"PWM_Red_SetCompareSwap\000"
 3424      5265645F 
 3424      53657443 
 3424      6F6D7061 
 3424      72655377 
 3425              	.LASF52:
 3426 0425 50574D5F 		.ascii	"PWM_Red_ReadPeriodBuf\000"
 3426      5265645F 
 3426      52656164 
 3426      50657269 
 3426      6F644275 
 3427              	.LASF13:
 3428 043b 63686172 		.ascii	"char\000"
 3428      00
 3429              	.LASF24:
 3430 0440 6D6F6465 		.ascii	"mode\000"
 3430      00
 3431              	.LASF65:
 3432 0445 50574D5F 		.ascii	"PWM_Red_SetStartMode\000"
 3432      5265645F 
 3432      53657453 
 3432      74617274 
 3432      4D6F6465 
 3433              	.LASF43:
 3434 045a 636F756E 		.ascii	"counterMode\000"
 3434      7465724D 
 3434      6F646500 
 3435              	.LASF46:
 3436 0466 50574D5F 		.ascii	"PWM_Red_ReadCounter\000"
 3436      5265645F 
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 89


 3436      52656164 
 3436      436F756E 
 3436      74657200 
 3437              	.LASF54:
 3438 047a 50574D5F 		.ascii	"PWM_Red_WriteCompare\000"
 3438      5265645F 
 3438      57726974 
 3438      65436F6D 
 3438      70617265 
 3439              	.LASF58:
 3440 048f 636F6D70 		.ascii	"compareBuf\000"
 3440      61726542 
 3440      756600
 3441              	.LASF79:
 3442 049a 443A5C43 		.ascii	"D:\\CYTEST\\Micrium_CY8CKIT-044_OS2\\Micrium\\Examp"
 3442      59544553 
 3442      545C4D69 
 3442      63726975 
 3442      6D5F4359 
 3443 04c9 6C65735C 		.ascii	"les\\Cypress\\CY8CKIT-044\\OS2\\PSoC\\OS2.cydsn\000"
 3443      43797072 
 3443      6573735C 
 3443      43593843 
 3443      4B49542D 
 3444              	.LASF32:
 3445 04f4 50574D5F 		.ascii	"PWM_Red_SetPWMSyncKill\000"
 3445      5265645F 
 3445      53657450 
 3445      574D5379 
 3445      6E634B69 
 3446              	.LASF21:
 3447 050b 656E6162 		.ascii	"enableInterrupts\000"
 3447      6C65496E 
 3447      74657272 
 3447      75707473 
 3447      00
 3448              	.LASF34:
 3449 051c 50574D5F 		.ascii	"PWM_Red_SetPWMStopOnKill\000"
 3449      5265645F 
 3449      53657450 
 3449      574D5374 
 3449      6F704F6E 
 3450              	.LASF74:
 3451 0535 50574D5F 		.ascii	"PWM_Red_GetInterruptSource\000"
 3451      5265645F 
 3451      47657449 
 3451      6E746572 
 3451      72757074 
 3452              	.LASF33:
 3453 0550 73796E63 		.ascii	"syncKillEnable\000"
 3453      4B696C6C 
 3453      456E6162 
 3453      6C6500
 3454              	.LASF49:
 3455 055f 73776170 		.ascii	"swapEnable\000"
 3455      456E6162 
 3455      6C6500
ARM GAS  C:\Users\ADMINI~1\AppData\Local\Temp\ccuQ0kDm.s 			page 90


 3456              	.LASF26:
 3457 056a 50574D5F 		.ascii	"PWM_Red_SetPrescaler\000"
 3457      5265645F 
 3457      53657450 
 3457      72657363 
 3457      616C6572 
 3458              	.LASF40:
 3459 057f 50574D5F 		.ascii	"PWM_Red_WriteCounter\000"
 3459      5265645F 
 3459      57726974 
 3459      65436F75 
 3459      6E746572 
 3460              	.LASF22:
 3461 0594 50574D5F 		.ascii	"PWM_Red_SetMode\000"
 3461      5265645F 
 3461      5365744D 
 3461      6F646500 
 3462              	.LASF68:
 3463 05a4 50574D5F 		.ascii	"PWM_Red_TriggerCommand\000"
 3463      5265645F 
 3463      54726967 
 3463      67657243 
 3463      6F6D6D61 
 3464              	.LASF75:
 3465 05bb 50574D5F 		.ascii	"PWM_Red_ClearInterrupt\000"
 3465      5265645F 
 3465      436C6561 
 3465      72496E74 
 3465      65727275 
 3466              	.LASF51:
 3467 05d2 70657269 		.ascii	"periodBuf\000"
 3467      6F644275 
 3467      6600
 3468              	.LASF66:
 3469 05dc 50574D5F 		.ascii	"PWM_Red_SetStopMode\000"
 3469      5265645F 
 3469      53657453 
 3469      746F704D 
 3469      6F646500 
 3470              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
